{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/devnineteen/Music/evergreen-frontend/src/components/shared/PdfUploadFunction.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useState } from 'react';\nimport { Layout, Row, Col, Input, Form, Upload, message, Button } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\nimport 'assets/scss/antd-overrides.scss';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Loader from 'react-loader-spinner';\n\nconst axios = require('axios').default;\n\ntoast.configure();\n\nfunction PdfUploadFunction({\n  handlePdfData\n}) {\n  const _useState = useState({\n    files: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputFile = _useState2[0],\n        setInputFile = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        getValue = _useState4[0],\n        setValue = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loader = _useState6[0],\n        setLoader = _useState6[1];\n\n  const onChangeUpload = e => {\n    setLoader(true);\n\n    let emailvalue = _objectSpread(_objectSpread({}, inputFile), {}, {\n      files: e.target.files\n    });\n\n    setInputFile(emailvalue);\n\n    if (e.target.files.length) {\n      handleButton(e.target.files);\n    }\n  };\n\n  const handleButton = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (files) {\n      console.log(files);\n      yield pdfFileData(files).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (resp) {\n          if (resp.status === 200) {\n            console.log(resp.data.data, \"responssssssssssss\");\n            let pdfItem = resp.data.data;\n            handlePdfData(pdfItem);\n            setValue(pdfItem);\n            setLoader(false); // notify(\"success\")\n          }\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()).catch(error => {\n        console.log(error, \"pdf Uploaded error\");\n      });\n    });\n\n    return function handleButton(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const pdfFileData = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* (inputFile) {\n      let fileData = inputFile;\n      console.log(\"filesdataaaa\", fileData);\n      const data = new FormData();\n\n      var _iterator = _createForOfIteratorHelper(fileData),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          const File = _step.value;\n          data.append('files', File);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      let pdfData = yield axios.post(`${process.env.REACT_APP_API_URL}/api/v1/files/upload_pdf_file`, data, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n      return pdfData;\n    });\n\n    return function pdfFileData(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  const notify = msg => {\n    if (msg == \"error\") {\n      toast.error(\"Please select the pdf format\");\n    } else if (msg == \"success\") {\n      toast.success(\"Pdf file upload successfully\");\n    }\n  };\n\n  console.log(\"pdfData\", getValue);\n  return /*#__PURE__*/React.createElement(Layout, {\n    className: \"h-auto mb-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 7,\n    className: \"flex justify-end items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"file-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    multiple: true,\n    type: \"file\",\n    name: \"file\",\n    onChange: e => onChangeUpload(e, \"files\"),\n    accept: \"application/pdf\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    class: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"Choose\"), /*#__PURE__*/React.createElement(\"span\", {\n    class: \"label\",\n    \"data-js-label\": true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 45\n    }\n  }, inputFile !== null ? inputFile.files.name : \"Choose File\"))), loader ? /*#__PURE__*/React.createElement(Loader, {\n    type: \"Circles\",\n    color: \"#00BFFF\",\n    height: 100,\n    width: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 18\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image_block_opportunity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, console.log(\"ooooooooo\", inputFile.files[1]), getValue && getValue.length ? getValue.map((item, i) => {\n    console.log(\"iteeeeee\", item);\n    return /*#__PURE__*/React.createElement(\"img\", {\n      src: \"https://upload.wikimedia.org/wikipedia/commons/8/87/PDF_file_icon.svg\",\n      alt: item.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    });\n  }) : null)));\n}\n\n__signature__(PdfUploadFunction, \"useState{[inputFile, setInputFile]({\\n    files: []\\n  })}\\nuseState{[getValue,setValue]}\\nuseState{[loader, setLoader]}\");\n\nconst _default = PdfUploadFunction;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(axios, \"axios\", \"/home/devnineteen/Music/evergreen-frontend/src/components/shared/PdfUploadFunction.js\");\n  reactHotLoader.register(PdfUploadFunction, \"PdfUploadFunction\", \"/home/devnineteen/Music/evergreen-frontend/src/components/shared/PdfUploadFunction.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/devnineteen/Music/evergreen-frontend/src/components/shared/PdfUploadFunction.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/src/components/shared/PdfUploadFunction.js"],"names":["React","useEffect","useState","Layout","Row","Col","Input","Form","Upload","message","Button","FontAwesomeIcon","faCloudUploadAlt","ToastContainer","toast","Loader","axios","require","default","configure","PdfUploadFunction","handlePdfData","files","inputFile","setInputFile","getValue","setValue","loader","setLoader","onChangeUpload","e","emailvalue","target","length","handleButton","console","log","pdfFileData","then","resp","status","data","pdfItem","catch","error","fileData","FormData","File","append","pdfData","post","process","env","REACT_APP_API_URL","headers","notify","msg","success","name","map","item","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Layout, Row, Col, Input, Form, Upload, message, Button } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\nimport 'assets/scss/antd-overrides.scss';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Loader from 'react-loader-spinner'\nconst axios = require('axios').default;\ntoast.configure()\n\nfunction PdfUploadFunction({ handlePdfData }) {\n  const [inputFile, setInputFile] = useState({\n    files: []\n  })\n  const [getValue,setValue]= useState()\n  const [loader, setLoader] = useState()\n\n  const onChangeUpload = (e) => {\n    setLoader(true)\n    let emailvalue = { ...inputFile, files: e.target.files }\n    setInputFile(emailvalue)\n    if(e.target.files.length){\n      handleButton(e.target.files)\n    }\n  }\n  const handleButton = async (files) => {\n    console.log(files)\n    await pdfFileData(files).then(async resp => {\n      if (resp.status === 200) {\n        console.log(resp.data.data,\"responssssssssssss\")\n        let pdfItem = resp.data.data\n        handlePdfData(pdfItem)\n        setValue(pdfItem)\n        setLoader(false)\n        // notify(\"success\")\n      }\n    }).catch(error => {\n      console.log(error, \"pdf Uploaded error\")\n    })\n  }\n  const pdfFileData = async (inputFile) => {\n    let fileData = inputFile\n    console.log(\"filesdataaaa\",fileData)\n    const data = new FormData();\n    for (const File of fileData) {\n      data.append('files', File);\n    }\n    let pdfData = await axios.post(`${process.env.REACT_APP_API_URL}/api/v1/files/upload_pdf_file`, data, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        \"Access-Control-Allow-Origin\": \"*\"\n      }}\n      )\n    return pdfData\n  }\n  const notify = msg => {\n    if (msg == \"error\") {\n      toast.error(\"Please select the pdf format\")\n    } else if (msg == \"success\") {\n      toast.success(\"Pdf file upload successfully\")\n    }\n  }\n  console.log(\"pdfData\", getValue)\n  return (\n    <Layout className=\"h-auto mb-6\">\n      <Col span={7} className=\"flex justify-end items-center\">\n        <div class='file-input'>\n          <input multiple type='file' name=\"file\" onChange={(e) => onChangeUpload(e, \"files\")} accept=\"application/pdf\" />\n          <span class='button'>Choose</span>\n          <span class='label' data-js-label><label>{inputFile !== null ? inputFile.files.name : \"Choose File\"}</label></span>\n        </div>\n        {loader ?<Loader\n          type=\"Circles\"\n          color=\"#00BFFF\"\n          height={100}\n          width={100}\n        /> : null}\n        <div className=\"image_block_opportunity\">\n          {console.log(\"ooooooooo\",inputFile.files[1])}\n         {getValue && getValue.length ? getValue.map((item,i) => {\n          console.log(\"iteeeeee\",item)\n          return (\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/8/87/PDF_file_icon.svg\" alt={item.name}></img>\n             )}):null}\n          </div>\n        {/* <button className=\"pdf_btn\" onClick={() => handleButton()}>Upload PDF</button>  */}\n      </Col>\n    </Layout>\n  );\n}\n\nexport default PdfUploadFunction;\n"]},"metadata":{},"sourceType":"module"}