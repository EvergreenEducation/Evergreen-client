{"ast":null,"code":"/** Virtual DOM Node */\nfunction VNode() {}\n/** Global options\n *\t@public\n *\t@namespace options {Object}\n */\n\n\nvar options = {\n  /** If `true`, `prop` changes trigger synchronous component updates.\n   *\t@name syncComponentUpdates\n   *\t@type Boolean\n   *\t@default true\n   */\n  //syncComponentUpdates: true,\n\n  /** Processes all created VNodes.\n   *\t@param {VNode} vnode\tA newly-created VNode to normalize/process\n   */\n  //vnode(vnode) { }\n\n  /** Hook invoked after a component is mounted. */\n  // afterMount(component) { }\n\n  /** Hook invoked after the DOM is updated with a component's latest render. */\n  // afterUpdate(component) { }\n\n  /** Hook invoked immediately before a component is unmounted. */\n  // beforeUnmount(component) { }\n};\nvar stack = [];\nvar EMPTY_CHILDREN = [];\n/**\n * JSX/hyperscript reviver.\n * @see http://jasonformat.com/wtf-is-jsx\n * Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0\n *\n * Note: this is exported as both `h()` and `createElement()` for compatibility reasons.\n *\n * Creates a VNode (virtual DOM element). A tree of VNodes can be used as a lightweight representation\n * of the structure of a DOM tree. This structure can be realized by recursively comparing it against\n * the current _actual_ DOM structure, and applying only the differences.\n *\n * `h()`/`createElement()` accepts an element name, a list of attributes/props,\n * and optionally children to append to the element.\n *\n * @example The following DOM tree\n *\n * `<div id=\"foo\" name=\"bar\">Hello!</div>`\n *\n * can be constructed using this function as:\n *\n * `h('div', { id: 'foo', name : 'bar' }, 'Hello!');`\n *\n * @param {string} nodeName\tAn element name. Ex: `div`, `a`, `span`, etc.\n * @param {Object} attributes\tAny attributes/props to set on the created element.\n * @param rest\t\t\tAdditional arguments are taken to be children to append. Can be infinitely nested Arrays.\n *\n * @public\n */\n\nfunction h(nodeName, attributes) {\n  var children = EMPTY_CHILDREN,\n      lastSimple,\n      child,\n      simple,\n      i;\n\n  for (i = arguments.length; i-- > 2;) {\n    stack.push(arguments[i]);\n  }\n\n  if (attributes && attributes.children != null) {\n    if (!stack.length) stack.push(attributes.children);\n    delete attributes.children;\n  }\n\n  while (stack.length) {\n    if ((child = stack.pop()) && child.pop !== undefined) {\n      for (i = child.length; i--;) {\n        stack.push(child[i]);\n      }\n    } else {\n      if (typeof child === 'boolean') child = null;\n\n      if (simple = typeof nodeName !== 'function') {\n        if (child == null) child = '';else if (typeof child === 'number') child = String(child);else if (typeof child !== 'string') simple = false;\n      }\n\n      if (simple && lastSimple) {\n        children[children.length - 1] += child;\n      } else if (children === EMPTY_CHILDREN) {\n        children = [child];\n      } else {\n        children.push(child);\n      }\n\n      lastSimple = simple;\n    }\n  }\n\n  var p = new VNode();\n  p.nodeName = nodeName;\n  p.children = children;\n  p.attributes = attributes == null ? undefined : attributes;\n  p.key = attributes == null ? undefined : attributes.key; // if a \"vnode hook\" is defined, pass every created VNode to it\n\n  if (options.vnode !== undefined) options.vnode(p);\n  return p;\n}\n/**\n *  Copy all properties from `props` onto `obj`.\n *  @param {Object} obj\t\tObject onto which properties should be copied.\n *  @param {Object} props\tObject from which to copy properties.\n *  @returns obj\n *  @private\n */\n\n\nfunction extend(obj, props) {\n  for (var i in props) {\n    obj[i] = props[i];\n  }\n\n  return obj;\n}\n/**\n * Call a function asynchronously, as soon as possible. Makes\n * use of HTML Promise to schedule the callback if available,\n * otherwise falling back to `setTimeout` (mainly for IE<11).\n *\n * @param {Function} callback\n */\n\n\nvar defer = typeof Promise == 'function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {VNode} vnode\t\tThe virtual DOM element to clone\n * @param {Object} props\tAttributes/props to add when cloning\n * @param {VNode} rest\t\tAny additional arguments will be used as replacement children.\n */\n\nfunction cloneElement(vnode, props) {\n  return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);\n} // DOM properties that should NOT have \"px\" added when numeric\n\n\nvar IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n/** Managed queue of dirty components to be re-rendered */\n\nvar items = [];\n\nfunction enqueueRender(component) {\n  if (!component._dirty && (component._dirty = true) && items.push(component) == 1) {\n    (options.debounceRendering || defer)(rerender);\n  }\n}\n\nfunction rerender() {\n  var p,\n      list = items;\n  items = [];\n\n  while (p = list.pop()) {\n    if (p._dirty) renderComponent(p);\n  }\n}\n/**\n * Check if two nodes are equivalent.\n *\n * @param {Node} node\t\t\tDOM Node to compare\n * @param {VNode} vnode\t\t\tVirtual DOM node to compare\n * @param {boolean} [hydrating=false]\tIf true, ignores component constructors when comparing.\n * @private\n */\n\n\nfunction isSameNodeType(node, vnode, hydrating) {\n  if (typeof vnode === 'string' || typeof vnode === 'number') {\n    return node.splitText !== undefined;\n  }\n\n  if (typeof vnode.nodeName === 'string') {\n    return !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n  }\n\n  return hydrating || node._componentConstructor === vnode.nodeName;\n}\n/**\n * Check if an Element has a given nodeName, case-insensitively.\n *\n * @param {Element} node\tA DOM Element to inspect the name of.\n * @param {String} nodeName\tUnnormalized name to compare against.\n */\n\n\nfunction isNamedNode(node, nodeName) {\n  return node.normalizedNodeName === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();\n}\n/**\n * Reconstruct Component-style `props` from a VNode.\n * Ensures default/fallback values from `defaultProps`:\n * Own-properties of `defaultProps` not present in `vnode.attributes` are added.\n *\n * @param {VNode} vnode\n * @returns {Object} props\n */\n\n\nfunction getNodeProps(vnode) {\n  var props = extend({}, vnode.attributes);\n  props.children = vnode.children;\n  var defaultProps = vnode.nodeName.defaultProps;\n\n  if (defaultProps !== undefined) {\n    for (var i in defaultProps) {\n      if (props[i] === undefined) {\n        props[i] = defaultProps[i];\n      }\n    }\n  }\n\n  return props;\n}\n/** Create an element with the given nodeName.\n *\t@param {String} nodeName\n *\t@param {Boolean} [isSvg=false]\tIf `true`, creates an element within the SVG namespace.\n *\t@returns {Element} node\n */\n\n\nfunction createNode(nodeName, isSvg) {\n  var node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n  node.normalizedNodeName = nodeName;\n  return node;\n}\n/** Remove a child node from its parent if attached.\n *\t@param {Element} node\t\tThe node to remove\n */\n\n\nfunction removeNode(node) {\n  var parentNode = node.parentNode;\n  if (parentNode) parentNode.removeChild(node);\n}\n/** Set a named attribute on the given Node, with special behavior for some names and event handlers.\n *\tIf `value` is `null`, the attribute/handler will be removed.\n *\t@param {Element} node\tAn element to mutate\n *\t@param {string} name\tThe name/key to set, such as an event or attribute name\n *\t@param {any} old\tThe last value that was set for this name/node pair\n *\t@param {any} value\tAn attribute value, such as a function to be used as an event handler\n *\t@param {Boolean} isSvg\tAre we currently diffing inside an svg?\n *\t@private\n */\n\n\nfunction setAccessor(node, name, old, value, isSvg) {\n  if (name === 'className') name = 'class';\n\n  if (name === 'key') {// ignore\n  } else if (name === 'ref') {\n    if (old) old(null);\n    if (value) value(node);\n  } else if (name === 'class' && !isSvg) {\n    node.className = value || '';\n  } else if (name === 'style') {\n    if (!value || typeof value === 'string' || typeof old === 'string') {\n      node.style.cssText = value || '';\n    }\n\n    if (value && typeof value === 'object') {\n      if (typeof old !== 'string') {\n        for (var i in old) {\n          if (!(i in value)) node.style[i] = '';\n        }\n      }\n\n      for (var i in value) {\n        node.style[i] = typeof value[i] === 'number' && IS_NON_DIMENSIONAL.test(i) === false ? value[i] + 'px' : value[i];\n      }\n    }\n  } else if (name === 'dangerouslySetInnerHTML') {\n    if (value) node.innerHTML = value.__html || '';\n  } else if (name[0] == 'o' && name[1] == 'n') {\n    var useCapture = name !== (name = name.replace(/Capture$/, ''));\n    name = name.toLowerCase().substring(2);\n\n    if (value) {\n      if (!old) node.addEventListener(name, eventProxy, useCapture);\n    } else {\n      node.removeEventListener(name, eventProxy, useCapture);\n    }\n\n    (node._listeners || (node._listeners = {}))[name] = value;\n  } else if (name !== 'list' && name !== 'type' && !isSvg && name in node) {\n    setProperty(node, name, value == null ? '' : value);\n    if (value == null || value === false) node.removeAttribute(name);\n  } else {\n    var ns = isSvg && name !== (name = name.replace(/^xlink:?/, ''));\n\n    if (value == null || value === false) {\n      if (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());else node.removeAttribute(name);\n    } else if (typeof value !== 'function') {\n      if (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);else node.setAttribute(name, value);\n    }\n  }\n}\n/** Attempt to set a DOM property to the given value.\n *\tIE & FF throw for certain property-value combinations.\n */\n\n\nfunction setProperty(node, name, value) {\n  try {\n    node[name] = value;\n  } catch (e) {}\n}\n/** Proxy an event to hooked event handlers\n *\t@private\n */\n\n\nfunction eventProxy(e) {\n  return this._listeners[e.type](options.event && options.event(e) || e);\n}\n/** Queue of components that have been mounted and are awaiting componentDidMount */\n\n\nvar mounts = [];\n/** Diff recursion count, used to track the end of the diff cycle. */\n\nvar diffLevel = 0;\n/** Global flag indicating if the diff is currently within an SVG */\n\nvar isSvgMode = false;\n/** Global flag indicating if the diff is performing hydration */\n\nvar hydrating = false;\n/** Invoke queued componentDidMount lifecycle methods */\n\nfunction flushMounts() {\n  var c;\n\n  while (c = mounts.pop()) {\n    if (options.afterMount) options.afterMount(c);\n    if (c.componentDidMount) c.componentDidMount();\n  }\n}\n/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.\n *\t@param {Element} [dom=null]\t\tA DOM node to mutate into the shape of the `vnode`\n *\t@param {VNode} vnode\t\t\tA VNode (with descendants forming a tree) representing the desired DOM structure\n *\t@returns {Element} dom\t\t\tThe created/mutated element\n *\t@private\n */\n\n\nfunction diff(dom, vnode, context, mountAll, parent, componentRoot) {\n  // diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)\n  if (!diffLevel++) {\n    // when first starting the diff, check if we're diffing an SVG or within an SVG\n    isSvgMode = parent != null && parent.ownerSVGElement !== undefined; // hydration is indicated by the existing element to be diffed not having a prop cache\n\n    hydrating = dom != null && !('__preactattr_' in dom);\n  }\n\n  var ret = idiff(dom, vnode, context, mountAll, componentRoot); // append the element if its a new parent\n\n  if (parent && ret.parentNode !== parent) parent.appendChild(ret); // diffLevel being reduced to 0 means we're exiting the diff\n\n  if (! --diffLevel) {\n    hydrating = false; // invoke queued componentDidMount lifecycle methods\n\n    if (!componentRoot) flushMounts();\n  }\n\n  return ret;\n}\n/** Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing. */\n\n\nfunction idiff(dom, vnode, context, mountAll, componentRoot) {\n  var out = dom,\n      prevSvgMode = isSvgMode; // empty values (null, undefined, booleans) render as empty Text nodes\n\n  if (vnode == null || typeof vnode === 'boolean') vnode = ''; // Fast case: Strings & Numbers create/update Text nodes.\n\n  if (typeof vnode === 'string' || typeof vnode === 'number') {\n    // update if it's already a Text node:\n    if (dom && dom.splitText !== undefined && dom.parentNode && (!dom._component || componentRoot)) {\n      /* istanbul ignore if */\n\n      /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */\n      if (dom.nodeValue != vnode) {\n        dom.nodeValue = vnode;\n      }\n    } else {\n      // it wasn't a Text node: replace it with one and recycle the old Element\n      out = document.createTextNode(vnode);\n\n      if (dom) {\n        if (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n        recollectNodeTree(dom, true);\n      }\n    }\n\n    out['__preactattr_'] = true;\n    return out;\n  } // If the VNode represents a Component, perform a component diff:\n\n\n  var vnodeName = vnode.nodeName;\n\n  if (typeof vnodeName === 'function') {\n    return buildComponentFromVNode(dom, vnode, context, mountAll);\n  } // Tracks entering and exiting SVG namespace when descending through the tree.\n\n\n  isSvgMode = vnodeName === 'svg' ? true : vnodeName === 'foreignObject' ? false : isSvgMode; // If there's no existing element or it's the wrong type, create a new one:\n\n  vnodeName = String(vnodeName);\n\n  if (!dom || !isNamedNode(dom, vnodeName)) {\n    out = createNode(vnodeName, isSvgMode);\n\n    if (dom) {\n      // move children into the replacement node\n      while (dom.firstChild) {\n        out.appendChild(dom.firstChild);\n      } // if the previous Element was mounted into the DOM, replace it inline\n\n\n      if (dom.parentNode) dom.parentNode.replaceChild(out, dom); // recycle the old element (skips non-Element node types)\n\n      recollectNodeTree(dom, true);\n    }\n  }\n\n  var fc = out.firstChild,\n      props = out['__preactattr_'],\n      vchildren = vnode.children;\n\n  if (props == null) {\n    props = out['__preactattr_'] = {};\n\n    for (var a = out.attributes, i = a.length; i--;) {\n      props[a[i].name] = a[i].value;\n    }\n  } // Optimization: fast-path for elements containing a single TextNode:\n\n\n  if (!hydrating && vchildren && vchildren.length === 1 && typeof vchildren[0] === 'string' && fc != null && fc.splitText !== undefined && fc.nextSibling == null) {\n    if (fc.nodeValue != vchildren[0]) {\n      fc.nodeValue = vchildren[0];\n    }\n  } // otherwise, if there are existing or new children, diff them:\n  else if (vchildren && vchildren.length || fc != null) {\n      innerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML != null);\n    } // Apply attributes/props from VNode to the DOM Element:\n\n\n  diffAttributes(out, vnode.attributes, props); // restore previous SVG mode: (in case we're exiting an SVG namespace)\n\n  isSvgMode = prevSvgMode;\n  return out;\n}\n/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.\n *\t@param {Element} dom\t\t\tElement whose children should be compared & mutated\n *\t@param {Array} vchildren\t\tArray of VNodes to compare to `dom.childNodes`\n *\t@param {Object} context\t\t\tImplicitly descendant context object (from most recent `getChildContext()`)\n *\t@param {Boolean} mountAll\n *\t@param {Boolean} isHydrating\tIf `true`, consumes externally created elements similar to hydration\n */\n\n\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {\n  var originalChildren = dom.childNodes,\n      children = [],\n      keyed = {},\n      keyedLen = 0,\n      min = 0,\n      len = originalChildren.length,\n      childrenLen = 0,\n      vlen = vchildren ? vchildren.length : 0,\n      j,\n      c,\n      f,\n      vchild,\n      child; // Build up a map of keyed children and an Array of unkeyed children:\n\n  if (len !== 0) {\n    for (var i = 0; i < len; i++) {\n      var _child = originalChildren[i],\n          props = _child['__preactattr_'],\n          key = vlen && props ? _child._component ? _child._component.__key : props.key : null;\n\n      if (key != null) {\n        keyedLen++;\n        keyed[key] = _child;\n      } else if (props || (_child.splitText !== undefined ? isHydrating ? _child.nodeValue.trim() : true : isHydrating)) {\n        children[childrenLen++] = _child;\n      }\n    }\n  }\n\n  if (vlen !== 0) {\n    for (var i = 0; i < vlen; i++) {\n      vchild = vchildren[i];\n      child = null; // attempt to find a node based on key matching\n\n      var key = vchild.key;\n\n      if (key != null) {\n        if (keyedLen && keyed[key] !== undefined) {\n          child = keyed[key];\n          keyed[key] = undefined;\n          keyedLen--;\n        }\n      } // attempt to pluck a node of the same type from the existing children\n      else if (!child && min < childrenLen) {\n          for (j = min; j < childrenLen; j++) {\n            if (children[j] !== undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\n              child = c;\n              children[j] = undefined;\n              if (j === childrenLen - 1) childrenLen--;\n              if (j === min) min++;\n              break;\n            }\n          }\n        } // morph the matched/found/created DOM child to match vchild (deep)\n\n\n      child = idiff(child, vchild, context, mountAll);\n      f = originalChildren[i];\n\n      if (child && child !== dom && child !== f) {\n        if (f == null) {\n          dom.appendChild(child);\n        } else if (child === f.nextSibling) {\n          removeNode(f);\n        } else {\n          dom.insertBefore(child, f);\n        }\n      }\n    }\n  } // remove unused keyed children:\n\n\n  if (keyedLen) {\n    for (var i in keyed) {\n      if (keyed[i] !== undefined) recollectNodeTree(keyed[i], false);\n    }\n  } // remove orphaned unkeyed children:\n\n\n  while (min <= childrenLen) {\n    if ((child = children[childrenLen--]) !== undefined) recollectNodeTree(child, false);\n  }\n}\n/** Recursively recycle (or just unmount) a node and its descendants.\n *\t@param {Node} node\t\t\t\t\t\tDOM node to start unmount/removal from\n *\t@param {Boolean} [unmountOnly=false]\tIf `true`, only triggers unmount lifecycle, skips removal\n */\n\n\nfunction recollectNodeTree(node, unmountOnly) {\n  var component = node._component;\n\n  if (component) {\n    // if node is owned by a Component, unmount that component (ends up recursing back here)\n    unmountComponent(component);\n  } else {\n    // If the node's VNode had a ref function, invoke it with null here.\n    // (this is part of the React spec, and smart for unsetting references)\n    if (node['__preactattr_'] != null && node['__preactattr_'].ref) node['__preactattr_'].ref(null);\n\n    if (unmountOnly === false || node['__preactattr_'] == null) {\n      removeNode(node);\n    }\n\n    removeChildren(node);\n  }\n}\n/** Recollect/unmount all children.\n *\t- we use .lastChild here because it causes less reflow than .firstChild\n *\t- it's also cheaper than accessing the .childNodes Live NodeList\n */\n\n\nfunction removeChildren(node) {\n  node = node.lastChild;\n\n  while (node) {\n    var next = node.previousSibling;\n    recollectNodeTree(node, true);\n    node = next;\n  }\n}\n/** Apply differences in attributes from a VNode to the given DOM Element.\n *\t@param {Element} dom\t\tElement with attributes to diff `attrs` against\n *\t@param {Object} attrs\t\tThe desired end-state key-value attribute pairs\n *\t@param {Object} old\t\t\tCurrent/previous attributes (from previous VNode or element's prop cache)\n */\n\n\nfunction diffAttributes(dom, attrs, old) {\n  var name; // remove attributes no longer present on the vnode by setting them to undefined\n\n  for (name in old) {\n    if (!(attrs && attrs[name] != null) && old[name] != null) {\n      setAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\n    }\n  } // add new & update changed attributes\n\n\n  for (name in attrs) {\n    if (name !== 'children' && name !== 'innerHTML' && (!(name in old) || attrs[name] !== (name === 'value' || name === 'checked' ? dom[name] : old[name]))) {\n      setAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n    }\n  }\n}\n/** Retains a pool of Components for re-use, keyed on component name.\n *\tNote: since component names are not unique or even necessarily available, these are primarily a form of sharding.\n *\t@private\n */\n\n\nvar components = {};\n/** Reclaim a component for later re-use by the recycler. */\n\nfunction collectComponent(component) {\n  var name = component.constructor.name;\n  (components[name] || (components[name] = [])).push(component);\n}\n/** Create a component. Normalizes differences between PFC's and classful Components. */\n\n\nfunction createComponent(Ctor, props, context) {\n  var list = components[Ctor.name],\n      inst;\n\n  if (Ctor.prototype && Ctor.prototype.render) {\n    inst = new Ctor(props, context);\n    Component.call(inst, props, context);\n  } else {\n    inst = new Component(props, context);\n    inst.constructor = Ctor;\n    inst.render = doRender;\n  }\n\n  if (list) {\n    for (var i = list.length; i--;) {\n      if (list[i].constructor === Ctor) {\n        inst.nextBase = list[i].nextBase;\n        list.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  return inst;\n}\n/** The `.render()` method for a PFC backing instance. */\n\n\nfunction doRender(props, state, context) {\n  return this.constructor(props, context);\n}\n/** Set a component's `props` (generally derived from JSX attributes).\n *\t@param {Object} props\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.renderSync=false]\tIf `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.\n *\t@param {boolean} [opts.render=true]\t\t\tIf `false`, no render will be triggered.\n */\n\n\nfunction setComponentProps(component, props, opts, context, mountAll) {\n  if (component._disable) return;\n  component._disable = true;\n  if (component.__ref = props.ref) delete props.ref;\n  if (component.__key = props.key) delete props.key;\n\n  if (!component.base || mountAll) {\n    if (component.componentWillMount) component.componentWillMount();\n  } else if (component.componentWillReceiveProps) {\n    component.componentWillReceiveProps(props, context);\n  }\n\n  if (context && context !== component.context) {\n    if (!component.prevContext) component.prevContext = component.context;\n    component.context = context;\n  }\n\n  if (!component.prevProps) component.prevProps = component.props;\n  component.props = props;\n  component._disable = false;\n\n  if (opts !== 0) {\n    if (opts === 1 || options.syncComponentUpdates !== false || !component.base) {\n      renderComponent(component, 1, mountAll);\n    } else {\n      enqueueRender(component);\n    }\n  }\n\n  if (component.__ref) component.__ref(component);\n}\n/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.\n *\t@param {Component} component\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.build=false]\t\tIf `true`, component will build and store a DOM node if not already associated with one.\n *\t@private\n */\n\n\nfunction renderComponent(component, opts, mountAll, isChild) {\n  if (component._disable) return;\n  var props = component.props,\n      state = component.state,\n      context = component.context,\n      previousProps = component.prevProps || props,\n      previousState = component.prevState || state,\n      previousContext = component.prevContext || context,\n      isUpdate = component.base,\n      nextBase = component.nextBase,\n      initialBase = isUpdate || nextBase,\n      initialChildComponent = component._component,\n      skip = false,\n      rendered,\n      inst,\n      cbase; // if updating\n\n  if (isUpdate) {\n    component.props = previousProps;\n    component.state = previousState;\n    component.context = previousContext;\n\n    if (opts !== 2 && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === false) {\n      skip = true;\n    } else if (component.componentWillUpdate) {\n      component.componentWillUpdate(props, state, context);\n    }\n\n    component.props = props;\n    component.state = state;\n    component.context = context;\n  }\n\n  component.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n  component._dirty = false;\n\n  if (!skip) {\n    rendered = component.render(props, state, context); // context to pass to the child, can be updated via (grand-)parent component\n\n    if (component.getChildContext) {\n      context = extend(extend({}, context), component.getChildContext());\n    }\n\n    var childComponent = rendered && rendered.nodeName,\n        toUnmount,\n        base;\n\n    if (typeof childComponent === 'function') {\n      // set up high order component link\n      var childProps = getNodeProps(rendered);\n      inst = initialChildComponent;\n\n      if (inst && inst.constructor === childComponent && childProps.key == inst.__key) {\n        setComponentProps(inst, childProps, 1, context, false);\n      } else {\n        toUnmount = inst;\n        component._component = inst = createComponent(childComponent, childProps, context);\n        inst.nextBase = inst.nextBase || nextBase;\n        inst._parentComponent = component;\n        setComponentProps(inst, childProps, 0, context, false);\n        renderComponent(inst, 1, mountAll, true);\n      }\n\n      base = inst.base;\n    } else {\n      cbase = initialBase; // destroy high order component link\n\n      toUnmount = initialChildComponent;\n\n      if (toUnmount) {\n        cbase = component._component = null;\n      }\n\n      if (initialBase || opts === 1) {\n        if (cbase) cbase._component = null;\n        base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);\n      }\n    }\n\n    if (initialBase && base !== initialBase && inst !== initialChildComponent) {\n      var baseParent = initialBase.parentNode;\n\n      if (baseParent && base !== baseParent) {\n        baseParent.replaceChild(base, initialBase);\n\n        if (!toUnmount) {\n          initialBase._component = null;\n          recollectNodeTree(initialBase, false);\n        }\n      }\n    }\n\n    if (toUnmount) {\n      unmountComponent(toUnmount);\n    }\n\n    component.base = base;\n\n    if (base && !isChild) {\n      var componentRef = component,\n          t = component;\n\n      while (t = t._parentComponent) {\n        (componentRef = t).base = base;\n      }\n\n      base._component = componentRef;\n      base._componentConstructor = componentRef.constructor;\n    }\n  }\n\n  if (!isUpdate || mountAll) {\n    mounts.unshift(component);\n  } else if (!skip) {\n    // Ensure that pending componentDidMount() hooks of child components\n    // are called before the componentDidUpdate() hook in the parent.\n    // Note: disabled as it causes duplicate hooks, see https://github.com/developit/preact/issues/750\n    // flushMounts();\n    if (component.componentDidUpdate) {\n      component.componentDidUpdate(previousProps, previousState, previousContext);\n    }\n\n    if (options.afterUpdate) options.afterUpdate(component);\n  }\n\n  if (component._renderCallbacks != null) {\n    while (component._renderCallbacks.length) {\n      component._renderCallbacks.pop().call(component);\n    }\n  }\n\n  if (!diffLevel && !isChild) flushMounts();\n}\n/** Apply the Component referenced by a VNode to the DOM.\n *\t@param {Element} dom\tThe DOM node to mutate\n *\t@param {VNode} vnode\tA Component-referencing VNode\n *\t@returns {Element} dom\tThe created/mutated element\n *\t@private\n */\n\n\nfunction buildComponentFromVNode(dom, vnode, context, mountAll) {\n  var c = dom && dom._component,\n      originalComponent = c,\n      oldDom = dom,\n      isDirectOwner = c && dom._componentConstructor === vnode.nodeName,\n      isOwner = isDirectOwner,\n      props = getNodeProps(vnode);\n\n  while (c && !isOwner && (c = c._parentComponent)) {\n    isOwner = c.constructor === vnode.nodeName;\n  }\n\n  if (c && isOwner && (!mountAll || c._component)) {\n    setComponentProps(c, props, 3, context, mountAll);\n    dom = c.base;\n  } else {\n    if (originalComponent && !isDirectOwner) {\n      unmountComponent(originalComponent);\n      dom = oldDom = null;\n    }\n\n    c = createComponent(vnode.nodeName, props, context);\n\n    if (dom && !c.nextBase) {\n      c.nextBase = dom; // passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L229:\n\n      oldDom = null;\n    }\n\n    setComponentProps(c, props, 1, context, mountAll);\n    dom = c.base;\n\n    if (oldDom && dom !== oldDom) {\n      oldDom._component = null;\n      recollectNodeTree(oldDom, false);\n    }\n  }\n\n  return dom;\n}\n/** Remove a component from the DOM and recycle it.\n *\t@param {Component} component\tThe Component instance to unmount\n *\t@private\n */\n\n\nfunction unmountComponent(component) {\n  if (options.beforeUnmount) options.beforeUnmount(component);\n  var base = component.base;\n  component._disable = true;\n  if (component.componentWillUnmount) component.componentWillUnmount();\n  component.base = null; // recursively tear down & recollect high-order component children:\n\n  var inner = component._component;\n\n  if (inner) {\n    unmountComponent(inner);\n  } else if (base) {\n    if (base['__preactattr_'] && base['__preactattr_'].ref) base['__preactattr_'].ref(null);\n    component.nextBase = base;\n    removeNode(base);\n    collectComponent(component);\n    removeChildren(base);\n  }\n\n  if (component.__ref) component.__ref(null);\n}\n/** Base Component class.\n *\tProvides `setState()` and `forceUpdate()`, which trigger rendering.\n *\t@public\n *\n *\t@example\n *\tclass MyFoo extends Component {\n *\t\trender(props, state) {\n *\t\t\treturn <div />;\n *\t\t}\n *\t}\n */\n\n\nfunction Component(props, context) {\n  this._dirty = true;\n  /** @public\n   *\t@type {object}\n   */\n\n  this.context = context;\n  /** @public\n   *\t@type {object}\n   */\n\n  this.props = props;\n  /** @public\n   *\t@type {object}\n   */\n\n  this.state = this.state || {};\n}\n\nextend(Component.prototype, {\n  /** Returns a `boolean` indicating if the component should re-render when receiving the given `props` and `state`.\n   *\t@param {object} nextProps\n   *\t@param {object} nextState\n   *\t@param {object} nextContext\n   *\t@returns {Boolean} should the component re-render\n   *\t@name shouldComponentUpdate\n   *\t@function\n   */\n\n  /** Update component state by copying properties from `state` to `this.state`.\n   *\t@param {object} state\t\tA hash of state properties to update with new values\n   *\t@param {function} callback\tA function to be called once component state is updated\n   */\n  setState: function setState(state, callback) {\n    var s = this.state;\n    if (!this.prevState) this.prevState = extend({}, s);\n    extend(s, typeof state === 'function' ? state(s, this.props) : state);\n    if (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);\n    enqueueRender(this);\n  },\n\n  /** Immediately perform a synchronous re-render of the component.\n   *\t@param {function} callback\t\tA function to be called after component is re-rendered.\n   *\t@private\n   */\n  forceUpdate: function forceUpdate(callback) {\n    if (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);\n    renderComponent(this, 2);\n  },\n\n  /** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n   *\tVirtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n   *\t@param {object} props\t\tProps (eg: JSX attributes) received from parent element/component\n   *\t@param {object} state\t\tThe component's current state\n   *\t@param {object} context\t\tContext object (if a parent component has provided context)\n   *\t@returns VNode\n   */\n  render: function render() {}\n});\n/** Render JSX into a `parent` Element.\n *\t@param {VNode} vnode\t\tA (JSX) VNode to render\n *\t@param {Element} parent\t\tDOM element to render into\n *\t@param {Element} [merge]\tAttempt to re-use an existing DOM tree rooted at `merge`\n *\t@public\n *\n *\t@example\n *\t// render a div into <body>:\n *\trender(<div id=\"hello\">hello!</div>, document.body);\n *\n *\t@example\n *\t// render a \"Thing\" component into #foo:\n *\tconst Thing = ({ name }) => <span>{ name }</span>;\n *\trender(<Thing name=\"one\" />, document.querySelector('#foo'));\n */\n\nfunction render(vnode, parent, merge) {\n  return diff(merge, vnode, {}, false, parent, false);\n}\n\nvar preact = {\n  h: h,\n  createElement: h,\n  cloneElement: cloneElement,\n  Component: Component,\n  render: render,\n  rerender: rerender,\n  options: options\n};\nexport default preact;\nexport { h, h as createElement, cloneElement, Component, render, rerender, options };","map":{"version":3,"sources":["../src/vnode.js","../src/options.js","../src/h.js","../src/util.js","../src/clone-element.js","../src/constants.js","../src/render-queue.js","../src/vdom/index.js","../src/dom/index.js","../src/vdom/diff.js","../src/vdom/component-recycler.js","../src/vdom/component.js","../src/component.js","../src/render.js","../src/preact.js"],"names":["stack","EMPTY_CHILDREN","children","i","arguments","attributes","child","simple","String","p","options","props","defer","Promise","h","vnode","extend","ASYNC_RENDER","ATTR_KEY","component","_dirty","hydrating","_componentConstructor","defaultProps","nodeName","node","isSvg","document","normalizedNodeName","name","old","value","style","cssText","innerHTML","useCapture","replace","toLowerCase","substring","addEventListener","eventProxy","removeEventListener","_listeners","setProperty","mounts","isSvgMode","parent","ownerSVGElement","dom","ret","idiff","componentRoot","prevSvgMode","parentNode","vnodeName","buildComponentFromVNode","appendChild","out","nodeValue","vchildren","childrenLen","vlen","j","c","f","vchild","len","key","keyedLen","keyed","min","insertBefore","_component","constructor","components","list","Ctor","context","call","Component","setComponentProps","__key","componentWillReceiveProps","prevProps","renderComponent","state","nextBase","initialBase","initialChildComponent","skip","rendered","inst","cbase","isUpdate","toUnmount","childComponent","childProps","getNodeProps","opts","diff","replaceChild","t","componentRef","afterUpdate","flushMounts","originalComponent","isDirectOwner","isOwner","mountAll","oldDom","createComponent","unmountComponent","base","_disable","componentWillUnmount","inner","callback","_renderCallbacks"],"mappings":"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","sourcesContent":["/** Virtual DOM Node */\nexport function VNode() {}\n","/** Global options\n *\t@public\n *\t@namespace options {Object}\n */\nexport default {\n\n\t/** If `true`, `prop` changes trigger synchronous component updates.\n\t *\t@name syncComponentUpdates\n\t *\t@type Boolean\n\t *\t@default true\n\t */\n\t//syncComponentUpdates: true,\n\n\t/** Processes all created VNodes.\n\t *\t@param {VNode} vnode\tA newly-created VNode to normalize/process\n\t */\n\t//vnode(vnode) { }\n\n\t/** Hook invoked after a component is mounted. */\n\t// afterMount(component) { }\n\n\t/** Hook invoked after the DOM is updated with a component's latest render. */\n\t// afterUpdate(component) { }\n\n\t/** Hook invoked immediately before a component is unmounted. */\n\t// beforeUnmount(component) { }\n};\n","import { VNode } from './vnode';\nimport options from './options';\n\n\nconst stack = [];\n\nconst EMPTY_CHILDREN = [];\n\n/**\n * JSX/hyperscript reviver.\n * @see http://jasonformat.com/wtf-is-jsx\n * Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0\n *\n * Note: this is exported as both `h()` and `createElement()` for compatibility reasons.\n *\n * Creates a VNode (virtual DOM element). A tree of VNodes can be used as a lightweight representation\n * of the structure of a DOM tree. This structure can be realized by recursively comparing it against\n * the current _actual_ DOM structure, and applying only the differences.\n *\n * `h()`/`createElement()` accepts an element name, a list of attributes/props,\n * and optionally children to append to the element.\n *\n * @example The following DOM tree\n *\n * `<div id=\"foo\" name=\"bar\">Hello!</div>`\n *\n * can be constructed using this function as:\n *\n * `h('div', { id: 'foo', name : 'bar' }, 'Hello!');`\n *\n * @param {string} nodeName\tAn element name. Ex: `div`, `a`, `span`, etc.\n * @param {Object} attributes\tAny attributes/props to set on the created element.\n * @param rest\t\t\tAdditional arguments are taken to be children to append. Can be infinitely nested Arrays.\n *\n * @public\n */\nexport function h(nodeName, attributes) {\n\tlet children=EMPTY_CHILDREN, lastSimple, child, simple, i;\n\tfor (i=arguments.length; i-- > 2; ) {\n\t\tstack.push(arguments[i]);\n\t}\n\tif (attributes && attributes.children!=null) {\n\t\tif (!stack.length) stack.push(attributes.children);\n\t\tdelete attributes.children;\n\t}\n\twhile (stack.length) {\n\t\tif ((child = stack.pop()) && child.pop!==undefined) {\n\t\t\tfor (i=child.length; i--; ) stack.push(child[i]);\n\t\t}\n\t\telse {\n\t\t\tif (typeof child==='boolean') child = null;\n\n\t\t\tif ((simple = typeof nodeName!=='function')) {\n\t\t\t\tif (child==null) child = '';\n\t\t\t\telse if (typeof child==='number') child = String(child);\n\t\t\t\telse if (typeof child!=='string') simple = false;\n\t\t\t}\n\n\t\t\tif (simple && lastSimple) {\n\t\t\t\tchildren[children.length-1] += child;\n\t\t\t}\n\t\t\telse if (children===EMPTY_CHILDREN) {\n\t\t\t\tchildren = [child];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\n\t\t\tlastSimple = simple;\n\t\t}\n\t}\n\n\tlet p = new VNode();\n\tp.nodeName = nodeName;\n\tp.children = children;\n\tp.attributes = attributes==null ? undefined : attributes;\n\tp.key = attributes==null ? undefined : attributes.key;\n\n\t// if a \"vnode hook\" is defined, pass every created VNode to it\n\tif (options.vnode!==undefined) options.vnode(p);\n\n\treturn p;\n}\n","/**\n *  Copy all properties from `props` onto `obj`.\n *  @param {Object} obj\t\tObject onto which properties should be copied.\n *  @param {Object} props\tObject from which to copy properties.\n *  @returns obj\n *  @private\n */\nexport function extend(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn obj;\n}\n\n/**\n * Call a function asynchronously, as soon as possible. Makes\n * use of HTML Promise to schedule the callback if available,\n * otherwise falling back to `setTimeout` (mainly for IE<11).\n *\n * @param {Function} callback\n */\nexport const defer = typeof Promise=='function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n","import { extend } from './util';\nimport { h } from './h';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {VNode} vnode\t\tThe virtual DOM element to clone\n * @param {Object} props\tAttributes/props to add when cloning\n * @param {VNode} rest\t\tAny additional arguments will be used as replacement children.\n */\nexport function cloneElement(vnode, props) {\n\treturn h(\n\t\tvnode.nodeName,\n\t\textend(extend({}, vnode.attributes), props),\n\t\targuments.length>2 ? [].slice.call(arguments, 2) : vnode.children\n\t);\n}\n","// render modes\n\nexport const NO_RENDER = 0;\nexport const SYNC_RENDER = 1;\nexport const FORCE_RENDER = 2;\nexport const ASYNC_RENDER = 3;\n\n\nexport const ATTR_KEY = '__preactattr_';\n\n// DOM properties that should NOT have \"px\" added when numeric\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n\n","import options from './options';\nimport { defer } from './util';\nimport { renderComponent } from './vdom/component';\n\n/** Managed queue of dirty components to be re-rendered */\n\nlet items = [];\n\nexport function enqueueRender(component) {\n\tif (!component._dirty && (component._dirty = true) && items.push(component)==1) {\n\t\t(options.debounceRendering || defer)(rerender);\n\t}\n}\n\nexport function rerender() {\n\tlet p, list = items;\n\titems = [];\n\twhile ( (p = list.pop()) ) {\n\t\tif (p._dirty) renderComponent(p);\n\t}\n}\n","import { extend } from '../util';\n\n\n/**\n * Check if two nodes are equivalent.\n *\n * @param {Node} node\t\t\tDOM Node to compare\n * @param {VNode} vnode\t\t\tVirtual DOM node to compare\n * @param {boolean} [hydrating=false]\tIf true, ignores component constructors when comparing.\n * @private\n */\nexport function isSameNodeType(node, vnode, hydrating) {\n\tif (typeof vnode==='string' || typeof vnode==='number') {\n\t\treturn node.splitText!==undefined;\n\t}\n\tif (typeof vnode.nodeName==='string') {\n\t\treturn !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n\t}\n\treturn hydrating || node._componentConstructor===vnode.nodeName;\n}\n\n\n/**\n * Check if an Element has a given nodeName, case-insensitively.\n *\n * @param {Element} node\tA DOM Element to inspect the name of.\n * @param {String} nodeName\tUnnormalized name to compare against.\n */\nexport function isNamedNode(node, nodeName) {\n\treturn node.normalizedNodeName===nodeName || node.nodeName.toLowerCase()===nodeName.toLowerCase();\n}\n\n\n/**\n * Reconstruct Component-style `props` from a VNode.\n * Ensures default/fallback values from `defaultProps`:\n * Own-properties of `defaultProps` not present in `vnode.attributes` are added.\n *\n * @param {VNode} vnode\n * @returns {Object} props\n */\nexport function getNodeProps(vnode) {\n\tlet props = extend({}, vnode.attributes);\n\tprops.children = vnode.children;\n\n\tlet defaultProps = vnode.nodeName.defaultProps;\n\tif (defaultProps!==undefined) {\n\t\tfor (let i in defaultProps) {\n\t\t\tif (props[i]===undefined) {\n\t\t\t\tprops[i] = defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn props;\n}\n","import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n\n/** Create an element with the given nodeName.\n *\t@param {String} nodeName\n *\t@param {Boolean} [isSvg=false]\tIf `true`, creates an element within the SVG namespace.\n *\t@returns {Element} node\n */\nexport function createNode(nodeName, isSvg) {\n\tlet node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n\tnode.normalizedNodeName = nodeName;\n\treturn node;\n}\n\n\n/** Remove a child node from its parent if attached.\n *\t@param {Element} node\t\tThe node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\n\n/** Set a named attribute on the given Node, with special behavior for some names and event handlers.\n *\tIf `value` is `null`, the attribute/handler will be removed.\n *\t@param {Element} node\tAn element to mutate\n *\t@param {string} name\tThe name/key to set, such as an event or attribute name\n *\t@param {any} old\tThe last value that was set for this name/node pair\n *\t@param {any} value\tAn attribute value, such as a function to be used as an event handler\n *\t@param {Boolean} isSvg\tAre we currently diffing inside an svg?\n *\t@private\n */\nexport function setAccessor(node, name, old, value, isSvg) {\n\tif (name==='className') name = 'class';\n\n\n\tif (name==='key') {\n\t\t// ignore\n\t}\n\telse if (name==='ref') {\n\t\tif (old) old(null);\n\t\tif (value) value(node);\n\t}\n\telse if (name==='class' && !isSvg) {\n\t\tnode.className = value || '';\n\t}\n\telse if (name==='style') {\n\t\tif (!value || typeof value==='string' || typeof old==='string') {\n\t\t\tnode.style.cssText = value || '';\n\t\t}\n\t\tif (value && typeof value==='object') {\n\t\t\tif (typeof old!=='string') {\n\t\t\t\tfor (let i in old) if (!(i in value)) node.style[i] = '';\n\t\t\t}\n\t\t\tfor (let i in value) {\n\t\t\t\tnode.style[i] = typeof value[i]==='number' && IS_NON_DIMENSIONAL.test(i)===false ? (value[i]+'px') : value[i];\n\t\t\t}\n\t\t}\n\t}\n\telse if (name==='dangerouslySetInnerHTML') {\n\t\tif (value) node.innerHTML = value.__html || '';\n\t}\n\telse if (name[0]=='o' && name[1]=='n') {\n\t\tlet useCapture = name !== (name=name.replace(/Capture$/, ''));\n\t\tname = name.toLowerCase().substring(2);\n\t\tif (value) {\n\t\t\tif (!old) node.addEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\telse {\n\t\t\tnode.removeEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\t(node._listeners || (node._listeners = {}))[name] = value;\n\t}\n\telse if (name!=='list' && name!=='type' && !isSvg && name in node) {\n\t\tsetProperty(node, name, value==null ? '' : value);\n\t\tif (value==null || value===false) node.removeAttribute(name);\n\t}\n\telse {\n\t\tlet ns = isSvg && (name !== (name = name.replace(/^xlink:?/, '')));\n\t\tif (value==null || value===false) {\n\t\t\tif (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());\n\t\t\telse node.removeAttribute(name);\n\t\t}\n\t\telse if (typeof value!=='function') {\n\t\t\tif (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);\n\t\t\telse node.setAttribute(name, value);\n\t\t}\n\t}\n}\n\n\n/** Attempt to set a DOM property to the given value.\n *\tIE & FF throw for certain property-value combinations.\n */\nfunction setProperty(node, name, value) {\n\ttry {\n\t\tnode[name] = value;\n\t} catch (e) { }\n}\n\n\n/** Proxy an event to hooked event handlers\n *\t@private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type](options.event && options.event(e) || e);\n}\n","import { ATTR_KEY } from '../constants';\nimport { isSameNodeType, isNamedNode } from './index';\nimport { buildComponentFromVNode } from './component';\nimport { createNode, setAccessor } from '../dom/index';\nimport { unmountComponent } from './component';\nimport options from '../options';\nimport { removeNode } from '../dom/index';\n\n/** Queue of components that have been mounted and are awaiting componentDidMount */\nexport const mounts = [];\n\n/** Diff recursion count, used to track the end of the diff cycle. */\nexport let diffLevel = 0;\n\n/** Global flag indicating if the diff is currently within an SVG */\nlet isSvgMode = false;\n\n/** Global flag indicating if the diff is performing hydration */\nlet hydrating = false;\n\n/** Invoke queued componentDidMount lifecycle methods */\nexport function flushMounts() {\n\tlet c;\n\twhile ((c=mounts.pop())) {\n\t\tif (options.afterMount) options.afterMount(c);\n\t\tif (c.componentDidMount) c.componentDidMount();\n\t}\n}\n\n\n/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.\n *\t@param {Element} [dom=null]\t\tA DOM node to mutate into the shape of the `vnode`\n *\t@param {VNode} vnode\t\t\tA VNode (with descendants forming a tree) representing the desired DOM structure\n *\t@returns {Element} dom\t\t\tThe created/mutated element\n *\t@private\n */\nexport function diff(dom, vnode, context, mountAll, parent, componentRoot) {\n\t// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)\n\tif (!diffLevel++) {\n\t\t// when first starting the diff, check if we're diffing an SVG or within an SVG\n\t\tisSvgMode = parent!=null && parent.ownerSVGElement!==undefined;\n\n\t\t// hydration is indicated by the existing element to be diffed not having a prop cache\n\t\thydrating = dom!=null && !(ATTR_KEY in dom);\n\t}\n\n\tlet ret = idiff(dom, vnode, context, mountAll, componentRoot);\n\n\t// append the element if its a new parent\n\tif (parent && ret.parentNode!==parent) parent.appendChild(ret);\n\n\t// diffLevel being reduced to 0 means we're exiting the diff\n\tif (!--diffLevel) {\n\t\thydrating = false;\n\t\t// invoke queued componentDidMount lifecycle methods\n\t\tif (!componentRoot) flushMounts();\n\t}\n\n\treturn ret;\n}\n\n\n/** Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing. */\nfunction idiff(dom, vnode, context, mountAll, componentRoot) {\n\tlet out = dom,\n\t\tprevSvgMode = isSvgMode;\n\n\t// empty values (null, undefined, booleans) render as empty Text nodes\n\tif (vnode==null || typeof vnode==='boolean') vnode = '';\n\n\n\t// Fast case: Strings & Numbers create/update Text nodes.\n\tif (typeof vnode==='string' || typeof vnode==='number') {\n\n\t\t// update if it's already a Text node:\n\t\tif (dom && dom.splitText!==undefined && dom.parentNode && (!dom._component || componentRoot)) {\n\t\t\t/* istanbul ignore if */ /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */\n\t\t\tif (dom.nodeValue!=vnode) {\n\t\t\t\tdom.nodeValue = vnode;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// it wasn't a Text node: replace it with one and recycle the old Element\n\t\t\tout = document.createTextNode(vnode);\n\t\t\tif (dom) {\n\t\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\t\t\t\trecollectNodeTree(dom, true);\n\t\t\t}\n\t\t}\n\n\t\tout[ATTR_KEY] = true;\n\n\t\treturn out;\n\t}\n\n\n\t// If the VNode represents a Component, perform a component diff:\n\tlet vnodeName = vnode.nodeName;\n\tif (typeof vnodeName==='function') {\n\t\treturn buildComponentFromVNode(dom, vnode, context, mountAll);\n\t}\n\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tisSvgMode = vnodeName==='svg' ? true : vnodeName==='foreignObject' ? false : isSvgMode;\n\n\n\t// If there's no existing element or it's the wrong type, create a new one:\n\tvnodeName = String(vnodeName);\n\tif (!dom || !isNamedNode(dom, vnodeName)) {\n\t\tout = createNode(vnodeName, isSvgMode);\n\n\t\tif (dom) {\n\t\t\t// move children into the replacement node\n\t\t\twhile (dom.firstChild) out.appendChild(dom.firstChild);\n\n\t\t\t// if the previous Element was mounted into the DOM, replace it inline\n\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\n\t\t\t// recycle the old element (skips non-Element node types)\n\t\t\trecollectNodeTree(dom, true);\n\t\t}\n\t}\n\n\n\tlet fc = out.firstChild,\n\t\tprops = out[ATTR_KEY],\n\t\tvchildren = vnode.children;\n\n\tif (props==null) {\n\t\tprops = out[ATTR_KEY] = {};\n\t\tfor (let a=out.attributes, i=a.length; i--; ) props[a[i].name] = a[i].value;\n\t}\n\n\t// Optimization: fast-path for elements containing a single TextNode:\n\tif (!hydrating && vchildren && vchildren.length===1 && typeof vchildren[0]==='string' && fc!=null && fc.splitText!==undefined && fc.nextSibling==null) {\n\t\tif (fc.nodeValue!=vchildren[0]) {\n\t\t\tfc.nodeValue = vchildren[0];\n\t\t}\n\t}\n\t// otherwise, if there are existing or new children, diff them:\n\telse if (vchildren && vchildren.length || fc!=null) {\n\t\tinnerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML!=null);\n\t}\n\n\n\t// Apply attributes/props from VNode to the DOM Element:\n\tdiffAttributes(out, vnode.attributes, props);\n\n\n\t// restore previous SVG mode: (in case we're exiting an SVG namespace)\n\tisSvgMode = prevSvgMode;\n\n\treturn out;\n}\n\n\n/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.\n *\t@param {Element} dom\t\t\tElement whose children should be compared & mutated\n *\t@param {Array} vchildren\t\tArray of VNodes to compare to `dom.childNodes`\n *\t@param {Object} context\t\t\tImplicitly descendant context object (from most recent `getChildContext()`)\n *\t@param {Boolean} mountAll\n *\t@param {Boolean} isHydrating\tIf `true`, consumes externally created elements similar to hydration\n */\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {\n\tlet originalChildren = dom.childNodes,\n\t\tchildren = [],\n\t\tkeyed = {},\n\t\tkeyedLen = 0,\n\t\tmin = 0,\n\t\tlen = originalChildren.length,\n\t\tchildrenLen = 0,\n\t\tvlen = vchildren ? vchildren.length : 0,\n\t\tj, c, f, vchild, child;\n\n\t// Build up a map of keyed children and an Array of unkeyed children:\n\tif (len!==0) {\n\t\tfor (let i=0; i<len; i++) {\n\t\t\tlet child = originalChildren[i],\n\t\t\t\tprops = child[ATTR_KEY],\n\t\t\t\tkey = vlen && props ? child._component ? child._component.__key : props.key : null;\n\t\t\tif (key!=null) {\n\t\t\t\tkeyedLen++;\n\t\t\t\tkeyed[key] = child;\n\t\t\t}\n\t\t\telse if (props || (child.splitText!==undefined ? (isHydrating ? child.nodeValue.trim() : true) : isHydrating)) {\n\t\t\t\tchildren[childrenLen++] = child;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (vlen!==0) {\n\t\tfor (let i=0; i<vlen; i++) {\n\t\t\tvchild = vchildren[i];\n\t\t\tchild = null;\n\n\t\t\t// attempt to find a node based on key matching\n\t\t\tlet key = vchild.key;\n\t\t\tif (key!=null) {\n\t\t\t\tif (keyedLen && keyed[key]!==undefined) {\n\t\t\t\t\tchild = keyed[key];\n\t\t\t\t\tkeyed[key] = undefined;\n\t\t\t\t\tkeyedLen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// attempt to pluck a node of the same type from the existing children\n\t\t\telse if (!child && min<childrenLen) {\n\t\t\t\tfor (j=min; j<childrenLen; j++) {\n\t\t\t\t\tif (children[j]!==undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\n\t\t\t\t\t\tchild = c;\n\t\t\t\t\t\tchildren[j] = undefined;\n\t\t\t\t\t\tif (j===childrenLen-1) childrenLen--;\n\t\t\t\t\t\tif (j===min) min++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// morph the matched/found/created DOM child to match vchild (deep)\n\t\t\tchild = idiff(child, vchild, context, mountAll);\n\n\t\t\tf = originalChildren[i];\n\t\t\tif (child && child!==dom && child!==f) {\n\t\t\t\tif (f==null) {\n\t\t\t\t\tdom.appendChild(child);\n\t\t\t\t}\n\t\t\t\telse if (child===f.nextSibling) {\n\t\t\t\t\tremoveNode(f);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdom.insertBefore(child, f);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// remove unused keyed children:\n\tif (keyedLen) {\n\t\tfor (let i in keyed) if (keyed[i]!==undefined) recollectNodeTree(keyed[i], false);\n\t}\n\n\t// remove orphaned unkeyed children:\n\twhile (min<=childrenLen) {\n\t\tif ((child = children[childrenLen--])!==undefined) recollectNodeTree(child, false);\n\t}\n}\n\n\n\n/** Recursively recycle (or just unmount) a node and its descendants.\n *\t@param {Node} node\t\t\t\t\t\tDOM node to start unmount/removal from\n *\t@param {Boolean} [unmountOnly=false]\tIf `true`, only triggers unmount lifecycle, skips removal\n */\nexport function recollectNodeTree(node, unmountOnly) {\n\tlet component = node._component;\n\tif (component) {\n\t\t// if node is owned by a Component, unmount that component (ends up recursing back here)\n\t\tunmountComponent(component);\n\t}\n\telse {\n\t\t// If the node's VNode had a ref function, invoke it with null here.\n\t\t// (this is part of the React spec, and smart for unsetting references)\n\t\tif (node[ATTR_KEY]!=null && node[ATTR_KEY].ref) node[ATTR_KEY].ref(null);\n\n\t\tif (unmountOnly===false || node[ATTR_KEY]==null) {\n\t\t\tremoveNode(node);\n\t\t}\n\n\t\tremoveChildren(node);\n\t}\n}\n\n\n/** Recollect/unmount all children.\n *\t- we use .lastChild here because it causes less reflow than .firstChild\n *\t- it's also cheaper than accessing the .childNodes Live NodeList\n */\nexport function removeChildren(node) {\n\tnode = node.lastChild;\n\twhile (node) {\n\t\tlet next = node.previousSibling;\n\t\trecollectNodeTree(node, true);\n\t\tnode = next;\n\t}\n}\n\n\n/** Apply differences in attributes from a VNode to the given DOM Element.\n *\t@param {Element} dom\t\tElement with attributes to diff `attrs` against\n *\t@param {Object} attrs\t\tThe desired end-state key-value attribute pairs\n *\t@param {Object} old\t\t\tCurrent/previous attributes (from previous VNode or element's prop cache)\n */\nfunction diffAttributes(dom, attrs, old) {\n\tlet name;\n\n\t// remove attributes no longer present on the vnode by setting them to undefined\n\tfor (name in old) {\n\t\tif (!(attrs && attrs[name]!=null) && old[name]!=null) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\n\t\t}\n\t}\n\n\t// add new & update changed attributes\n\tfor (name in attrs) {\n\t\tif (name!=='children' && name!=='innerHTML' && (!(name in old) || attrs[name]!==(name==='value' || name==='checked' ? dom[name] : old[name]))) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n\t\t}\n\t}\n}\n","import { Component } from '../component';\n\n/** Retains a pool of Components for re-use, keyed on component name.\n *\tNote: since component names are not unique or even necessarily available, these are primarily a form of sharding.\n *\t@private\n */\nconst components = {};\n\n\n/** Reclaim a component for later re-use by the recycler. */\nexport function collectComponent(component) {\n\tlet name = component.constructor.name;\n\t(components[name] || (components[name] = [])).push(component);\n}\n\n\n/** Create a component. Normalizes differences between PFC's and classful Components. */\nexport function createComponent(Ctor, props, context) {\n\tlet list = components[Ctor.name],\n\t\tinst;\n\n\tif (Ctor.prototype && Ctor.prototype.render) {\n\t\tinst = new Ctor(props, context);\n\t\tComponent.call(inst, props, context);\n\t}\n\telse {\n\t\tinst = new Component(props, context);\n\t\tinst.constructor = Ctor;\n\t\tinst.render = doRender;\n\t}\n\n\n\tif (list) {\n\t\tfor (let i=list.length; i--; ) {\n\t\t\tif (list[i].constructor===Ctor) {\n\t\t\t\tinst.nextBase = list[i].nextBase;\n\t\t\t\tlist.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn inst;\n}\n\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n","import { SYNC_RENDER, NO_RENDER, FORCE_RENDER, ASYNC_RENDER, ATTR_KEY } from '../constants';\nimport options from '../options';\nimport { extend } from '../util';\nimport { enqueueRender } from '../render-queue';\nimport { getNodeProps } from './index';\nimport { diff, mounts, diffLevel, flushMounts, recollectNodeTree, removeChildren } from './diff';\nimport { createComponent, collectComponent } from './component-recycler';\nimport { removeNode } from '../dom/index';\n\n/** Set a component's `props` (generally derived from JSX attributes).\n *\t@param {Object} props\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.renderSync=false]\tIf `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.\n *\t@param {boolean} [opts.render=true]\t\t\tIf `false`, no render will be triggered.\n */\nexport function setComponentProps(component, props, opts, context, mountAll) {\n\tif (component._disable) return;\n\tcomponent._disable = true;\n\n\tif ((component.__ref = props.ref)) delete props.ref;\n\tif ((component.__key = props.key)) delete props.key;\n\n\tif (!component.base || mountAll) {\n\t\tif (component.componentWillMount) component.componentWillMount();\n\t}\n\telse if (component.componentWillReceiveProps) {\n\t\tcomponent.componentWillReceiveProps(props, context);\n\t}\n\n\tif (context && context!==component.context) {\n\t\tif (!component.prevContext) component.prevContext = component.context;\n\t\tcomponent.context = context;\n\t}\n\n\tif (!component.prevProps) component.prevProps = component.props;\n\tcomponent.props = props;\n\n\tcomponent._disable = false;\n\n\tif (opts!==NO_RENDER) {\n\t\tif (opts===SYNC_RENDER || options.syncComponentUpdates!==false || !component.base) {\n\t\t\trenderComponent(component, SYNC_RENDER, mountAll);\n\t\t}\n\t\telse {\n\t\t\tenqueueRender(component);\n\t\t}\n\t}\n\n\tif (component.__ref) component.__ref(component);\n}\n\n\n\n/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.\n *\t@param {Component} component\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.build=false]\t\tIf `true`, component will build and store a DOM node if not already associated with one.\n *\t@private\n */\nexport function renderComponent(component, opts, mountAll, isChild) {\n\tif (component._disable) return;\n\n\tlet props = component.props,\n\t\tstate = component.state,\n\t\tcontext = component.context,\n\t\tpreviousProps = component.prevProps || props,\n\t\tpreviousState = component.prevState || state,\n\t\tpreviousContext = component.prevContext || context,\n\t\tisUpdate = component.base,\n\t\tnextBase = component.nextBase,\n\t\tinitialBase = isUpdate || nextBase,\n\t\tinitialChildComponent = component._component,\n\t\tskip = false,\n\t\trendered, inst, cbase;\n\n\t// if updating\n\tif (isUpdate) {\n\t\tcomponent.props = previousProps;\n\t\tcomponent.state = previousState;\n\t\tcomponent.context = previousContext;\n\t\tif (opts!==FORCE_RENDER\n\t\t\t&& component.shouldComponentUpdate\n\t\t\t&& component.shouldComponentUpdate(props, state, context) === false) {\n\t\t\tskip = true;\n\t\t}\n\t\telse if (component.componentWillUpdate) {\n\t\t\tcomponent.componentWillUpdate(props, state, context);\n\t\t}\n\t\tcomponent.props = props;\n\t\tcomponent.state = state;\n\t\tcomponent.context = context;\n\t}\n\n\tcomponent.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n\tcomponent._dirty = false;\n\n\tif (!skip) {\n\t\trendered = component.render(props, state, context);\n\n\t\t// context to pass to the child, can be updated via (grand-)parent component\n\t\tif (component.getChildContext) {\n\t\t\tcontext = extend(extend({}, context), component.getChildContext());\n\t\t}\n\n\t\tlet childComponent = rendered && rendered.nodeName,\n\t\t\ttoUnmount, base;\n\n\t\tif (typeof childComponent==='function') {\n\t\t\t// set up high order component link\n\n\t\t\tlet childProps = getNodeProps(rendered);\n\t\t\tinst = initialChildComponent;\n\n\t\t\tif (inst && inst.constructor===childComponent && childProps.key==inst.__key) {\n\t\t\t\tsetComponentProps(inst, childProps, SYNC_RENDER, context, false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttoUnmount = inst;\n\n\t\t\t\tcomponent._component = inst = createComponent(childComponent, childProps, context);\n\t\t\t\tinst.nextBase = inst.nextBase || nextBase;\n\t\t\t\tinst._parentComponent = component;\n\t\t\t\tsetComponentProps(inst, childProps, NO_RENDER, context, false);\n\t\t\t\trenderComponent(inst, SYNC_RENDER, mountAll, true);\n\t\t\t}\n\n\t\t\tbase = inst.base;\n\t\t}\n\t\telse {\n\t\t\tcbase = initialBase;\n\n\t\t\t// destroy high order component link\n\t\t\ttoUnmount = initialChildComponent;\n\t\t\tif (toUnmount) {\n\t\t\t\tcbase = component._component = null;\n\t\t\t}\n\n\t\t\tif (initialBase || opts===SYNC_RENDER) {\n\t\t\t\tif (cbase) cbase._component = null;\n\t\t\t\tbase = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);\n\t\t\t}\n\t\t}\n\n\t\tif (initialBase && base!==initialBase && inst!==initialChildComponent) {\n\t\t\tlet baseParent = initialBase.parentNode;\n\t\t\tif (baseParent && base!==baseParent) {\n\t\t\t\tbaseParent.replaceChild(base, initialBase);\n\n\t\t\t\tif (!toUnmount) {\n\t\t\t\t\tinitialBase._component = null;\n\t\t\t\t\trecollectNodeTree(initialBase, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (toUnmount) {\n\t\t\tunmountComponent(toUnmount);\n\t\t}\n\n\t\tcomponent.base = base;\n\t\tif (base && !isChild) {\n\t\t\tlet componentRef = component,\n\t\t\t\tt = component;\n\t\t\twhile ((t=t._parentComponent)) {\n\t\t\t\t(componentRef = t).base = base;\n\t\t\t}\n\t\t\tbase._component = componentRef;\n\t\t\tbase._componentConstructor = componentRef.constructor;\n\t\t}\n\t}\n\n\tif (!isUpdate || mountAll) {\n\t\tmounts.unshift(component);\n\t}\n\telse if (!skip) {\n\t\t// Ensure that pending componentDidMount() hooks of child components\n\t\t// are called before the componentDidUpdate() hook in the parent.\n\t\t// Note: disabled as it causes duplicate hooks, see https://github.com/developit/preact/issues/750\n\t\t// flushMounts();\n\n\t\tif (component.componentDidUpdate) {\n\t\t\tcomponent.componentDidUpdate(previousProps, previousState, previousContext);\n\t\t}\n\t\tif (options.afterUpdate) options.afterUpdate(component);\n\t}\n\n\tif (component._renderCallbacks!=null) {\n\t\twhile (component._renderCallbacks.length) component._renderCallbacks.pop().call(component);\n\t}\n\n\tif (!diffLevel && !isChild) flushMounts();\n}\n\n\n\n/** Apply the Component referenced by a VNode to the DOM.\n *\t@param {Element} dom\tThe DOM node to mutate\n *\t@param {VNode} vnode\tA Component-referencing VNode\n *\t@returns {Element} dom\tThe created/mutated element\n *\t@private\n */\nexport function buildComponentFromVNode(dom, vnode, context, mountAll) {\n\tlet c = dom && dom._component,\n\t\toriginalComponent = c,\n\t\toldDom = dom,\n\t\tisDirectOwner = c && dom._componentConstructor===vnode.nodeName,\n\t\tisOwner = isDirectOwner,\n\t\tprops = getNodeProps(vnode);\n\twhile (c && !isOwner && (c=c._parentComponent)) {\n\t\tisOwner = c.constructor===vnode.nodeName;\n\t}\n\n\tif (c && isOwner && (!mountAll || c._component)) {\n\t\tsetComponentProps(c, props, ASYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\t}\n\telse {\n\t\tif (originalComponent && !isDirectOwner) {\n\t\t\tunmountComponent(originalComponent);\n\t\t\tdom = oldDom = null;\n\t\t}\n\n\t\tc = createComponent(vnode.nodeName, props, context);\n\t\tif (dom && !c.nextBase) {\n\t\t\tc.nextBase = dom;\n\t\t\t// passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L229:\n\t\t\toldDom = null;\n\t\t}\n\t\tsetComponentProps(c, props, SYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\n\t\tif (oldDom && dom!==oldDom) {\n\t\t\toldDom._component = null;\n\t\t\trecollectNodeTree(oldDom, false);\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n\n\n/** Remove a component from the DOM and recycle it.\n *\t@param {Component} component\tThe Component instance to unmount\n *\t@private\n */\nexport function unmountComponent(component) {\n\tif (options.beforeUnmount) options.beforeUnmount(component);\n\n\tlet base = component.base;\n\n\tcomponent._disable = true;\n\n\tif (component.componentWillUnmount) component.componentWillUnmount();\n\n\tcomponent.base = null;\n\n\t// recursively tear down & recollect high-order component children:\n\tlet inner = component._component;\n\tif (inner) {\n\t\tunmountComponent(inner);\n\t}\n\telse if (base) {\n\t\tif (base[ATTR_KEY] && base[ATTR_KEY].ref) base[ATTR_KEY].ref(null);\n\n\t\tcomponent.nextBase = base;\n\n\t\tremoveNode(base);\n\t\tcollectComponent(component);\n\n\t\tremoveChildren(base);\n\t}\n\n\tif (component.__ref) component.__ref(null);\n}\n","import { FORCE_RENDER } from './constants';\nimport { extend } from './util';\nimport { renderComponent } from './vdom/component';\nimport { enqueueRender } from './render-queue';\n\n/** Base Component class.\n *\tProvides `setState()` and `forceUpdate()`, which trigger rendering.\n *\t@public\n *\n *\t@example\n *\tclass MyFoo extends Component {\n *\t\trender(props, state) {\n *\t\t\treturn <div />;\n *\t\t}\n *\t}\n */\nexport function Component(props, context) {\n\tthis._dirty = true;\n\n\t/** @public\n\t *\t@type {object}\n\t */\n\tthis.context = context;\n\n\t/** @public\n\t *\t@type {object}\n\t */\n\tthis.props = props;\n\n\t/** @public\n\t *\t@type {object}\n\t */\n\tthis.state = this.state || {};\n}\n\n\nextend(Component.prototype, {\n\n\t/** Returns a `boolean` indicating if the component should re-render when receiving the given `props` and `state`.\n\t *\t@param {object} nextProps\n\t *\t@param {object} nextState\n\t *\t@param {object} nextContext\n\t *\t@returns {Boolean} should the component re-render\n\t *\t@name shouldComponentUpdate\n\t *\t@function\n\t */\n\n\n\t/** Update component state by copying properties from `state` to `this.state`.\n\t *\t@param {object} state\t\tA hash of state properties to update with new values\n\t *\t@param {function} callback\tA function to be called once component state is updated\n\t */\n\tsetState(state, callback) {\n\t\tlet s = this.state;\n\t\tif (!this.prevState) this.prevState = extend({}, s);\n\t\textend(s, typeof state==='function' ? state(s, this.props) : state);\n\t\tif (callback) (this._renderCallbacks = (this._renderCallbacks || [])).push(callback);\n\t\tenqueueRender(this);\n\t},\n\n\n\t/** Immediately perform a synchronous re-render of the component.\n\t *\t@param {function} callback\t\tA function to be called after component is re-rendered.\n\t *\t@private\n\t */\n\tforceUpdate(callback) {\n\t\tif (callback) (this._renderCallbacks = (this._renderCallbacks || [])).push(callback);\n\t\trenderComponent(this, FORCE_RENDER);\n\t},\n\n\n\t/** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n\t *\tVirtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n\t *\t@param {object} props\t\tProps (eg: JSX attributes) received from parent element/component\n\t *\t@param {object} state\t\tThe component's current state\n\t *\t@param {object} context\t\tContext object (if a parent component has provided context)\n\t *\t@returns VNode\n\t */\n\trender() {}\n\n});\n","import { diff } from './vdom/diff';\n\n/** Render JSX into a `parent` Element.\n *\t@param {VNode} vnode\t\tA (JSX) VNode to render\n *\t@param {Element} parent\t\tDOM element to render into\n *\t@param {Element} [merge]\tAttempt to re-use an existing DOM tree rooted at `merge`\n *\t@public\n *\n *\t@example\n *\t// render a div into <body>:\n *\trender(<div id=\"hello\">hello!</div>, document.body);\n *\n *\t@example\n *\t// render a \"Thing\" component into #foo:\n *\tconst Thing = ({ name }) => <span>{ name }</span>;\n *\trender(<Thing name=\"one\" />, document.querySelector('#foo'));\n */\nexport function render(vnode, parent, merge) {\n\treturn diff(merge, vnode, {}, false, parent, false);\n}\n","import { h, h as createElement } from './h';\nimport { cloneElement } from './clone-element';\nimport { Component } from './component';\nimport { render } from './render';\nimport { rerender } from './render-queue';\nimport options from './options';\n\nexport default {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n\nexport {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n"]},"metadata":{},"sourceType":"module"}