{"ast":null,"code":"import _objectSpread from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _mapValues from \"lodash/mapValues\";\nimport _flow from \"lodash/flow\";\nimport _groupBy from \"lodash/groupBy\";\nimport _head from \"lodash/head\";\nimport _orderBy from \"lodash/orderBy\";\nimport _compact from \"lodash/compact\";\nvar _jsxFileName = \"/home/devnineteen/Music/evergreen-frontend/src/components/offer/OfferUpdateModal.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Modal, Form, Table, Button, notification } from 'antd';\nimport useAxios, { configure } from 'axios-hooks';\nimport axiosInstance from 'services/AxiosInstance';\nimport useGlobalStore from 'store/GlobalStore';\nimport OfferForm from 'components/offer/OfferForm';\nimport dayjs from 'dayjs';\nimport moment from 'moment';\nimport AuthService from 'services/AuthService';\nimport UploaderService from 'services/Uploader';\nimport { useImageAndBannerImage } from 'hooks';\nimport 'assets/scss/antd-overrides.scss';\nconfigure({\n  axios: axiosInstance\n});\nconst Column = Table.Column;\n\nvar parse = require('html-react-parser');\n\nexport default function OfferUpdateModal({\n  offer,\n  onCancel,\n  visible,\n  offerStore,\n  scopedToProvider = false,\n  role,\n  getOfferListData\n}) {\n  const formRef = useRef(null);\n  const _AuthService$currentS = AuthService.currentSession,\n        userId = _AuthService$currentS.id,\n        provider_id = _AuthService$currentS.provider_id;\n\n  const _useImageAndBannerIma = useImageAndBannerImage(),\n        _useImageAndBannerIma2 = _slicedToArray(_useImageAndBannerIma, 3),\n        _useImageAndBannerIma3 = _useImageAndBannerIma2[0],\n        file = _useImageAndBannerIma3.file,\n        newFile = _useImageAndBannerIma3.newFile,\n        onFileChange = _useImageAndBannerIma3.onFileChange,\n        setFile = _useImageAndBannerIma3.setFile,\n        onChangeFileUpload = _useImageAndBannerIma3.onChangeFileUpload,\n        _useImageAndBannerIma4 = _useImageAndBannerIma2[1],\n        bannerFile = _useImageAndBannerIma4.bannerFile,\n        onBannerFileChange = _useImageAndBannerIma4.onBannerFileChange,\n        newBannerFile = _useImageAndBannerIma4.newBannerFile,\n        setBannerFile = _useImageAndBannerIma4.setBannerFile,\n        onChangeBannerUpload = _useImageAndBannerIma4.onChangeBannerUpload,\n        reset = _useImageAndBannerIma2[2];\n\n  const _offer$RelatedOffers = offer.RelatedOffers,\n        RelatedOffers = _offer$RelatedOffers === void 0 ? [] : _offer$RelatedOffers,\n        _offer$PrerequisiteOf = offer.PrerequisiteOffers,\n        PrerequisiteOffers = _offer$PrerequisiteOf === void 0 ? [] : _offer$PrerequisiteOf,\n        _offer$DataFields = offer.DataFields,\n        DataFields = _offer$DataFields === void 0 ? [] : _offer$DataFields,\n        _offer$GroupsOfOffers = offer.GroupsOfOffers,\n        Pathways = _offer$GroupsOfOffers === void 0 ? [] : _offer$GroupsOfOffers;\n\n  const _Form$useForm = Form.useForm(),\n        _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n        form = _Form$useForm2[0];\n\n  const _useAxios = useAxios({\n    method: 'PUT'\n  }, {\n    manual: true\n  }),\n        _useAxios2 = _slicedToArray(_useAxios, 2),\n        updateOfferError = _useAxios2[0].error,\n        updateOffer = _useAxios2[1];\n\n  const _useGlobalStore = useGlobalStore(),\n        datafieldStore = _useGlobalStore.datafield,\n        providerStore = _useGlobalStore.provider;\n\n  const submitUpdate = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        const values = yield form.validateFields(['banner_image', 'main_image', 'generic_type', 'is_generic', 'rubric_attachment', 'location_type', 'category', 'description', 'learn_and_earn', 'frequency', 'frequency_unit', 'cost', 'cost_unit', 'credit_unit', 'pay_unit', 'length', 'length_unit', 'name', 'provider_id', 'topics', 'pay', 'credit', 'keywords', 'related_offers', 'prerequisites', 'is_local_promo', 'is_main_promo', 'external_url']);\n\n        const _yield$updateOffer = yield updateOffer({\n          url: `/offers/${offer.id}`,\n          data: _objectSpread(_objectSpread({}, values), {}, {\n            updatedAt: new dayjs().toISOString(),\n            'rubric_attachment': getUpdateValue,\n            'banner_image': getBannerImage,\n            'main_image': getMainImage,\n            'description': descriptionValue\n          })\n        }),\n              data = _yield$updateOffer.data,\n              status = _yield$updateOffer.status;\n\n        const fileable_type = 'offer';\n        let filePayload = [];\n\n        if (data && userId) {\n          const offerEntity = offerStore.entities[data.id];\n\n          if (offerEntity.Files) {\n            if (offerEntity.Files.length) {\n              filePayload = [...offerEntity.Files];\n            }\n          }\n\n          if (onFileChange && newFile) {\n            const results = yield UploaderService.uploadFile(newFile, {\n              uploaded_by_user_id: userId,\n              fileable_type,\n              fileable_id: data.id\n            });\n\n            if (results && results.file.data) {\n              filePayload.push(_objectSpread({}, results.file.data));\n            }\n\n            if (results.success) {\n              notification.success({\n                message: 'Success',\n                description: 'Main image is uploaded'\n              });\n            }\n          }\n\n          if (onBannerFileChange && newBannerFile) {\n            const results = yield UploaderService.uploadFile(newBannerFile, {\n              uploaded_by_user_id: userId,\n              fileable_type,\n              fileable_id: data.id,\n              meta: 'banner-image'\n            });\n\n            if (results && results.file.data) {\n              filePayload.push(_objectSpread({}, results.file.data));\n            }\n\n            if (results.success) {\n              notification.success({\n                message: 'Success',\n                description: 'Banner image is uploaded'\n              });\n            }\n          }\n        }\n\n        if (data) {\n          offerStore.updateOne(data);\n        }\n\n        if (status === 200) {\n          if (filePayload.length) {\n            let clonedData = Object.assign(data);\n            clonedData.Files = filePayload;\n            offerStore.updateOne(clonedData);\n          }\n\n          notification.success({\n            message: status,\n            description: 'Successfully updated offer'\n          });\n          onCancel();\n          getOfferListData();\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    });\n\n    return function submitUpdate() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  function populateFields(o) {\n    form.setFieldsValue(_objectSpread(_objectSpread({}, o), {}, {\n      pay_unit: Number(o.pay_unit),\n      length_unit: Number(o.length_unit),\n      credit_unit: Number(o.credit_unit),\n      frequency_unit: Number(o.frequency_unit),\n      category: Number(o.category),\n      cost_unit: Number(o.cost_unit),\n      start_date: moment(o.start_date),\n      topics: _compact(DataFields.map(({\n        type,\n        id\n      }) => {\n        if (type === 'topic') {\n          return id;\n        }\n\n        return null;\n      })),\n      related_offers: RelatedOffers.map(({\n        id\n      }) => id),\n      prerequisites: PrerequisiteOffers.map(({\n        id\n      }) => id)\n    }));\n  }\n\n  useEffect(() => {\n    if (updateOfferError) {\n      const _updateOfferError$req = updateOfferError.request,\n            status = _updateOfferError$req.status,\n            statusText = _updateOfferError$req.statusText;\n      notification.error({\n        message: status,\n        description: statusText\n      });\n    }\n\n    if (formRef.current) {\n      populateFields(offer);\n      saveDescription(offer);\n    }\n\n    if (offer.Files) {\n      let groupedFiles = _flow([v => v.filter(f => f.fileable_type === 'offer'), v => _groupBy(v, 'meta'), v => _mapValues(v, f => _orderBy(f, ['fileable_type', 'createdAt', 'id'], ['desc', 'desc', 'asc']))])(offer.Files);\n\n      if (!onFileChange && groupedFiles[null]) {\n        setFile(_head(groupedFiles[null]));\n      }\n\n      if (!onBannerFileChange && groupedFiles['banner-image']) {\n        setBannerFile(_head(groupedFiles['banner-image']));\n      }\n    }\n  }, [offer, updateOfferError, formRef, file, bannerFile]); // const [getPdfUrl, setGetPdfUrl] = useState()\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        getUpdateValue = _useState2[0],\n        setGetUpdatedValue = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        getMainImage = _useState4[0],\n        setGetMainImage = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        getBannerImage = _useState6[0],\n        setGetBannerImage = _useState6[1];\n\n  const handlePropData = (getPdfUrl, getUpdateValue) => {\n    // setGetPdfUrl(getPdfUrl)\n    setGetUpdatedValue(getUpdateValue); // setDeleteValue(getDeleteValue)\n  };\n\n  const handleUpadteMain = getMainImage => {\n    setGetMainImage(getMainImage); // setDeleteValue(getDeleteValue)\n  };\n\n  const handleUpadteBanner = getBannerImage => {\n    setGetBannerImage(getBannerImage); // setDeleteValue(getDeleteValue)\n  };\n\n  function saveDescription(p) {\n    if (p && p.description) {\n      setTimeout(function delay() {\n        // setCount(count => count + 1);\n        setDescriptionValue(p.description);\n      }, 100); // handleDescriptionValue(p.description)\n      // setDescriptionValue()\n    }\n  }\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        descriptionValue = _useState8[0],\n        setDescriptionValue = _useState8[1];\n\n  const handleDescriptionValue = value => {\n    setDescriptionValue(value);\n  };\n\n  console.log('update model', offer);\n  return /*#__PURE__*/React.createElement(Modal, {\n    destroyOnClose: true,\n    forceRender: true,\n    className: \"custom-modal\",\n    title: 'Update Offer',\n    visible: visible,\n    width: 998,\n    bodyStyle: {\n      backgroundColor: '#f0f2f5',\n      padding: 0\n    },\n    footer: true,\n    onCancel: onCancel,\n    afterClose: () => {\n      reset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    ref: formRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-6 overflow-y-auto\",\n    style: {\n      maxHeight: '32rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(OfferForm, {\n    offers: Object.values(offerStore.entities),\n    datafields: datafieldStore.entities,\n    providers: providerStore.entities,\n    offer: offer,\n    userId: userId,\n    providerId: provider_id,\n    onChangeUpload: onChangeFileUpload,\n    file: file,\n    scopedToProvider: scopedToProvider,\n    role: role,\n    bannerFile: bannerFile,\n    onChangeBannerUpload: onChangeBannerUpload,\n    handlePropData: handlePropData,\n    handleUpadteMain: handleUpadteMain,\n    handleUpadteBanner: handleUpadteBanner,\n    descriptionValue: descriptionValue,\n    handleDescriptionValue: handleDescriptionValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"mb-2 block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }\n  }, \"Pathways - Table\"), /*#__PURE__*/React.createElement(Table, {\n    dataSource: Pathways,\n    className: \"ant-table-wrapper--responsive\",\n    rowClassName: () => 'antd-row',\n    rowKey: \"id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: \"ID\",\n    dataIndex: \"id\",\n    key: \"id\",\n    render: (text, record) => ({\n      children: text,\n      props: {\n        'data-title': 'ID'\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: \"Pathway Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n    render: (text, record) => ({\n      children: text,\n      props: {\n        'data-title': 'Pathway Name'\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: \"Pathway Description\",\n    dataIndex: \"description\",\n    key: \"index\",\n    render: (text, record) => {\n      let children = 'N/A';\n\n      if (text.length) {\n        children = parse(text);\n      }\n\n      return {\n        children: children,\n        props: {\n          'data-title': 'Pathway Description'\n        }\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"bg-white px-6 pt-5 pb-1 flex justify-center\",\n    style: {\n      borderTop: '1px solid #f0f0f0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"mr-3 px-10 rounded\",\n    size: \"small\",\n    type: \"primary\",\n    htmlType: \"submit\",\n    onClick: submitUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 11\n    }\n  }, \"Update\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"px-10 rounded\",\n    size: \"small\",\n    type: \"dashed\",\n    onClick: () => onCancel(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))));\n}\n\n__signature__(OfferUpdateModal, \"useRef{formRef}\\nuseImageAndBannerImage{[\\r\\n    { file, newFile, onFileChange, setFile, onChangeFileUpload },\\r\\n    {\\r\\n      bannerFile,\\r\\n      onBannerFileChange,\\r\\n      newBannerFile,\\r\\n      setBannerFile,\\r\\n      onChangeBannerUpload,\\r\\n    },\\r\\n    reset,\\r\\n  ]}\\nuseForm{[form]}\\nuseAxios{[{ error: updateOfferError }, updateOffer]}\\nuseGlobalStore{{\\r\\n    datafield: datafieldStore,\\r\\n    provider: providerStore,\\r\\n  }}\\nuseEffect{}\\nuseState{[getUpdateValue, setGetUpdatedValue]}\\nuseState{[getMainImage, setGetMainImage]}\\nuseState{[getBannerImage, setGetBannerImage]}\\nuseState{[descriptionValue, setDescriptionValue]('')}\", () => [useImageAndBannerImage, useAxios, useGlobalStore]);\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Column, \"Column\", \"/home/devnineteen/Music/evergreen-frontend/src/components/offer/OfferUpdateModal.js\");\n  reactHotLoader.register(OfferUpdateModal, \"OfferUpdateModal\", \"/home/devnineteen/Music/evergreen-frontend/src/components/offer/OfferUpdateModal.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/src/components/offer/OfferUpdateModal.js"],"names":["React","useEffect","useState","useRef","Modal","Form","Table","Button","notification","useAxios","configure","axiosInstance","useGlobalStore","OfferForm","dayjs","moment","AuthService","UploaderService","useImageAndBannerImage","axios","Column","parse","require","OfferUpdateModal","offer","onCancel","visible","offerStore","scopedToProvider","role","getOfferListData","formRef","currentSession","userId","id","provider_id","file","newFile","onFileChange","setFile","onChangeFileUpload","bannerFile","onBannerFileChange","newBannerFile","setBannerFile","onChangeBannerUpload","reset","RelatedOffers","PrerequisiteOffers","DataFields","GroupsOfOffers","Pathways","useForm","form","method","manual","updateOfferError","error","updateOffer","datafieldStore","datafield","providerStore","provider","submitUpdate","values","validateFields","url","data","updatedAt","toISOString","getUpdateValue","getBannerImage","getMainImage","descriptionValue","status","fileable_type","filePayload","offerEntity","entities","Files","length","results","uploadFile","uploaded_by_user_id","fileable_id","push","success","message","description","meta","updateOne","clonedData","Object","assign","console","populateFields","o","setFieldsValue","pay_unit","Number","length_unit","credit_unit","frequency_unit","category","cost_unit","start_date","topics","map","type","related_offers","prerequisites","request","statusText","current","saveDescription","groupedFiles","v","filter","f","setGetUpdatedValue","setGetMainImage","setGetBannerImage","handlePropData","getPdfUrl","handleUpadteMain","handleUpadteBanner","p","setTimeout","delay","setDescriptionValue","handleDescriptionValue","value","log","backgroundColor","padding","maxHeight","text","record","children","props","borderTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { Modal, Form, Table, Button, notification } from 'antd';\r\nimport useAxios, { configure } from 'axios-hooks';\r\nimport axiosInstance from 'services/AxiosInstance';\r\nimport useGlobalStore from 'store/GlobalStore';\r\nimport OfferForm from 'components/offer/OfferForm';\r\nimport dayjs from 'dayjs';\r\nimport moment from 'moment';\r\nimport AuthService from 'services/AuthService';\r\nimport UploaderService from 'services/Uploader';\r\nimport { compact, orderBy, head, groupBy, flow, mapValues } from 'lodash';\r\nimport { useImageAndBannerImage } from 'hooks';\r\nimport 'assets/scss/antd-overrides.scss';\r\n\r\nconfigure({\r\n  axios: axiosInstance,\r\n});\r\n\r\nconst { Column } = Table;\r\n\r\nvar parse = require('html-react-parser');\r\n\r\n\r\nexport default function OfferUpdateModal({\r\n  offer,\r\n  onCancel,\r\n  visible,\r\n  offerStore,\r\n  scopedToProvider = false,\r\n  role, getOfferListData\r\n}) {\r\n  const formRef = useRef(null);\r\n  const { id: userId, provider_id } = AuthService.currentSession;\r\n  const [\r\n    { file, newFile, onFileChange, setFile, onChangeFileUpload },\r\n    {\r\n      bannerFile,\r\n      onBannerFileChange,\r\n      newBannerFile,\r\n      setBannerFile,\r\n      onChangeBannerUpload,\r\n    },\r\n    reset,\r\n  ] = useImageAndBannerImage();\r\n\r\n  const {\r\n    RelatedOffers = [],\r\n    PrerequisiteOffers = [],\r\n    DataFields = [],\r\n    GroupsOfOffers: Pathways = [],\r\n  } = offer;\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const [{ error: updateOfferError }, updateOffer] = useAxios(\r\n    {\r\n      method: 'PUT',\r\n    },\r\n    { manual: true }\r\n  );\r\n\r\n  const {\r\n    datafield: datafieldStore,\r\n    provider: providerStore,\r\n  } = useGlobalStore();\r\n\r\n  const submitUpdate = async () => {\r\n    try {\r\n      const values = await form.validateFields([\r\n        'banner_image',\r\n        'main_image',\r\n        'generic_type',\r\n        'is_generic',\r\n        'rubric_attachment',\r\n        'location_type',\r\n        'category',\r\n        'description',\r\n        'learn_and_earn',\r\n        'frequency',\r\n        'frequency_unit',\r\n        'cost',\r\n        'cost_unit',\r\n        'credit_unit',\r\n        'pay_unit',\r\n        'length',\r\n        'length_unit',\r\n        'name',\r\n        'provider_id',\r\n        'topics',\r\n        'pay',\r\n        'credit',\r\n        'keywords',\r\n        'related_offers',\r\n        'prerequisites',\r\n        'is_local_promo',\r\n        'is_main_promo',\r\n        'external_url',\r\n      ]);\r\n\r\n      const { data, status } = await updateOffer({\r\n        url: `/offers/${offer.id}`,\r\n        data: {\r\n          ...values,\r\n          updatedAt: new dayjs().toISOString(),\r\n          'rubric_attachment': getUpdateValue,\r\n          'banner_image': getBannerImage,\r\n          'main_image': getMainImage,\r\n          'description': descriptionValue\r\n        },\r\n      });\r\n\r\n      const fileable_type = 'offer';\r\n      let filePayload = [];\r\n\r\n      if (data && userId) {\r\n        const offerEntity = offerStore.entities[data.id];\r\n        if (offerEntity.Files) {\r\n          if (offerEntity.Files.length) {\r\n            filePayload = [...offerEntity.Files];\r\n          }\r\n        }\r\n\r\n        if (onFileChange && newFile) {\r\n          const results = await UploaderService.uploadFile(newFile, {\r\n            uploaded_by_user_id: userId,\r\n            fileable_type,\r\n            fileable_id: data.id,\r\n          });\r\n\r\n          if (results && results.file.data) {\r\n            filePayload.push({\r\n              ...results.file.data,\r\n            });\r\n          }\r\n\r\n          if (results.success) {\r\n            notification.success({\r\n              message: 'Success',\r\n              description: 'Main image is uploaded',\r\n            });\r\n          }\r\n        }\r\n\r\n        if (onBannerFileChange && newBannerFile) {\r\n          const results = await UploaderService.uploadFile(newBannerFile, {\r\n            uploaded_by_user_id: userId,\r\n            fileable_type,\r\n            fileable_id: data.id,\r\n            meta: 'banner-image',\r\n          });\r\n\r\n          if (results && results.file.data) {\r\n            filePayload.push({\r\n              ...results.file.data,\r\n            });\r\n          }\r\n\r\n          if (results.success) {\r\n            notification.success({\r\n              message: 'Success',\r\n              description: 'Banner image is uploaded',\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (data) {\r\n        offerStore.updateOne(data);\r\n      }\r\n\r\n      if (status === 200) {\r\n        if (filePayload.length) {\r\n          let clonedData = Object.assign(data);\r\n          clonedData.Files = filePayload;\r\n          offerStore.updateOne(clonedData);\r\n        }\r\n        notification.success({\r\n          message: status,\r\n          description: 'Successfully updated offer',\r\n        });\r\n        onCancel();\r\n        getOfferListData();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  function populateFields(o) {\r\n    form.setFieldsValue({\r\n      ...o,\r\n      pay_unit: Number(o.pay_unit),\r\n      length_unit: Number(o.length_unit),\r\n      credit_unit: Number(o.credit_unit),\r\n      frequency_unit: Number(o.frequency_unit),\r\n      category: Number(o.category),\r\n      cost_unit: Number(o.cost_unit),\r\n      start_date: moment(o.start_date),\r\n      topics: compact(\r\n        DataFields.map(({ type, id }) => {\r\n          if (type === 'topic') {\r\n            return id;\r\n          }\r\n          return null;\r\n        })\r\n      ),\r\n      related_offers: RelatedOffers.map(({ id }) => id),\r\n      prerequisites: PrerequisiteOffers.map(({ id }) => id),\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (updateOfferError) {\r\n      const { status, statusText } = updateOfferError.request;\r\n      notification.error({\r\n        message: status,\r\n        description: statusText,\r\n      });\r\n    }\r\n    if (formRef.current) {\r\n      populateFields(offer);\r\n      saveDescription(offer);\r\n    }\r\n    if (offer.Files) {\r\n      let groupedFiles = flow([\r\n        (v) => v.filter((f) => f.fileable_type === 'offer'),\r\n        (v) => groupBy(v, 'meta'),\r\n        (v) =>\r\n          mapValues(v, (f) =>\r\n            orderBy(\r\n              f,\r\n              ['fileable_type', 'createdAt', 'id'],\r\n              ['desc', 'desc', 'asc']\r\n            )\r\n          ),\r\n      ])(offer.Files);\r\n\r\n      if (!onFileChange && groupedFiles[null]) {\r\n        setFile(head(groupedFiles[null]));\r\n      }\r\n      if (!onBannerFileChange && groupedFiles['banner-image']) {\r\n        setBannerFile(head(groupedFiles['banner-image']));\r\n      }\r\n    }\r\n  }, [offer, updateOfferError, formRef, file, bannerFile]);\r\n  // const [getPdfUrl, setGetPdfUrl] = useState()\r\n  const [getUpdateValue, setGetUpdatedValue] = useState()\r\n  const [getMainImage, setGetMainImage] = useState()\r\n  const [getBannerImage, setGetBannerImage] = useState()\r\n\r\n  const handlePropData = (getPdfUrl, getUpdateValue) => {\r\n    // setGetPdfUrl(getPdfUrl)\r\n    setGetUpdatedValue(getUpdateValue)\r\n    // setDeleteValue(getDeleteValue)\r\n  }\r\n  const handleUpadteMain = (getMainImage) => {\r\n    setGetMainImage(getMainImage)\r\n    // setDeleteValue(getDeleteValue)\r\n  }\r\n  const handleUpadteBanner = (getBannerImage) => {\r\n    setGetBannerImage(getBannerImage)\r\n    // setDeleteValue(getDeleteValue)\r\n  }\r\n\r\n  function saveDescription(p) {\r\n    if (p && p.description) {\r\n      setTimeout(function delay() {\r\n        // setCount(count => count + 1);\r\n        setDescriptionValue(p.description)\r\n      }, 100);\r\n      // handleDescriptionValue(p.description)\r\n      // setDescriptionValue()\r\n    }\r\n  }\r\n\r\n  const [descriptionValue, setDescriptionValue] = useState('');\r\n\r\n  const handleDescriptionValue = (value) => {\r\n    setDescriptionValue(value)\r\n  }\r\n  console.log('update model',offer)\r\n  return (\r\n    <Modal\r\n      destroyOnClose={true}\r\n      forceRender={true}\r\n      className=\"custom-modal\"\r\n      title={'Update Offer'}\r\n      visible={visible}\r\n      width={998}\r\n      bodyStyle={{ backgroundColor: '#f0f2f5', padding: 0 }}\r\n      footer={true}\r\n      onCancel={onCancel}\r\n      afterClose={() => {\r\n        reset();\r\n      }}\r\n    >\r\n      <Form form={form} ref={formRef}>\r\n        <div className=\"p-6 overflow-y-auto\" style={{ maxHeight: '32rem' }}>\r\n          <OfferForm\r\n            offers={Object.values(offerStore.entities)}\r\n            datafields={datafieldStore.entities}\r\n            providers={providerStore.entities}\r\n            offer={offer}\r\n            userId={userId}\r\n            providerId={provider_id}\r\n            onChangeUpload={onChangeFileUpload}\r\n            file={file}\r\n            scopedToProvider={scopedToProvider}\r\n            role={role}\r\n            bannerFile={bannerFile}\r\n            onChangeBannerUpload={onChangeBannerUpload}\r\n            handlePropData={handlePropData}\r\n            handleUpadteMain={handleUpadteMain}\r\n            handleUpadteBanner={handleUpadteBanner}\r\n            descriptionValue={descriptionValue}\r\n            handleDescriptionValue={handleDescriptionValue}\r\n          />\r\n          <section className=\"mt-2\">\r\n            <label className=\"mb-2 block\">Pathways - Table</label>\r\n            <Table\r\n              dataSource={Pathways}\r\n              className=\"ant-table-wrapper--responsive\"\r\n              rowClassName={() => 'antd-row'}\r\n              rowKey=\"id\"\r\n            >\r\n              <Column\r\n                className=\"antd-col\"\r\n                title=\"ID\"\r\n                dataIndex=\"id\"\r\n                key=\"id\"\r\n                render={(text, record) => ({\r\n                  children: text,\r\n                  props: {\r\n                    'data-title': 'ID',\r\n                  },\r\n                })}\r\n              />\r\n              <Column\r\n                className=\"antd-col\"\r\n                title=\"Pathway Name\"\r\n                dataIndex=\"name\"\r\n                key=\"name\"\r\n                render={(text, record) => ({\r\n                  children: text,\r\n                  props: {\r\n                    'data-title': 'Pathway Name',\r\n                  },\r\n                })}\r\n              />\r\n              <Column\r\n                className=\"antd-col\"\r\n                title=\"Pathway Description\"\r\n                dataIndex=\"description\"\r\n                key=\"index\"\r\n                render={(text, record) => {\r\n                  let children = 'N/A';\r\n                  if (text.length) {\r\n                    children = parse(text);\r\n                  }\r\n                  return {\r\n                    children: children,\r\n                    props: {\r\n                      'data-title': 'Pathway Description',\r\n                    },\r\n                  };\r\n                }}\r\n              />\r\n            </Table>\r\n          </section>\r\n        </div>\r\n        <section className=\"bg-white px-6 pt-5 pb-1 flex justify-center\"\r\n          style={{\r\n            borderTop: '1px solid #f0f0f0',\r\n          }}\r\n        >\r\n          <Button className=\"mr-3 px-10 rounded\" size=\"small\" type=\"primary\" htmlType=\"submit\" onClick={submitUpdate}>Update</Button>\r\n          <Button className=\"px-10 rounded\" size=\"small\" type=\"dashed\" onClick={() => onCancel()}>Cancel</Button>\r\n        </section>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}