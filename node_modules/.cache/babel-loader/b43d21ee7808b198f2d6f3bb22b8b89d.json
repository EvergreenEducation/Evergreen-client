{"ast":null,"code":"import _groupBy from \"lodash/groupBy\";\nvar _jsxFileName = \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/PathwaysTable.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React from 'react';\nimport { Table, Tag, Button } from 'antd';\nimport 'assets/scss/antd-overrides.scss';\nimport PdfListing from '../pdfList/PdfListing';\nconst Column = Table.Column;\n\nfunction PathwaysTable(props) {\n  const data = props.data,\n        handleUpdateModal = props.handleUpdateModal,\n        providers = props.providers;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Table, {\n    dataSource: data,\n    bordered: true,\n    className: \"ant-table-wrapper--responsive\",\n    rowClassName: () => 'antd-row',\n    rowKey: \"id\",\n    pagination: {\n      pageSize: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: \"ID\",\n    dataIndex: \"id\",\n    key: \"id\",\n    render: (text, record) => ({\n      children: text,\n      props: {\n        'data-title': 'ID'\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n    render: (text, record) => ({\n      children: text,\n      props: {\n        'data-title': 'Name'\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: \"Provider\",\n    dataIndex: \"provider_id\",\n    key: \"provider_id\",\n    render: (id, record) => {\n      let children = 'N/A';\n\n      if (providers[id]) {\n        children = providers[id].name;\n      }\n\n      return {\n        children: children,\n        props: {\n          'data-title': 'Provider'\n        }\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: \"Generic Type\",\n    dataIndex: \"type\",\n    key: \"type\",\n    render: (text, record) => ({\n      children: text,\n      props: {\n        'data-title': 'Generic Type'\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: \"Offer Groups\",\n    dataIndex: \"GroupsOfOffers\",\n    key: \"index\",\n    render: (groups, record) => {\n      let children = 'N/A';\n\n      const grouped = _groupBy(groups, 'group_name');\n\n      const groupNames = Object.keys(grouped);\n\n      if (groupNames.length) {\n        children = /*#__PURE__*/React.createElement(React.Fragment, null, groupNames.map((group_name, index) => {\n          const count = grouped[group_name].length;\n          return /*#__PURE__*/React.createElement(Tag, {\n            color: index % 2 ? 'cyan' : 'green',\n            key: index.toString(),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 21\n            }\n          }, `${group_name} ( ${count.toLocaleString()} )`);\n        }) || 'N/A');\n      }\n\n      return {\n        children,\n        props: {\n          'data-title': 'Offer Groups'\n        }\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: \"Topics\",\n    dataIndex: \"DataFields\",\n    key: \"DataFields\",\n    render: (datafields = [], record) => {\n      let children = 'N/A';\n\n      if (datafields.length) {\n        children = /*#__PURE__*/React.createElement(React.Fragment, null, datafields.map((datafield, index) => {\n          if (datafield.type !== 'topic') {\n            return null;\n          }\n\n          return /*#__PURE__*/React.createElement(Tag, {\n            color: index % 2 ? 'blue' : 'orange',\n            key: index.toString(),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 21\n            }\n          }, datafield.name);\n        }) || 'N/A');\n      }\n\n      return {\n        children,\n        props: {\n          'data-title': 'Topics'\n        }\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: \"\",\n    key: \"update\",\n    render: (text, record) => ({\n      children: /*#__PURE__*/React.createElement(Button, {\n        type: \"link\",\n        onClick: () => handleUpdateModal(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }\n      }, \"Update\"),\n      props: {\n        'data-title': ''\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PdfListing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  })));\n}\n\nconst _default = PathwaysTable;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Column, \"Column\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/PathwaysTable.js\");\n  reactHotLoader.register(PathwaysTable, \"PathwaysTable\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/PathwaysTable.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/PathwaysTable.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/PathwaysTable.js"],"names":["React","Table","Tag","Button","PdfListing","Column","PathwaysTable","props","data","handleUpdateModal","providers","pageSize","text","record","children","id","name","groups","grouped","groupNames","Object","keys","length","map","group_name","index","count","toString","toLocaleString","datafields","datafield","type"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Table, Tag, Button } from 'antd';\r\nimport { groupBy } from 'lodash';\r\nimport 'assets/scss/antd-overrides.scss';\r\nimport PdfListing from '../pdfList/PdfListing'\r\nconst { Column } = Table;\r\n\r\nfunction PathwaysTable(props) {\r\n  const { data, handleUpdateModal, providers } = props;\r\n  return (\r\n    <>\r\n    <Table\r\n      dataSource={data}\r\n      bordered\r\n      className=\"ant-table-wrapper--responsive\"\r\n      rowClassName={() => 'antd-row'}\r\n      rowKey=\"id\"\r\n      pagination={{ pageSize: 8 }}\r\n    >\r\n      <Column\r\n        className=\"antd-col\"\r\n        title=\"ID\"\r\n        dataIndex=\"id\"\r\n        key=\"id\"\r\n        render={(text, record) => ({\r\n          children: text,\r\n          props: {\r\n            'data-title': 'ID',\r\n          },\r\n        })}\r\n      />\r\n      <Column\r\n        className=\"antd-col\"\r\n        title=\"Name\"\r\n        dataIndex=\"name\"\r\n        key=\"name\"\r\n        render={(text, record) => ({\r\n          children: text,\r\n          props: {\r\n            'data-title': 'Name',\r\n          },\r\n        })}\r\n      />\r\n      <Column\r\n        className=\"antd-col\"\r\n        title=\"Provider\"\r\n        dataIndex=\"provider_id\"\r\n        key=\"provider_id\"\r\n        render={(id, record) => {\r\n          let children = 'N/A';\r\n          if (providers[id]) {\r\n            children = providers[id].name;\r\n          }\r\n          return {\r\n            children: children,\r\n            props: { 'data-title': 'Provider' },\r\n          };\r\n        }}\r\n      />\r\n      <Column\r\n        className=\"antd-col\"\r\n        title=\"Generic Type\"\r\n        dataIndex=\"type\"\r\n        key=\"type\"\r\n        render={(text, record) => ({\r\n          children: text,\r\n          props: {\r\n            'data-title': 'Generic Type',\r\n          },\r\n        })}\r\n      />\r\n      <Column\r\n        className=\"antd-col\"\r\n        title=\"Offer Groups\"\r\n        dataIndex=\"GroupsOfOffers\"\r\n        key=\"index\"\r\n        render={(groups, record) => {\r\n          let children = 'N/A';\r\n\r\n          const grouped = groupBy(groups, 'group_name');\r\n          const groupNames = Object.keys(grouped);\r\n\r\n          if (groupNames.length) {\r\n            children = (\r\n              <>\r\n                {groupNames.map((group_name, index) => {\r\n                  const count = grouped[group_name].length;\r\n                  return (\r\n                    <Tag\r\n                      color={index % 2 ? 'cyan' : 'green'}\r\n                      key={index.toString()}\r\n                    >\r\n                      {`${group_name} ( ${count.toLocaleString()} )`}\r\n                    </Tag>\r\n                  );\r\n                }) || 'N/A'}\r\n              </>\r\n            );\r\n          }\r\n\r\n          return {\r\n            children,\r\n            props: {\r\n              'data-title': 'Offer Groups',\r\n            },\r\n          };\r\n        }}\r\n      />\r\n      <Column\r\n        className=\"antd-col\"\r\n        title=\"Topics\"\r\n        dataIndex=\"DataFields\"\r\n        key=\"DataFields\"\r\n        render={(datafields = [], record) => {\r\n          let children = 'N/A';\r\n\r\n          if (datafields.length) {\r\n            children = (\r\n              <>\r\n                {datafields.map((datafield, index) => {\r\n                  if (datafield.type !== 'topic') {\r\n                    return null;\r\n                  }\r\n                  return (\r\n                    <Tag\r\n                      color={index % 2 ? 'blue' : 'orange'}\r\n                      key={index.toString()}\r\n                    >\r\n                      {datafield.name}\r\n                    </Tag>\r\n                  );\r\n                }) || 'N/A'}\r\n              </>\r\n            );\r\n          }\r\n\r\n          return {\r\n            children,\r\n            props: {\r\n              'data-title': 'Topics',\r\n            },\r\n          };\r\n        }}\r\n      />\r\n      <Column\r\n        className=\"antd-col\"\r\n        title=\"\"\r\n        key=\"update\"\r\n        render={(text, record) => ({\r\n          children: (\r\n            <Button type=\"link\" onClick={() => handleUpdateModal(record)}>\r\n              Update\r\n            </Button>\r\n          ),\r\n          props: {\r\n            'data-title': '',\r\n          },\r\n        })}\r\n      />\r\n    </Table>\r\n    <div>\r\n      <PdfListing />\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PathwaysTable;\r\n"]},"metadata":{},"sourceType":"module"}