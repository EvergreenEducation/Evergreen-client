{"ast":null,"code":"import _objectSpread from \"/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _flowRight from \"lodash/flowRight\";\nimport _indexOf from \"lodash/indexOf\";\nimport _sortBy from \"lodash/sortBy\";\nimport _findIndex from \"lodash/findIndex\";\nimport _find from \"lodash/find\";\nimport _groupBy from \"lodash/groupBy\";\nimport _each from \"lodash/each\";\nvar _jsxFileName = \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/OfferGroupTable/OfferGroupTable.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { Component } from 'react';\nimport { Button, Input, message } from 'antd';\nimport GroupTable from './GroupTable';\nimport 'assets/scss/antd-overrides.scss';\n\nfunction getExistingOffers(pathway) {\n  let offers = [];\n\n  let groups = _groupBy(pathway.GroupsOfOffers, 'group_name');\n\n  _each(groups, (offerInTheGroup, group_name) => {\n    offers.push({\n      group_name: group_name,\n      offers: offerInTheGroup,\n      removed: false\n    });\n  });\n\n  return offers;\n}\n\nclass OfferGroupTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      groupNameField: '',\n      groupNames: [],\n      groupsData: []\n    };\n\n    this.addGroupHandler = () => {\n      const _this$props = this.props,\n            groupsOfOffers = _this$props.groupsOfOffers,\n            setGroupsOfOffers = _this$props.setGroupsOfOffers;\n\n      const exist = _find(groupsOfOffers, ['group_name', this.state.groupNameField]);\n\n      if (exist) {\n        message.error('Group already exist');\n        return;\n      }\n\n      setGroupsOfOffers([...groupsOfOffers, {\n        group_name: this.state.groupNameField,\n        offers: [],\n        removed: false\n      }]);\n    };\n\n    this.removeGroupHandler = groupName => {\n      const _this$props2 = this.props,\n            groupsOfOffers = _this$props2.groupsOfOffers,\n            setGroupsOfOffers = _this$props2.setGroupsOfOffers;\n      groupsOfOffers.forEach(group => {\n        if (group.group_name === groupName) {\n          group.removed = true;\n        }\n      });\n      setGroupsOfOffers([...groupsOfOffers]);\n    };\n\n    this.updateGroupHandler = (groupName, selectedValues) => {\n      const _this$props3 = this.props,\n            groupsOfOffers = _this$props3.groupsOfOffers,\n            setGroupsOfOffers = _this$props3.setGroupsOfOffers;\n      let currentOffers = [...groupsOfOffers];\n\n      let offerIndex = _findIndex(currentOffers, ['group_name', groupName]);\n\n      currentOffers[offerIndex].offers = selectedValues.map(sv => ({\n        offer_id: sv\n      }));\n      setGroupsOfOffers(currentOffers);\n    };\n\n    this.setGroupNameField = e => {\n      if (e.target.value && e.target.value.length) {\n        this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n          groupNameField: e.target.value\n        }));\n      }\n    };\n\n    this.onChangeAlsoValidate = inputVal => {\n      const form = this.props.form;\n      const groupNames = this.state.groupNames;\n      form.validateFields(groupNames);\n      return inputVal;\n    };\n  }\n\n  componentDidUpdate(nextProps) {\n    const _this$props4 = this.props,\n          pathway = _this$props4.pathway,\n          groupsOfOffers = _this$props4.groupsOfOffers,\n          setGroupsOfOffers = _this$props4.setGroupsOfOffers;\n\n    if (pathway !== nextProps.pathway) {\n      nextProps.setGroupsOfOffers();\n      const existingOffers = getExistingOffers(pathway);\n      setGroupsOfOffers(existingOffers);\n      return true;\n    }\n\n    if (groupsOfOffers !== nextProps.groupsOfOffers) {\n      let groupsData = groupsOfOffers ? groupsOfOffers.filter(item => !item.removed) : [];\n\n      if (pathway && pathway.group_sort_order) {\n        groupsData = _flowRight([d => _sortBy(d, ['year']), d => d.map(g => {\n          this.state.groupNames.push(g.group_name);\n          const year = _indexOf(pathway.group_sort_order, g.group_name) + 1;\n          return _objectSpread(_objectSpread({}, g), {}, {\n            year\n          });\n        })])(groupsData);\n      }\n\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        groupsData\n      }));\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          pathway = _this$props5.pathway,\n          offerStore = _this$props5.offerStore;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"w-full\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      className: \"w-full rounded-l rounded-r-none ant-input-group-add-on-border-none-p-0\",\n      style: {\n        width: '400px',\n        marginBottom: '3px'\n      },\n      placeholder: \"Group Name\",\n      name: \"add-group\",\n      onChange: this.setGroupNameField,\n      addonAfter: /*#__PURE__*/React.createElement(Button, {\n        className: \"rounded-l-none\",\n        type: \"primary\",\n        onClick: this.addGroupHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, \"Add Group\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(GroupTable, {\n      groupsData: this.state.groupsData,\n      offerStore: offerStore,\n      onChangeAlsoValidate: this.onChangeAlsoValidate,\n      pathway: pathway,\n      updateGroupHandler: this.updateGroupHandler,\n      removeGroupHandler: this.removeGroupHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {\n    // @ts-ignore\n    this[key] = eval(code);\n  }\n\n}\n\nconst _default = OfferGroupTable;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getExistingOffers, \"getExistingOffers\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/OfferGroupTable/OfferGroupTable.js\");\n  reactHotLoader.register(OfferGroupTable, \"OfferGroupTable\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/OfferGroupTable/OfferGroupTable.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/OfferGroupTable/OfferGroupTable.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/OfferGroupTable/OfferGroupTable.js"],"names":["React","Component","Button","Input","message","GroupTable","getExistingOffers","pathway","offers","groups","GroupsOfOffers","offerInTheGroup","group_name","push","removed","OfferGroupTable","state","groupNameField","groupNames","groupsData","addGroupHandler","props","groupsOfOffers","setGroupsOfOffers","exist","error","removeGroupHandler","groupName","forEach","group","updateGroupHandler","selectedValues","currentOffers","offerIndex","map","sv","offer_id","setGroupNameField","e","target","value","length","setState","onChangeAlsoValidate","inputVal","form","validateFields","componentDidUpdate","nextProps","existingOffers","filter","item","group_sort_order","d","g","year","render","offerStore","width","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Input, message } from 'antd';\nimport {\n  each,\n  groupBy,\n  find,\n  findIndex,\n  sortBy,\n  indexOf,\n  flowRight,\n} from 'lodash';\nimport GroupTable from './GroupTable';\nimport 'assets/scss/antd-overrides.scss';\n\nfunction getExistingOffers(pathway) {\n  let offers = [];\n  let groups = groupBy(pathway.GroupsOfOffers, 'group_name');\n  each(groups, (offerInTheGroup, group_name) => {\n    offers.push({\n      group_name: group_name,\n      offers: offerInTheGroup,\n      removed: false,\n    });\n  });\n\n  return offers;\n}\n\nclass OfferGroupTable extends Component {\n  state = {\n    groupNameField: '',\n    groupNames: [],\n    groupsData: [],\n  };\n\n  addGroupHandler = () => {\n    const { groupsOfOffers, setGroupsOfOffers } = this.props;\n    const exist = find(groupsOfOffers, [\n      'group_name',\n      this.state.groupNameField,\n    ]);\n    if (exist) {\n      message.error('Group already exist');\n      return;\n    }\n    setGroupsOfOffers([\n      ...groupsOfOffers,\n      { group_name: this.state.groupNameField, offers: [], removed: false },\n    ]);\n  };\n\n  removeGroupHandler = (groupName) => {\n    const { groupsOfOffers, setGroupsOfOffers } = this.props;\n    groupsOfOffers.forEach((group) => {\n      if (group.group_name === groupName) {\n        group.removed = true;\n      }\n    });\n    setGroupsOfOffers([...groupsOfOffers]);\n  };\n\n  updateGroupHandler = (groupName, selectedValues) => {\n    const { groupsOfOffers, setGroupsOfOffers } = this.props;\n    let currentOffers = [...groupsOfOffers];\n    let offerIndex = findIndex(currentOffers, ['group_name', groupName]);\n    currentOffers[offerIndex].offers = selectedValues.map((sv) => ({\n      offer_id: sv,\n    }));\n    setGroupsOfOffers(currentOffers);\n  };\n\n  setGroupNameField = (e) => {\n    if (e.target.value && e.target.value.length) {\n      this.setState({ ...this.state, groupNameField: e.target.value });\n    }\n  };\n\n  onChangeAlsoValidate = (inputVal) => {\n    const { form } = this.props;\n    const { groupNames } = this.state;\n    form.validateFields(groupNames);\n    return inputVal;\n  };\n\n  componentDidUpdate(nextProps) {\n    const { pathway, groupsOfOffers, setGroupsOfOffers } = this.props;\n    if (pathway !== nextProps.pathway) {\n      nextProps.setGroupsOfOffers();\n      const existingOffers = getExistingOffers(pathway);\n      setGroupsOfOffers(existingOffers);\n      return true;\n    }\n    if (groupsOfOffers !== nextProps.groupsOfOffers) {\n      let groupsData = groupsOfOffers\n        ? groupsOfOffers.filter((item) => !item.removed)\n        : [];\n\n      if (pathway && pathway.group_sort_order) {\n        groupsData = flowRight([\n          (d) => sortBy(d, ['year']),\n          (d) =>\n            d.map((g) => {\n              this.state.groupNames.push(g.group_name);\n              const year = indexOf(pathway.group_sort_order, g.group_name) + 1;\n              return {\n                ...g,\n                year,\n              };\n            }),\n        ])(groupsData);\n      }\n\n      this.setState({ ...this.state, groupsData });\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    const { pathway, offerStore } = this.props;\n\n    return (\n      <div className=\"w-full\">\n        <Input\n          className=\"w-full rounded-l rounded-r-none ant-input-group-add-on-border-none-p-0\"\n          style={{ width: '400px', marginBottom: '3px' }}\n          placeholder=\"Group Name\"\n          name=\"add-group\"\n          onChange={this.setGroupNameField}\n          addonAfter={\n            <Button\n              className=\"rounded-l-none\"\n              type=\"primary\"\n              onClick={this.addGroupHandler}\n            >\n              Add Group\n            </Button>\n          }\n        />\n        <GroupTable\n          groupsData={this.state.groupsData}\n          offerStore={offerStore}\n          onChangeAlsoValidate={this.onChangeAlsoValidate}\n          pathway={pathway}\n          updateGroupHandler={this.updateGroupHandler}\n          removeGroupHandler={this.removeGroupHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default OfferGroupTable;\n"]},"metadata":{},"sourceType":"module"}