{"ast":null,"code":"import _asyncToGenerator from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _mapValues from \"lodash/mapValues\";\nimport _flowRight from \"lodash/flowRight\";\nimport _head from \"lodash/head\";\nimport _orderBy from \"lodash/orderBy\";\nimport _groupBy from \"lodash/groupBy\";\nimport _isNil from \"lodash/isNil\";\nvar _jsxFileName = \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderUpdateModal.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Modal, Form, Table, Button, notification } from 'antd';\nimport ProviderForm from 'components/provider/ProviderForm';\nimport axiosInstance from 'services/AxiosInstance';\nimport { configure } from 'axios-hooks';\nimport useGlobalStore from 'store/GlobalStore';\nimport AuthService from 'services/AuthService';\nimport UploaderService from 'services/Uploader';\nimport { useImageAndBannerImage } from 'hooks';\nimport 'assets/scss/antd-overrides.scss';\nconfigure({\n  axios: axiosInstance\n});\n\nvar parse = require('html-react-parser');\n\nconst Column = Table.Column;\n\nconst renderColumns = (nameTitle, descriptionTitle) => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: \"ID\",\n    dataIndex: \"id\",\n    key: \"id\",\n    render: (text, record) => ({\n      children: text,\n      props: {\n        'data-title': 'ID'\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: nameTitle,\n    dataIndex: \"name\",\n    key: \"name\",\n    render: (text, record) => ({\n      children: text,\n      props: {\n        'data-title': nameTitle\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Column, {\n    className: \"antd-col\",\n    title: descriptionTitle,\n    dataIndex: \"description\",\n    key: \"index\",\n    render: (text, record) => {\n      let children = 'N/A';\n\n      if (text.length) {\n        children = parse(text);\n      }\n\n      return {\n        children: children,\n        props: {\n          'data-title': descriptionTitle\n        }\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default function ProviderUpdateModal(props) {\n  const formRef = useRef(null);\n  const userId = AuthService.currentSession.id;\n\n  const _Form$useForm = Form.useForm(),\n        _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n        form = _Form$useForm2[0];\n\n  const _props$provider = props.provider,\n        provider = _props$provider === void 0 ? {} : _props$provider,\n        onCancel = props.onCancel,\n        visible = props.visible,\n        datafields = props.datafields,\n        role = props.role;\n  const _provider$Offers = provider.Offers,\n        Offers = _provider$Offers === void 0 ? [] : _provider$Offers,\n        _provider$Pathways = provider.Pathways,\n        Pathways = _provider$Pathways === void 0 ? [] : _provider$Pathways;\n\n  const _useGlobalStore = useGlobalStore(),\n        providerStore = _useGlobalStore.provider;\n\n  const _useImageAndBannerIma = useImageAndBannerImage(),\n        _useImageAndBannerIma2 = _slicedToArray(_useImageAndBannerIma, 3),\n        _useImageAndBannerIma3 = _useImageAndBannerIma2[0],\n        file = _useImageAndBannerIma3.file,\n        newFile = _useImageAndBannerIma3.newFile,\n        onFileChange = _useImageAndBannerIma3.onFileChange,\n        setFile = _useImageAndBannerIma3.setFile,\n        onChangeFileUpload = _useImageAndBannerIma3.onChangeFileUpload,\n        _useImageAndBannerIma4 = _useImageAndBannerIma2[1],\n        bannerFile = _useImageAndBannerIma4.bannerFile,\n        onBannerFileChange = _useImageAndBannerIma4.onBannerFileChange,\n        newBannerFile = _useImageAndBannerIma4.newBannerFile,\n        setBannerFile = _useImageAndBannerIma4.setBannerFile,\n        onChangeBannerUpload = _useImageAndBannerIma4.onChangeBannerUpload,\n        reset = _useImageAndBannerIma2[2];\n\n  const groupedDataFields = _groupBy(provider.DataFields, 'type') || [];\n  let providerType = null;\n\n  if (groupedDataFields.provider && groupedDataFields.provider.length) {\n    providerType = groupedDataFields.provider[0].id;\n  }\n\n  let topics = [];\n\n  if (!_isNil(groupedDataFields.topic)) {\n    topics = groupedDataFields.topic.reduce((acc, curr, index) => {\n      if (_isNil(acc)) {\n        return [];\n      }\n\n      acc.push(curr.id);\n      return acc;\n    }, []);\n  }\n\n  function populateFields(p) {\n    form.setFieldsValue(_objectSpread(_objectSpread({}, p), {}, {\n      type: providerType,\n      topics: topics\n    }));\n\n    if (p && p.description) {\n      setDescriptionValue(p.description);\n    }\n  }\n\n  useEffect(() => {\n    if (formRef.current) {\n      populateFields(provider);\n    }\n\n    if (provider.Files) {\n      let groupedFiles = _flowRight([v => _mapValues(v, f => _orderBy(f, ['fileable_type', 'createdAt', 'id'], ['desc', 'desc', 'asc'])), v => _groupBy(v, 'meta'), v => v.filter(f => f.fileable_type === 'provider')])(provider.Files);\n\n      if (!onFileChange && groupedFiles[null]) {\n        setFile(_head(groupedFiles[null]));\n      }\n\n      if (!onBannerFileChange && groupedFiles['banner-image']) {\n        setBannerFile(_head(groupedFiles['banner-image']));\n      }\n    }\n\n    return;\n  }, [provider, provider.Files, formRef, file, bannerFile]);\n\n  const submitUpdate = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        const values = yield form.validateFields(['banner_image', 'main_image', 'accreditation', 'location_type', 'name', 'location', 'type', 'learn_and_earn', 'is_public', 'industry', 'description', 'industry', 'financial_aid', 'credit', 'news', 'contact', 'pay', 'cost', 'topics', 'keywords', 'is_local_promo', 'is_main_promo', 'external_url']);\n        let tokenData = JSON.parse(localStorage.getItem(\"currentSession\"));\n\n        const _yield$axiosInstance$ = yield axiosInstance.put(`/providers/${tokenData.role === \"provider\" ? tokenData.provider_id : provider.id}`, _objectSpread(_objectSpread({}, values), {}, {\n          topics: values.topics,\n          'banner_image': getBannerImage,\n          'main_image': getMainImage,\n          'description': descriptionValue\n        })),\n              data = _yield$axiosInstance$.data,\n              status = _yield$axiosInstance$.status; // const[handleData,setHandleData] = useState()\n        // setHandleData(data)\n\n\n        const fileable_type = 'provider';\n        let filePayload = []; // console.log(\"filePayload\", filePayload)\n\n        if (data && userId) {\n          const providerEntity = providerStore.entities[data.id];\n\n          if (providerEntity.Files) {\n            if (providerEntity.Files.length) {\n              filePayload = [...providerEntity.Files];\n            }\n          }\n\n          if (onFileChange && newFile) {\n            const results = yield UploaderService.uploadFile(newFile, {\n              uploaded_by_user_id: userId,\n              fileable_type,\n              fileable_id: data.id\n            });\n\n            if (results && results.file.data) {\n              filePayload.push(_objectSpread({}, results.file.data));\n            }\n\n            if (results.success) {\n              notification.success({\n                message: 'Success',\n                description: 'Main image is uploaded'\n              });\n            }\n          }\n\n          if (onBannerFileChange && newBannerFile) {\n            const results = yield UploaderService.uploadFile(newBannerFile, {\n              uploaded_by_user_id: userId,\n              fileable_type,\n              fileable_id: data.id,\n              meta: 'banner-image'\n            });\n\n            if (results && results.file.data) {\n              filePayload.push(_objectSpread({}, results.file.data));\n            }\n\n            if (results.success) {\n              notification.success({\n                message: 'Success',\n                description: 'Banner image is uploaded'\n              });\n            }\n          }\n\n          providerStore.updateOne(data);\n        }\n\n        let token = JSON.parse(localStorage.getItem(\"currentSession\"));\n        let user_role = token.role;\n\n        if (status === 200) {\n          if (filePayload.length) {\n            let clonedData = Object.assign(data);\n            clonedData.Files = filePayload;\n            providerStore.updateOne(clonedData);\n          }\n\n          notification.success({\n            message: status,\n            description: 'Successfully updated provider'\n          });\n\n          if (user_role === \"provider\") {\n            onCancel();\n          } else {\n            props.getProviderApi();\n            onCancel();\n          }\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    });\n\n    return function submitUpdate() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        getMainImage = _useState2[0],\n        setGetMainImage = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        getBannerImage = _useState4[0],\n        setGetBannerImage = _useState4[1];\n\n  const handleUpadteMain = getMainImage => {\n    setGetMainImage(getMainImage); // setDeleteValue(getDeleteValue)\n  };\n\n  const handleUpadteBanner = getBannerImage => {\n    setGetBannerImage(getBannerImage); // setDeleteValue(getDeleteValue)\n  };\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        descriptionValue = _useState6[0],\n        setDescriptionValue = _useState6[1];\n\n  const handleDescriptionValue = value => {\n    setDescriptionValue(value);\n  }; // console.log(\"00000000000000\", getMainImage, getBannerImage)\n\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    forceRender: true,\n    className: \"custom-modal\",\n    title: 'Update Provider',\n    visible: visible,\n    width: 998,\n    bodyStyle: {\n      backgroundColor: '#f0f2f5',\n      padding: 0\n    },\n    footer: true,\n    onCancel: onCancel,\n    afterClose: () => {\n      reset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    ref: formRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-6 overflow-y-auto\",\n    style: {\n      maxHeight: '32rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ProviderForm, {\n    role: role,\n    datafields: datafields,\n    userId: userId,\n    onChangeUpload: onChangeFileUpload,\n    file: file,\n    bannerFile: bannerFile,\n    onChangeBannerUpload: onChangeBannerUpload,\n    handleUpadteMain: handleUpadteMain,\n    handleUpadteBanner: handleUpadteBanner,\n    handleData: provider,\n    descriptionValue: descriptionValue,\n    handleDescriptionValue: handleDescriptionValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"mb-2 block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }\n  }, \"Offers - Table\"), /*#__PURE__*/React.createElement(Table, {\n    dataSource: Offers,\n    rowClassName: () => 'antd-row',\n    className: \"ant-table-wrapper--responsive\",\n    rowKey: \"id\",\n    pagination: {\n      pageSize: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }\n  }, renderColumns('Offer Name', 'Offer Description'))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"mb-2 block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }\n  }, \"Pathways - Table\"), /*#__PURE__*/React.createElement(Table, {\n    dataSource: Pathways,\n    rowKey: \"id\",\n    pagination: {\n      pageSize: 5\n    },\n    className: \"ant-table-wrapper--responsive w-full\",\n    rowClassName: () => 'antd-row',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }\n  }, renderColumns('Name', 'Description')))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"bg-white px-6 pt-5 pb-1 flex justify-center\",\n    style: {\n      borderTop: '1px solid #f0f0f0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"mr-3 px-10 rounded\",\n    size: \"small\",\n    type: \"primary\",\n    htmlType: \"submit\",\n    onClick: () => submitUpdate(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 11\n    }\n  }, \"Update\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"px-10 rounded\",\n    size: \"small\",\n    type: \"dashed\",\n    onClick: () => onCancel(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))));\n}\n\n__signature__(ProviderUpdateModal, \"useRef{formRef}\\nuseForm{[form]}\\nuseGlobalStore{{ provider: providerStore }}\\nuseImageAndBannerImage{[\\r\\n    { file, newFile, onFileChange, setFile, onChangeFileUpload },\\r\\n    {\\r\\n      bannerFile,\\r\\n      onBannerFileChange,\\r\\n      newBannerFile,\\r\\n      setBannerFile,\\r\\n      onChangeBannerUpload,\\r\\n    },\\r\\n    reset,\\r\\n  ]}\\nuseEffect{}\\nuseState{[getMainImage, setGetMainImage]}\\nuseState{[getBannerImage, setGetBannerImage]}\\nuseState{[descriptionValue, setDescriptionValue]('')}\", () => [useGlobalStore, useImageAndBannerImage]);\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Column, \"Column\", \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderUpdateModal.js\");\n  reactHotLoader.register(renderColumns, \"renderColumns\", \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderUpdateModal.js\");\n  reactHotLoader.register(ProviderUpdateModal, \"ProviderUpdateModal\", \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderUpdateModal.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderUpdateModal.js"],"names":["React","useEffect","useRef","useState","Modal","Form","Table","Button","notification","ProviderForm","axiosInstance","configure","useGlobalStore","AuthService","UploaderService","useImageAndBannerImage","axios","parse","require","Column","renderColumns","nameTitle","descriptionTitle","text","record","children","props","length","ProviderUpdateModal","formRef","userId","currentSession","id","useForm","form","provider","onCancel","visible","datafields","role","Offers","Pathways","providerStore","file","newFile","onFileChange","setFile","onChangeFileUpload","bannerFile","onBannerFileChange","newBannerFile","setBannerFile","onChangeBannerUpload","reset","groupedDataFields","DataFields","providerType","topics","topic","reduce","acc","curr","index","push","populateFields","p","setFieldsValue","type","description","setDescriptionValue","current","Files","groupedFiles","v","f","filter","fileable_type","submitUpdate","values","validateFields","tokenData","JSON","localStorage","getItem","put","provider_id","getBannerImage","getMainImage","descriptionValue","data","status","filePayload","providerEntity","entities","results","uploadFile","uploaded_by_user_id","fileable_id","success","message","meta","updateOne","token","user_role","clonedData","Object","assign","getProviderApi","err","console","error","setGetMainImage","setGetBannerImage","handleUpadteMain","handleUpadteBanner","handleDescriptionValue","value","backgroundColor","padding","maxHeight","pageSize","borderTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Modal, Form, Table, Button, notification } from 'antd';\r\nimport ProviderForm from 'components/provider/ProviderForm';\r\nimport axiosInstance from 'services/AxiosInstance';\r\nimport { isNil, groupBy, orderBy, head, flowRight, mapValues } from 'lodash';\r\nimport { configure } from 'axios-hooks';\r\nimport useGlobalStore from 'store/GlobalStore';\r\nimport AuthService from 'services/AuthService';\r\nimport UploaderService from 'services/Uploader';\r\nimport { useImageAndBannerImage } from 'hooks';\r\nimport 'assets/scss/antd-overrides.scss';\r\n\r\nconfigure({\r\n  axios: axiosInstance,\r\n});\r\nvar parse = require('html-react-parser');\r\n\r\nconst { Column } = Table;\r\n\r\nconst renderColumns = (nameTitle, descriptionTitle) => {\r\n  return (\r\n    <>\r\n      <Column\r\n        className=\"antd-col\"\r\n        title=\"ID\"\r\n        dataIndex=\"id\"\r\n        key=\"id\"\r\n        render={(text, record) => ({\r\n          children: text,\r\n          props: {\r\n            'data-title': 'ID',\r\n          },\r\n        })}\r\n      />\r\n      <Column\r\n        className=\"antd-col\"\r\n        title={nameTitle}\r\n        dataIndex=\"name\"\r\n        key=\"name\"\r\n        render={(text, record) => ({\r\n          children: text,\r\n          props: {\r\n            'data-title': nameTitle,\r\n          },\r\n        })}\r\n      />\r\n      <Column\r\n        className=\"antd-col\"\r\n        title={descriptionTitle}\r\n        dataIndex=\"description\"\r\n        key=\"index\"\r\n        render={(text, record) => {\r\n          let children = 'N/A';\r\n          if (text.length) {\r\n            children = parse(text);\r\n          }\r\n          return {\r\n            children: children,\r\n            props: {\r\n              'data-title': descriptionTitle,\r\n            },\r\n          };\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default function ProviderUpdateModal(props) {\r\n  const formRef = useRef(null);\r\n  const { id: userId } = AuthService.currentSession;\r\n  const [form] = Form.useForm();\r\n  const { provider = {}, onCancel, visible, datafields, role } = props;\r\n  const { Offers = [], Pathways = [] } = provider;\r\n\r\n  const { provider: providerStore } = useGlobalStore();\r\n  const [\r\n    { file, newFile, onFileChange, setFile, onChangeFileUpload },\r\n    {\r\n      bannerFile,\r\n      onBannerFileChange,\r\n      newBannerFile,\r\n      setBannerFile,\r\n      onChangeBannerUpload,\r\n    },\r\n    reset,\r\n  ] = useImageAndBannerImage();\r\n\r\n  const groupedDataFields = groupBy(provider.DataFields, 'type') || [];\r\n  let providerType = null;\r\n  if (groupedDataFields.provider && groupedDataFields.provider.length) {\r\n    providerType = groupedDataFields.provider[0].id;\r\n  }\r\n\r\n  let topics = [];\r\n\r\n  if (!isNil(groupedDataFields.topic)) {\r\n    topics = groupedDataFields.topic.reduce((acc, curr, index) => {\r\n      if (isNil(acc)) {\r\n        return [];\r\n      }\r\n      acc.push(curr.id);\r\n      return acc;\r\n    }, []);\r\n  }\r\n\r\n  function populateFields(p) {\r\n    form.setFieldsValue({\r\n      ...p,\r\n      type: providerType,\r\n      topics: topics,\r\n    });\r\n    if (p && p.description) {\r\n      setDescriptionValue(p.description)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (formRef.current) {\r\n      populateFields(provider);\r\n    }\r\n\r\n    if (provider.Files) {\r\n      let groupedFiles = flowRight([\r\n        (v) =>\r\n          mapValues(v, (f) =>\r\n            orderBy(\r\n              f,\r\n              ['fileable_type', 'createdAt', 'id'],\r\n              ['desc', 'desc', 'asc']\r\n            )\r\n          ),\r\n        (v) => groupBy(v, 'meta'),\r\n        (v) => v.filter((f) => f.fileable_type === 'provider'),\r\n      ])(provider.Files);\r\n\r\n      if (!onFileChange && groupedFiles[null]) {\r\n        setFile(head(groupedFiles[null]));\r\n      }\r\n      if (!onBannerFileChange && groupedFiles['banner-image']) {\r\n        setBannerFile(head(groupedFiles['banner-image']));\r\n      }\r\n    }\r\n    return;\r\n  }, [provider, provider.Files, formRef, file, bannerFile]);\r\n\r\n  const submitUpdate = async () => {\r\n    try {\r\n      const values = await form.validateFields([\r\n        'banner_image',\r\n        'main_image',\r\n        'accreditation',\r\n        'location_type',\r\n        'name',\r\n        'location',\r\n        'type',\r\n        'learn_and_earn',\r\n        'is_public',\r\n        'industry',\r\n        'description',\r\n        'industry',\r\n        'financial_aid',\r\n        'credit',\r\n        'news',\r\n        'contact',\r\n        'pay',\r\n        'cost',\r\n        'topics',\r\n        'keywords',\r\n        'is_local_promo',\r\n        'is_main_promo',\r\n        'external_url',\r\n      ]);\r\n      let tokenData = JSON.parse(localStorage.getItem(\"currentSession\"));\r\n      \r\n      const { data, status } = await axiosInstance.put(\r\n        `/providers/${tokenData.role===\"provider\"?tokenData.provider_id :provider.id}`,\r\n        {\r\n          ...values,\r\n          topics: values.topics,\r\n          'banner_image': getBannerImage,\r\n          'main_image': getMainImage,\r\n          'description': descriptionValue\r\n        }\r\n      );\r\n      // const[handleData,setHandleData] = useState()\r\n      // setHandleData(data)\r\n\r\n      const fileable_type = 'provider';\r\n      let filePayload = [];\r\n      // console.log(\"filePayload\", filePayload)\r\n      if (data && userId) {\r\n        const providerEntity = providerStore.entities[data.id];\r\n        if(providerEntity.Files){\r\n          if(providerEntity.Files.length){\r\n            filePayload = [...providerEntity.Files];\r\n          }\r\n        }\r\n        if (onFileChange && newFile) {\r\n          const results = await UploaderService.uploadFile(newFile, {\r\n            uploaded_by_user_id: userId,\r\n            fileable_type,\r\n            fileable_id: data.id,\r\n          });\r\n          if (results && results.file.data) {\r\n            filePayload.push({\r\n              ...results.file.data,\r\n\r\n            });\r\n          }\r\n          if (results.success) {\r\n            notification.success({\r\n              message: 'Success',\r\n              description: 'Main image is uploaded',\r\n            });\r\n          }\r\n        }\r\n        if (onBannerFileChange && newBannerFile) {\r\n          const results = await UploaderService.uploadFile(newBannerFile, {\r\n            uploaded_by_user_id: userId,\r\n            fileable_type,\r\n            fileable_id: data.id,\r\n            meta: 'banner-image',\r\n          });\r\n          if (results && results.file.data) {\r\n            filePayload.push({\r\n              ...results.file.data,\r\n            });\r\n          }\r\n            if (results.success) {\r\n            notification.success({\r\n              message: 'Success',\r\n              description: 'Banner image is uploaded',\r\n            });\r\n          }\r\n        }\r\n\r\n        providerStore.updateOne(data);\r\n      }\r\n\r\n      let token = JSON.parse(localStorage.getItem(\"currentSession\"));\r\n      let user_role = token.role;\r\n\r\n      if (status === 200) {\r\n        if (filePayload.length) {\r\n          let clonedData = Object.assign(data);\r\n          clonedData.Files = filePayload;\r\n          providerStore.updateOne(clonedData);\r\n        }\r\n        notification.success({\r\n          message: status,\r\n          description: 'Successfully updated provider',\r\n        });\r\n        if(user_role===\"provider\"){\r\n          onCancel();\r\n        }else{\r\n          props.getProviderApi();\r\n          onCancel();\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const [getMainImage, setGetMainImage] = useState()\r\n  const [getBannerImage, setGetBannerImage] = useState()\r\n\r\n  const handleUpadteMain = (getMainImage) => {\r\n    setGetMainImage(getMainImage)\r\n    // setDeleteValue(getDeleteValue)\r\n  }\r\n  const handleUpadteBanner = (getBannerImage) => {\r\n    setGetBannerImage(getBannerImage)\r\n    // setDeleteValue(getDeleteValue)\r\n  }\r\n\r\n  const [descriptionValue, setDescriptionValue] = useState('');\r\n\r\n  const handleDescriptionValue = (value) => {\r\n    setDescriptionValue(value)\r\n  }\r\n\r\n  // console.log(\"00000000000000\", getMainImage, getBannerImage)\r\n  return (\r\n    <Modal\r\n      forceRender={true}\r\n      className=\"custom-modal\"\r\n      title={'Update Provider'}\r\n      visible={visible}\r\n      width={998}\r\n      bodyStyle={{ backgroundColor: '#f0f2f5', padding: 0 }}\r\n      footer={true}\r\n      onCancel={onCancel}\r\n      afterClose={() => {reset();}}>\r\n      <Form form={form} ref={formRef}>\r\n        <div className=\"p-6 overflow-y-auto\" style={{ maxHeight: '32rem' }}>\r\n          <ProviderForm\r\n            role={role}\r\n            datafields={datafields}\r\n            userId={userId}\r\n            onChangeUpload={onChangeFileUpload}\r\n            file={file}\r\n            bannerFile={bannerFile}\r\n            onChangeBannerUpload={onChangeBannerUpload}\r\n            handleUpadteMain={handleUpadteMain}\r\n            handleUpadteBanner={handleUpadteBanner}\r\n            handleData={provider}\r\n            descriptionValue={descriptionValue}\r\n            handleDescriptionValue={handleDescriptionValue}/>\r\n          <section className=\"mt-2\">\r\n            <label className=\"mb-2 block\">Offers - Table</label>\r\n            <Table\r\n              dataSource={Offers}\r\n              rowClassName={() => 'antd-row'}\r\n              className=\"ant-table-wrapper--responsive\"\r\n              rowKey=\"id\"\r\n              pagination={{ pageSize: 5 }}>\r\n              {renderColumns('Offer Name', 'Offer Description')}\r\n            </Table>\r\n          </section>\r\n          <section className=\"mt-2\">\r\n            <label className=\"mb-2 block\">Pathways - Table</label>\r\n            <Table\r\n              dataSource={Pathways}\r\n              rowKey=\"id\"\r\n              pagination={{ pageSize: 5 }}\r\n              className=\"ant-table-wrapper--responsive w-full\"\r\n              rowClassName={() => 'antd-row'}>\r\n              {renderColumns('Name', 'Description')}\r\n            </Table>\r\n          </section>\r\n        </div>\r\n        <section\r\n          className=\"bg-white px-6 pt-5 pb-1 flex justify-center\"\r\n          style={{\r\n            borderTop: '1px solid #f0f0f0',\r\n          }}>\r\n          <Button\r\n            className=\"mr-3 px-10 rounded\"\r\n            size=\"small\"\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            onClick={() => submitUpdate()}>\r\n            Update\r\n          </Button>\r\n          <Button\r\n            className=\"px-10 rounded\"\r\n            size=\"small\"\r\n            type=\"dashed\"\r\n            onClick={() => onCancel()}>\r\n            Cancel\r\n          </Button>\r\n        </section>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}