{"ast":null,"code":"import { lazy, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { getLoadable, isItReady } from '../loadable/loadable';\nimport { useMark } from '../loadable/marks';\nimport { isBackend } from '../utils/detectBackend';\nimport { es6import } from '../utils/utils';\nimport { streamContext } from './context';\n\nfunction loadLoadable(loadable, callback) {\n  var upd = function () {\n    return callback({});\n  };\n\n  loadable.loadIfNeeded().then(upd, upd);\n}\n\nfunction updateLoadable(loadable, callback) {\n  // support HMR\n  if (process.env.NODE_ENV === 'development') {\n    var upd_1 = function () {\n      return callback({});\n    };\n\n    loadable._probeChanges().then(function (changed) {\n      return changed && upd_1();\n    }, upd_1);\n  }\n}\n/**\n * react hook to wrap `import` with a tracker\n * used by {@link useImported}\n * @internal\n */\n\n\nexport function useLoadable(loadable, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var UID = useContext(streamContext);\n  var wasDone = loadable.done;\n\n  var _a = useState({}),\n      forceUpdate = _a[1];\n\n  useMemo(function () {\n    if (options.import !== false) {\n      if (options.track !== false) {\n        useMark(UID, loadable.mark);\n      }\n\n      if (!wasDone) {\n        loadLoadable(loadable, forceUpdate);\n      } else {\n        updateLoadable(loadable, forceUpdate);\n      }\n    }\n\n    return true;\n  }, [loadable, options.import, options.track]);\n\n  if (isBackend && !isItReady() && loadable.isLoading()) {\n    /* tslint:disable:next-line no-console */\n    console.error('react-imported-component: trying to render a component which is not ready. You should `await whenComponentsReady()`?');\n  } // use mark\n  // retry\n\n\n  var retry = useCallback(function () {\n    if (!loadable) {\n      return;\n    }\n\n    loadable.reset();\n    forceUpdate({});\n    updateLoadable(loadable, forceUpdate);\n  }, [loadable]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isBackend) {\n      if (!loadable.done) {\n        /* tslint:disable:next-line no-console */\n        console.error('react-imported-component: using not resolved loadable. You should `await whenComponentsReady()`.');\n      }\n    }\n  }\n\n  return useMemo(function () {\n    return {\n      loadable: loadable,\n      retry: retry,\n      update: forceUpdate\n    };\n  }, [loadable, retry, forceUpdate]);\n}\n/**\n * The code splitting hook\n * @param {Function} importer - an function with `import` inside it\n * @param {Function} [exportPicker] - a \"picker\" of the export inside\n * @param {HookOptions} options\n * @param {Boolean} [options.import=true] - should the component be imported. Allow to defer execution.\n * @param {Boolean} [options.track=true] - allows disabling tracking of components, isolating them to SSR\n *\n * @return {Object}\n *  - imported: if non empty - the data is loaded\n *  - error: if non empty - there is an error\n *  - loading: if true - then it's still loading\n *  - loadable: the under laying reference\n *  - retry: retry if case of failure\n *\n *  @see if you dont need precise control consider {@link useLazy}\n *\n *  @example\n *  const { imported: Imported, loadable } = useImported(importer);\n *  if (Imported) {\n *    // yep, it's imported\n *    return <Imported {...children} />;\n *  }\n *  // else throw resolution\n *  throw loadable.resolution;\n */\n\nexport function useImported(importer, exportPicker, options) {\n  if (exportPicker === void 0) {\n    exportPicker = es6import;\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var topLoadable = getLoadable(importer);\n\n  var _a = useLoadable(topLoadable, options),\n      loadable = _a.loadable,\n      retry = _a.retry;\n\n  var error = loadable.error,\n      done = loadable.done,\n      payload = loadable.payload;\n  var loading = loadable.isLoading();\n  return useMemo(function () {\n    if (error) {\n      return {\n        error: error,\n        loadable: loadable,\n        retry: retry\n      };\n    }\n\n    if (done) {\n      return {\n        imported: exportPicker(payload),\n        loadable: loadable,\n        retry: retry\n      };\n    }\n\n    return {\n      loading: loading,\n      loadable: loadable,\n      retry: retry\n    };\n  }, [error, loading, payload, loadable]);\n}\n/**\n * A mix of React.lazy and useImported - uses React.lazy for Component and `useImported` to track the promise\n * not \"retry\"-able\n * @see if you need precise control consider {@link useImported}\n * @example\n *  const Component = useLazy(() => import('./MyComponent');\n *  return <Component /> // throws to SuspenseBoundary if not ready\n */\n\nexport function useLazy(importer) {\n  var _a = useState(function () {\n    /* tslint:disable no-shadowed-variable */\n    var resolve;\n    var reject;\n    var promise = new Promise(function (rs, rej) {\n      resolve = rs;\n      reject = rej;\n    });\n    return {\n      resolve: resolve,\n      reject: reject,\n      lazyComponent: lazy(function () {\n        return promise;\n      })\n    };\n    /* tslint:enable */\n  })[0],\n      resolve = _a.resolve,\n      reject = _a.reject,\n      lazyComponent = _a.lazyComponent;\n\n  var _b = useImported(importer),\n      error = _b.error,\n      imported = _b.imported;\n\n  useEffect(function () {\n    if (error) {\n      reject(error);\n    }\n\n    if (imported) {\n      resolve(imported);\n    }\n  }, [error, imported]);\n  return lazyComponent;\n}","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/node_modules/react-imported-component/dist/es2015/ui/useImported.js"],"names":["lazy","useCallback","useContext","useEffect","useMemo","useState","getLoadable","isItReady","useMark","isBackend","es6import","streamContext","loadLoadable","loadable","callback","upd","loadIfNeeded","then","updateLoadable","process","env","NODE_ENV","upd_1","_probeChanges","changed","useLoadable","options","UID","wasDone","done","_a","forceUpdate","import","track","mark","isLoading","console","error","retry","reset","update","useImported","importer","exportPicker","topLoadable","payload","loading","imported","useLazy","resolve","reject","promise","Promise","rs","rej","lazyComponent","_b"],"mappings":"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","sourcesContent":["import { lazy, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { getLoadable, isItReady } from '../loadable/loadable';\nimport { useMark } from '../loadable/marks';\nimport { isBackend } from '../utils/detectBackend';\nimport { es6import } from '../utils/utils';\nimport { streamContext } from './context';\nfunction loadLoadable(loadable, callback) {\n    var upd = function () { return callback({}); };\n    loadable.loadIfNeeded().then(upd, upd);\n}\nfunction updateLoadable(loadable, callback) {\n    // support HMR\n    if (process.env.NODE_ENV === 'development') {\n        var upd_1 = function () { return callback({}); };\n        loadable._probeChanges().then(function (changed) { return changed && upd_1(); }, upd_1);\n    }\n}\n/**\n * react hook to wrap `import` with a tracker\n * used by {@link useImported}\n * @internal\n */\nexport function useLoadable(loadable, options) {\n    if (options === void 0) { options = {}; }\n    var UID = useContext(streamContext);\n    var wasDone = loadable.done;\n    var _a = useState({}), forceUpdate = _a[1];\n    useMemo(function () {\n        if (options.import !== false) {\n            if (options.track !== false) {\n                useMark(UID, loadable.mark);\n            }\n            if (!wasDone) {\n                loadLoadable(loadable, forceUpdate);\n            }\n            else {\n                updateLoadable(loadable, forceUpdate);\n            }\n        }\n        return true;\n    }, [loadable, options.import, options.track]);\n    if (isBackend && !isItReady() && loadable.isLoading()) {\n        /* tslint:disable:next-line no-console */\n        console.error('react-imported-component: trying to render a component which is not ready. You should `await whenComponentsReady()`?');\n    }\n    // use mark\n    // retry\n    var retry = useCallback(function () {\n        if (!loadable) {\n            return;\n        }\n        loadable.reset();\n        forceUpdate({});\n        updateLoadable(loadable, forceUpdate);\n    }, [loadable]);\n    if (process.env.NODE_ENV !== 'production') {\n        if (isBackend) {\n            if (!loadable.done) {\n                /* tslint:disable:next-line no-console */\n                console.error('react-imported-component: using not resolved loadable. You should `await whenComponentsReady()`.');\n            }\n        }\n    }\n    return useMemo(function () { return ({\n        loadable: loadable,\n        retry: retry,\n        update: forceUpdate,\n    }); }, [loadable, retry, forceUpdate]);\n}\n/**\n * The code splitting hook\n * @param {Function} importer - an function with `import` inside it\n * @param {Function} [exportPicker] - a \"picker\" of the export inside\n * @param {HookOptions} options\n * @param {Boolean} [options.import=true] - should the component be imported. Allow to defer execution.\n * @param {Boolean} [options.track=true] - allows disabling tracking of components, isolating them to SSR\n *\n * @return {Object}\n *  - imported: if non empty - the data is loaded\n *  - error: if non empty - there is an error\n *  - loading: if true - then it's still loading\n *  - loadable: the under laying reference\n *  - retry: retry if case of failure\n *\n *  @see if you dont need precise control consider {@link useLazy}\n *\n *  @example\n *  const { imported: Imported, loadable } = useImported(importer);\n *  if (Imported) {\n *    // yep, it's imported\n *    return <Imported {...children} />;\n *  }\n *  // else throw resolution\n *  throw loadable.resolution;\n */\nexport function useImported(importer, exportPicker, options) {\n    if (exportPicker === void 0) { exportPicker = es6import; }\n    if (options === void 0) { options = {}; }\n    var topLoadable = getLoadable(importer);\n    var _a = useLoadable(topLoadable, options), loadable = _a.loadable, retry = _a.retry;\n    var error = loadable.error, done = loadable.done, payload = loadable.payload;\n    var loading = loadable.isLoading();\n    return useMemo(function () {\n        if (error) {\n            return {\n                error: error,\n                loadable: loadable,\n                retry: retry,\n            };\n        }\n        if (done) {\n            return {\n                imported: exportPicker(payload),\n                loadable: loadable,\n                retry: retry,\n            };\n        }\n        return {\n            loading: loading,\n            loadable: loadable,\n            retry: retry,\n        };\n    }, [error, loading, payload, loadable]);\n}\n/**\n * A mix of React.lazy and useImported - uses React.lazy for Component and `useImported` to track the promise\n * not \"retry\"-able\n * @see if you need precise control consider {@link useImported}\n * @example\n *  const Component = useLazy(() => import('./MyComponent');\n *  return <Component /> // throws to SuspenseBoundary if not ready\n */\nexport function useLazy(importer) {\n    var _a = useState(function () {\n        /* tslint:disable no-shadowed-variable */\n        var resolve;\n        var reject;\n        var promise = new Promise(function (rs, rej) {\n            resolve = rs;\n            reject = rej;\n        });\n        return {\n            resolve: resolve,\n            reject: reject,\n            lazyComponent: lazy(function () { return promise; }),\n        };\n        /* tslint:enable */\n    })[0], resolve = _a.resolve, reject = _a.reject, lazyComponent = _a.lazyComponent;\n    var _b = useImported(importer), error = _b.error, imported = _b.imported;\n    useEffect(function () {\n        if (error) {\n            reject(error);\n        }\n        if (imported) {\n            resolve(imported);\n        }\n    }, [error, imported]);\n    return lazyComponent;\n}\n"]},"metadata":{},"sourceType":"module"}