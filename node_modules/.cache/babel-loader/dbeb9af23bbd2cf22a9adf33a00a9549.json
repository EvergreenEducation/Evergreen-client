{"ast":null,"code":"import _objectSpread from \"/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _sortBy from \"lodash/sortBy\";\nimport _map from \"lodash/map\";\nimport _head from \"lodash/head\";\nimport _reject from \"lodash/reject\";\nvar _jsxFileName = \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/PathwayCreationContainer.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Button, Form, notification } from 'antd';\nimport useAxios, { configure } from 'axios-hooks';\nimport axiosInstance from 'services/AxiosInstance';\nimport PathwayForm from 'components/pathway/PathwayForm';\nimport PathwayStore from 'store/Pathway';\nimport OfferStore from 'store/Offer';\nimport AuthService from 'services/AuthService';\nimport UploaderService from 'services/Uploader';\nimport useProviderDataFieldStore from 'components/provider/useProviderDataFieldStore';\nimport { useImageAndBannerImage } from 'hooks';\nconfigure({\n  axios: axiosInstance\n});\n\nconst PathwayCreationContainer = ({\n  closeModal,\n  role,\n  providerId\n}) => {\n  const userId = AuthService.currentSession.id;\n  const formRef = useRef(null);\n\n  const _useImageAndBannerIma = useImageAndBannerImage(),\n        _useImageAndBannerIma2 = _slicedToArray(_useImageAndBannerIma, 2),\n        _useImageAndBannerIma3 = _useImageAndBannerIma2[0],\n        file = _useImageAndBannerIma3.file,\n        onChangeFileUpload = _useImageAndBannerIma3.onChangeFileUpload,\n        _useImageAndBannerIma4 = _useImageAndBannerIma2[1],\n        bannerFile = _useImageAndBannerIma4.bannerFile,\n        onChangeBannerUpload = _useImageAndBannerIma4.onChangeBannerUpload;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        groupsOfOffers = _useState2[0],\n        setGroupsOfOffers = _useState2[1];\n\n  const _Form$useForm = Form.useForm(),\n        _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n        form = _Form$useForm2[0];\n\n  const pathwayStore = PathwayStore.useContainer();\n  const offerStore = OfferStore.useContainer();\n\n  const _useAxios = useAxios('/datafields'),\n        _useAxios2 = _slicedToArray(_useAxios, 1),\n        getDataFields = _useAxios2[0].data;\n\n  const _useAxios3 = useAxios('/offers'),\n        _useAxios4 = _slicedToArray(_useAxios3, 1),\n        getOffers = _useAxios4[0].data;\n\n  const _useAxios5 = useAxios('/providers'),\n        _useAxios6 = _slicedToArray(_useAxios5, 1),\n        getProviders = _useAxios6[0].data;\n\n  const _useAxios7 = useAxios({\n    url: '/pathways?scope=with_details',\n    method: 'POST'\n  }, {\n    manual: true\n  }),\n        _useAxios8 = _slicedToArray(_useAxios7, 2),\n        postError = _useAxios8[0].error,\n        createPathway = _useAxios8[1];\n\n  const store = useProviderDataFieldStore();\n  const datafieldStore = store.datafield,\n        providerStore = store.provider;\n\n  const submit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        const values = yield form.validateFields(['description', 'learn_and_earn', 'frequency', 'frequency_unit', 'name', 'topics', 'outlook', 'earnings', 'type', 'keywords', 'provider_id', 'is_local_promo', 'is_main_promo', 'external_url', 'Rubric_Attachments', 'Location_Type']);\n        let groupOrderByYearNum = [];\n\n        let groups_of_offers = _map(groupsOfOffers, g => {\n          const year = form.getFieldValue(g.group_name);\n          groupOrderByYearNum.push(g.group_name);\n          const results = {\n            group_name: g.group_name,\n            offer_ids: g.removed ? [] : _map(g.offers, 'offer_id'),\n            year\n          };\n          const semester = form.getFieldValue(`${g.group_name}_semester`);\n\n          if (semester) {\n            return _objectSpread(_objectSpread({}, results), {}, {\n              semester,\n              year\n            });\n          }\n\n          return results;\n        });\n\n        const groupOrder = yield form.validateFields(groupOrderByYearNum);\n        let yearSubmission = [];\n\n        for (const key in groupOrder) {\n          yearSubmission.push({\n            group_name: key,\n            year: groupOrder[key]\n          });\n        }\n\n        yearSubmission = _sortBy(yearSubmission, ['year']).map(({\n          group_name\n        }) => group_name);\n\n        const _yield$createPathway = yield createPathway({\n          data: _objectSpread(_objectSpread({}, values), {}, {\n            group_sort_order: yearSubmission,\n            groups_of_offers\n          })\n        }),\n              data = _yield$createPathway.data,\n              status = _yield$createPathway.status;\n\n        if (data) {\n          pathwayStore.addOne(data);\n        }\n\n        if (data && userId) {\n          const fileable_type = 'pathway';\n          let clonedResponse = Object.assign(data);\n          const filePayload = [];\n\n          if (file) {\n            const results = yield UploaderService.uploadFile(file, {\n              uploaded_by_user_id: userId,\n              fileable_type,\n              fileable_id: data.id\n            });\n\n            if (results && results.file.data) {\n              filePayload.push(_objectSpread({}, results.file.data));\n            }\n\n            if (results.success) {\n              notification.success({\n                message: 'Success',\n                description: 'Main image is uploaded'\n              });\n            }\n          }\n\n          if (bannerFile) {\n            const results = yield UploaderService.uploadFile(bannerFile, {\n              uploaded_by_user_id: userId,\n              fileable_type,\n              fileable_id: data.id,\n              meta: 'banner-image'\n            });\n\n            if (results && results.file.data) {\n              filePayload.push(_objectSpread({}, results.file.data));\n            }\n\n            if (results.success) {\n              notification.success({\n                message: 'Success',\n                description: 'Banner image is uploaded'\n              });\n            }\n          }\n\n          clonedResponse.Files = [...filePayload];\n          pathwayStore.updateOne(clonedResponse);\n        }\n\n        if (data && status === 201) {\n          notification.success({\n            message: status,\n            description: 'Successfully created pathway'\n          });\n          form.resetFields();\n          closeModal();\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    });\n\n    return function submit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  let providerEntities = Object.values(providerStore.entities);\n  useEffect(() => {\n    if (formRef.current && role === 'provider') {\n      providerEntities = _reject(providerEntities, p => {\n        return !(p.id === providerId);\n      });\n      form.setFieldsValue({\n        provider_id: _head(providerEntities).id\n      });\n    }\n\n    if (getDataFields) {\n      datafieldStore.addMany(getDataFields);\n    }\n\n    if (postError) {\n      const _postError$request = postError.request,\n            status = _postError$request.status,\n            statusText = _postError$request.statusText;\n      notification.error({\n        message: status,\n        description: statusText\n      });\n    }\n\n    if (getOffers) {\n      offerStore.addMany(getOffers);\n    }\n\n    if (getProviders) {\n      providerStore.addMany(getProviders);\n    }\n  }, [getDataFields, postError, getProviders, formRef]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    ref: formRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-6 overflow-y-auto\",\n    style: {\n      maxHeight: '32rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PathwayForm, {\n    datafields: datafieldStore.entities,\n    offers: Object.values(offerStore.entities),\n    groupsOfOffers: groupsOfOffers,\n    setGroupsOfOffers: setGroupsOfOffers,\n    userId: userId,\n    onChangeUpload: onChangeFileUpload,\n    onChangeBannerUpload: onChangeBannerUpload,\n    file: file,\n    bannerFile: bannerFile,\n    providers: providerEntities,\n    role: role,\n    form: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"bg-white px-6 pt-5 pb-1 flex justify-center\",\n    style: {\n      borderTop: '1px solid #f0f0f0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"mr-3 px-10 rounded\",\n    type: \"primary\",\n    size: \"small\",\n    htmlType: \"submit\",\n    onClick: submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  }, \"Create\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"px-10 rounded\",\n    size: \"small\",\n    type: \"dashed\",\n    onClick: () => closeModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))));\n};\n\n__signature__(PathwayCreationContainer, \"useRef{formRef}\\nuseImageAndBannerImage{[\\r\\n    { file, onChangeFileUpload },\\r\\n    { bannerFile, onChangeBannerUpload },\\r\\n  ]}\\nuseState{[groupsOfOffers, setGroupsOfOffers]([])}\\nuseForm{[form]}\\nuseContainer{pathwayStore}\\nuseContainer{offerStore}\\nuseAxios{[{ data: getDataFields }]}\\nuseAxios{[{ data: getOffers }]}\\nuseAxios{[{ data: getProviders }]}\\nuseAxios{[{ error: postError }, createPathway]}\\nuseProviderDataFieldStore{store}\\nuseEffect{}\", () => [useImageAndBannerImage, useAxios, useAxios, useAxios, useAxios, useProviderDataFieldStore]);\n\nconst _default = PathwayCreationContainer;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(PathwayCreationContainer, \"PathwayCreationContainer\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/PathwayCreationContainer.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/PathwayCreationContainer.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/pathway/PathwayCreationContainer.js"],"names":["React","useEffect","useState","useRef","Button","Form","notification","useAxios","configure","axiosInstance","PathwayForm","PathwayStore","OfferStore","AuthService","UploaderService","useProviderDataFieldStore","useImageAndBannerImage","axios","PathwayCreationContainer","closeModal","role","providerId","userId","currentSession","id","formRef","file","onChangeFileUpload","bannerFile","onChangeBannerUpload","groupsOfOffers","setGroupsOfOffers","useForm","form","pathwayStore","useContainer","offerStore","getDataFields","data","getOffers","getProviders","url","method","manual","postError","error","createPathway","store","datafieldStore","datafield","providerStore","provider","submit","values","validateFields","groupOrderByYearNum","groups_of_offers","g","year","getFieldValue","group_name","push","results","offer_ids","removed","offers","semester","groupOrder","yearSubmission","key","map","group_sort_order","status","addOne","fileable_type","clonedResponse","Object","assign","filePayload","uploadFile","uploaded_by_user_id","fileable_id","success","message","description","meta","Files","updateOne","resetFields","err","console","providerEntities","entities","current","p","setFieldsValue","provider_id","addMany","request","statusText","maxHeight","borderTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { Button, Form, notification } from 'antd';\r\nimport useAxios, { configure } from 'axios-hooks';\r\nimport axiosInstance from 'services/AxiosInstance';\r\nimport PathwayForm from 'components/pathway/PathwayForm';\r\nimport PathwayStore from 'store/Pathway';\r\nimport { reject, head, map, sortBy } from 'lodash';\r\nimport OfferStore from 'store/Offer';\r\nimport AuthService from 'services/AuthService';\r\nimport UploaderService from 'services/Uploader';\r\nimport useProviderDataFieldStore from 'components/provider/useProviderDataFieldStore';\r\nimport { useImageAndBannerImage } from 'hooks';\r\n\r\nconfigure({\r\n  axios: axiosInstance,\r\n});\r\n\r\nconst PathwayCreationContainer = ({ closeModal, role, providerId }) => {\r\n  const { id: userId } = AuthService.currentSession;\r\n  const formRef = useRef(null);\r\n\r\n  const [\r\n    { file, onChangeFileUpload },\r\n    { bannerFile, onChangeBannerUpload },\r\n  ] = useImageAndBannerImage();\r\n\r\n  const [groupsOfOffers, setGroupsOfOffers] = useState([]);\r\n  const [form] = Form.useForm();\r\n  const pathwayStore = PathwayStore.useContainer();\r\n  const offerStore = OfferStore.useContainer();\r\n\r\n  const [{ data: getDataFields }] = useAxios('/datafields');\r\n\r\n  const [{ data: getOffers }] = useAxios('/offers');\r\n\r\n  const [{ data: getProviders }] = useAxios('/providers');\r\n\r\n  const [{ error: postError }, createPathway] = useAxios(\r\n    {\r\n      url: '/pathways?scope=with_details',\r\n      method: 'POST',\r\n    },\r\n    { manual: true }\r\n  );\r\n\r\n  const store = useProviderDataFieldStore();\r\n  const { datafield: datafieldStore, provider: providerStore } = store;\r\n\r\n  const submit = async () => {\r\n    try {\r\n      const values = await form.validateFields([\r\n        'description',\r\n        'learn_and_earn',\r\n        'frequency',\r\n        'frequency_unit',\r\n        'name',\r\n        'topics',\r\n        'outlook',\r\n        'earnings',\r\n        'type',\r\n        'keywords',\r\n        'provider_id',\r\n        'is_local_promo',\r\n        'is_main_promo',\r\n        'external_url',\r\n        'Rubric_Attachments',\r\n        'Location_Type'\r\n      ]);\r\n\r\n      let groupOrderByYearNum = [];\r\n      let groups_of_offers = map(groupsOfOffers, (g) => {\r\n        const year = form.getFieldValue(g.group_name);\r\n        groupOrderByYearNum.push(g.group_name);\r\n        const results = {\r\n          group_name: g.group_name,\r\n          offer_ids: g.removed ? [] : map(g.offers, 'offer_id'),\r\n          year,\r\n        };\r\n        const semester = form.getFieldValue(`${g.group_name}_semester`);\r\n\r\n        if (semester) {\r\n          return {\r\n            ...results,\r\n            semester,\r\n            year,\r\n          };\r\n        }\r\n\r\n        return results;\r\n      });\r\n\r\n      const groupOrder = await form.validateFields(groupOrderByYearNum);\r\n      let yearSubmission = [];\r\n      for (const key in groupOrder) {\r\n        yearSubmission.push({\r\n          group_name: key,\r\n          year: groupOrder[key],\r\n        });\r\n      }\r\n\r\n      yearSubmission = sortBy(yearSubmission, ['year']).map(\r\n        ({ group_name }) => group_name\r\n      );\r\n\r\n      const { data, status } = await createPathway({\r\n        data: {\r\n          ...values,\r\n          group_sort_order: yearSubmission,\r\n          groups_of_offers,\r\n        },\r\n      });\r\n\r\n      if (data) {\r\n        pathwayStore.addOne(data);\r\n      }\r\n\r\n      if (data && userId) {\r\n        const fileable_type = 'pathway';\r\n        let clonedResponse = Object.assign(data);\r\n        const filePayload = [];\r\n        if (file) {\r\n          const results = await UploaderService.uploadFile(file, {\r\n            uploaded_by_user_id: userId,\r\n            fileable_type,\r\n            fileable_id: data.id,\r\n          });\r\n\r\n          if (results && results.file.data) {\r\n            filePayload.push({ ...results.file.data });\r\n          }\r\n\r\n          if (results.success) {\r\n            notification.success({\r\n              message: 'Success',\r\n              description: 'Main image is uploaded',\r\n            });\r\n          }\r\n        }\r\n        if (bannerFile) {\r\n          const results = await UploaderService.uploadFile(bannerFile, {\r\n            uploaded_by_user_id: userId,\r\n            fileable_type,\r\n            fileable_id: data.id,\r\n            meta: 'banner-image',\r\n          });\r\n\r\n          if (results && results.file.data) {\r\n            filePayload.push({ ...results.file.data });\r\n          }\r\n\r\n          if (results.success) {\r\n            notification.success({\r\n              message: 'Success',\r\n              description: 'Banner image is uploaded',\r\n            });\r\n          }\r\n        }\r\n        clonedResponse.Files = [...filePayload];\r\n        pathwayStore.updateOne(clonedResponse);\r\n      }\r\n\r\n      if (data && status === 201) {\r\n        notification.success({\r\n          message: status,\r\n          description: 'Successfully created pathway',\r\n        });\r\n        form.resetFields();\r\n        closeModal();\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  let providerEntities = Object.values(providerStore.entities);\r\n\r\n  useEffect(() => {\r\n    if (formRef.current && role === 'provider') {\r\n      providerEntities = reject(providerEntities, (p) => {\r\n        return !(p.id === providerId);\r\n      });\r\n\r\n      form.setFieldsValue({\r\n        provider_id: head(providerEntities).id,\r\n      });\r\n    }\r\n    if (getDataFields) {\r\n      datafieldStore.addMany(getDataFields);\r\n    }\r\n    if (postError) {\r\n      const { status, statusText } = postError.request;\r\n      notification.error({\r\n        message: status,\r\n        description: statusText,\r\n      });\r\n    }\r\n    if (getOffers) {\r\n      offerStore.addMany(getOffers);\r\n    }\r\n    if (getProviders) {\r\n      providerStore.addMany(getProviders);\r\n    }\r\n  }, [getDataFields, postError, getProviders, formRef]);\r\n\r\n  return (\r\n    <div>\r\n      <Form form={form} ref={formRef}>\r\n        <div className=\"p-6 overflow-y-auto\" style={{ maxHeight: '32rem' }}>\r\n          <PathwayForm\r\n            datafields={datafieldStore.entities}\r\n            offers={Object.values(offerStore.entities)}\r\n            groupsOfOffers={groupsOfOffers}\r\n            setGroupsOfOffers={setGroupsOfOffers}\r\n            userId={userId}\r\n            onChangeUpload={onChangeFileUpload}\r\n            onChangeBannerUpload={onChangeBannerUpload}\r\n            file={file}\r\n            bannerFile={bannerFile}\r\n            providers={providerEntities}\r\n            role={role}\r\n            form={form}\r\n          />\r\n        </div>\r\n        <section\r\n          className=\"bg-white px-6 pt-5 pb-1 flex justify-center\"\r\n          style={{\r\n            borderTop: '1px solid #f0f0f0',\r\n          }}\r\n        >\r\n          <Button\r\n            className=\"mr-3 px-10 rounded\"\r\n            type=\"primary\"\r\n            size=\"small\"\r\n            htmlType=\"submit\"\r\n            onClick={submit}\r\n          >\r\n            Create\r\n          </Button>\r\n          <Button\r\n            className=\"px-10 rounded\"\r\n            size=\"small\"\r\n            type=\"dashed\"\r\n            onClick={() => closeModal()}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </section>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PathwayCreationContainer;\r\n"]},"metadata":{},"sourceType":"module"}