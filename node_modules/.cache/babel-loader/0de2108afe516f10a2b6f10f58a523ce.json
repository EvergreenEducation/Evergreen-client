{"ast":null,"code":"import _asyncToGenerator from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _compact from \"lodash/compact\";\nimport _last from \"lodash/last\";\nimport _property from \"lodash/property\";\nimport _uniqueId from \"lodash/uniqueId\";\nimport _mapValues from \"lodash/mapValues\";\nimport _flow from \"lodash/flow\";\nimport _sortBy from \"lodash/sortBy\";\nimport _filter from \"lodash/filter\";\nimport _groupBy from \"lodash/groupBy\";\nimport _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/devnineteen/Music/evergreen-frontend/src/components/student/StudentDashboard/StudentDashboard.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Alert } from 'antd';\nimport useAxios, { configure } from 'axios-hooks';\nimport axiosInstance from 'services/AxiosInstance';\nimport useGlobalStore from 'store/GlobalStore';\nimport { TitleDivider } from 'components/shared';\nimport { InfoCard } from 'components/student';\nimport UserPathwayContainer from 'components/student/user-pathway/UserPathwayContainer';\nimport './student-dashboard.scss';\nconfigure({\n  axios: axiosInstance\n});\n\nconst _default = function _default(props) {\n  const _props$session = props.session,\n        session = _props$session === void 0 ? {} : _props$session;\n  const studentId = session.student_id;\n\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        student = _useState2[0],\n        setStudent = _useState2[1];\n\n  const _useAxios = useAxios(`/students/${studentId}?scope=with_details`),\n        _useAxios2 = _slicedToArray(_useAxios, 1),\n        studentPayload = _useAxios2[0].data;\n\n  const _useGlobalStore = useGlobalStore(),\n        offerStore = _useGlobalStore.offer,\n        pathwayStore = _useGlobalStore.pathway,\n        enrollmentStore = _useGlobalStore.enrollment,\n        datafield = _useGlobalStore.datafield;\n\n  const groupedDataFields = _groupBy(datafield.entities, _property('type'));\n\n  function getPathway(_x) {\n    return _getPathway.apply(this, arguments);\n  }\n\n  function _getPathway() {\n    _getPathway = _asyncToGenerator(function* (pathwayId) {\n      const response = yield axiosInstance.get(`/pathways/${pathwayId}?scope=with_details`);\n      pathwayStore.addOne(response.data);\n    });\n    return _getPathway.apply(this, arguments);\n  }\n\n  function getOffer(_x2) {\n    return _getOffer.apply(this, arguments);\n  }\n\n  function _getOffer() {\n    _getOffer = _asyncToGenerator(function* (offerId) {\n      const response = yield axiosInstance.get(`/offers/${offerId}?scope=with_details`);\n      offerStore.addOne(response.data);\n    });\n    return _getOffer.apply(this, arguments);\n  }\n\n  const getEnrollments = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (studentId) {\n      if (!studentId) {\n        return null;\n      }\n\n      if (!Object.keys(enrollmentStore.entities).length) {\n        const studentEnrollments = yield axiosInstance.get(`/enrollments?student_id=${studentId}`);\n        const unenrollments = yield axiosInstance.get(`/enrollments?student_id=${null}`);\n\n        if (studentEnrollments.data.length) {\n          enrollmentStore.addMany(studentEnrollments.data);\n        }\n\n        if (unenrollments.data.length) {\n          enrollmentStore.addMany(unenrollments.data);\n        }\n      }\n    });\n\n    return function getEnrollments(_x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  let completedEnrollments = [];\n  let enrollmentsByOfferId = [];\n  let myEnrollments = [];\n  const enrollmentEntities = Object.values(enrollmentStore.entities);\n\n  if (studentId) {\n    for (let i = 0; i < enrollmentEntities.length; i++) {\n      if (!enrollmentEntities[i]) {\n        break;\n      }\n\n      if (enrollmentEntities[i].status === 'Completed' && enrollmentEntities[i].student_id === studentId) {\n        completedEnrollments.push(enrollmentEntities[i]);\n      }\n\n      if (enrollmentEntities[i].student_id === null) {\n        enrollmentsByOfferId.push(enrollmentEntities[i]);\n      }\n\n      if (enrollmentEntities[i].student_id === studentId) {\n        myEnrollments.push(enrollmentEntities[i]);\n        enrollmentsByOfferId.push(enrollmentEntities[i]);\n      }\n    }\n  }\n\n  completedEnrollments = _groupBy(completedEnrollments, 'offer_id');\n  enrollmentsByOfferId = _groupBy(enrollmentsByOfferId, 'offer_id');\n  myEnrollments = _flow([enrs => _groupBy(enrs, 'offer_id'), enrs => _mapValues(enrs, enr => _sortBy(enr, ['start_date', 'updatedAt']))])(myEnrollments);\n  useEffect(() => {\n    if (studentPayload) {\n      const isNewStudentInfo = _isEqual(student, studentPayload);\n\n      if (!isNewStudentInfo) {\n        setStudent(studentPayload);\n      }\n    }\n\n    getEnrollments(studentId);\n  }, [studentPayload]);\n\n  let offerIds = _filter(student.Enrollments || [], ['status', 'Activated']);\n\n  offerIds = _groupBy(offerIds, 'offer_id');\n  offerIds = Object.keys(offerIds);\n\n  if (student.StudentPathways) {\n    for (let i = 0; i < student.StudentPathways.length; i++) {\n      const newOfferIds = [];\n\n      if (student.StudentPathways[i].StudentPathway) {\n        const pathwayId = student.StudentPathways[i].StudentPathway.pathway_id;\n        const _pathway = pathwayStore.entities[pathwayId];\n\n        let groupOffers = _groupBy(_pathway.GroupsOfOffers, 'offer_id');\n\n        groupOffers = Object.keys(groupOffers).sort((a, b) => Number(a) - Number(b));\n\n        for (let j = 0; j <= offerIds.length; j++) {\n          if (!groupOffers.includes(offerIds[j])) {\n            newOfferIds.push(offerIds[j]);\n          }\n        }\n\n        offerIds = _compact(newOfferIds);\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"main\", {\n    className: \"pb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TitleDivider, {\n    title: 'Enrolled Pathways',\n    align: \"center\",\n    classNames: {\n      middleSpan: 'text-base'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }), student && student.StudentPathways && student.StudentPathways.length && student.StudentPathways.map((pathway, idx) => {\n    const pathwayEntity = pathwayStore.entities[pathway.id];\n\n    if (!pathwayEntity) {\n      getPathway(pathway.id);\n    }\n\n    return /*#__PURE__*/React.createElement(UserPathwayContainer, Object.assign({}, props, {\n      key: idx,\n      pathway: pathwayEntity,\n      student: student,\n      completedEnrollments: completedEnrollments,\n      enrollmentsByOfferId: enrollmentsByOfferId,\n      myEnrollments: myEnrollments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }));\n  }) || /*#__PURE__*/React.createElement(Alert, {\n    className: \"mx-auto text-center rounded\",\n    type: \"info\",\n    message: \"You haven't enrolled in any pathways yet.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TitleDivider, {\n    title: 'Enrolled Offers',\n    align: \"center\",\n    classNames: {\n      middleSpan: 'text-base'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }), offerIds.length && offerIds.map((offerId, index) => {\n    offerId = Number(offerId);\n    const offer = offerStore.entities[offerId];\n    let p = null;\n    let latestEnrollment = null;\n\n    if (!offer) {\n      getOffer(offerId);\n    }\n\n    if (offer && offer.provider_id) {\n      p = offer.Provider;\n    }\n\n    if (offerId && myEnrollments[offerId]) {\n      latestEnrollment = _last(myEnrollments[offerId]);\n    }\n\n    return offer && offer.id ? /*#__PURE__*/React.createElement(Link, {\n      to: `/home/offer/${offer.id}`,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InfoCard, {\n      className: \"mb-4\",\n      data: offer,\n      provider: p,\n      key: _uniqueId('card_'),\n      groupedDataFields: groupedDataFields,\n      latestEnrollment: latestEnrollment,\n      enableStatus: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    })) : null;\n  }) || /*#__PURE__*/React.createElement(Alert, {\n    className: \"mx-auto text-center rounded\",\n    type: \"info\",\n    message: \"You haven't enrolled in any offers yet.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }));\n};\n\n__signature__(_default, \"useState{[student, setStudent]({})}\\nuseAxios{[{ data: studentPayload }]}\\nuseGlobalStore{{\\r\\n    offer: offerStore,\\r\\n    pathway: pathwayStore,\\r\\n    enrollment: enrollmentStore,\\r\\n    datafield,\\r\\n  }}\\nuseEffect{}\", () => [useAxios, useGlobalStore]);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_default, \"default\", \"/home/devnineteen/Music/evergreen-frontend/src/components/student/StudentDashboard/StudentDashboard.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/src/components/student/StudentDashboard/StudentDashboard.js"],"names":["React","useEffect","useState","Link","Alert","useAxios","configure","axiosInstance","useGlobalStore","TitleDivider","InfoCard","UserPathwayContainer","axios","props","session","studentId","student_id","student","setStudent","studentPayload","data","offerStore","offer","pathwayStore","pathway","enrollmentStore","enrollment","datafield","groupedDataFields","entities","getPathway","pathwayId","response","get","addOne","getOffer","offerId","getEnrollments","Object","keys","length","studentEnrollments","unenrollments","addMany","completedEnrollments","enrollmentsByOfferId","myEnrollments","enrollmentEntities","values","i","status","push","enrs","enr","isNewStudentInfo","offerIds","Enrollments","StudentPathways","newOfferIds","StudentPathway","pathway_id","_pathway","groupOffers","GroupsOfOffers","sort","a","b","Number","j","includes","middleSpan","map","idx","pathwayEntity","id","index","p","latestEnrollment","provider_id","Provider"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Alert } from 'antd';\r\nimport useAxios, { configure } from 'axios-hooks';\r\nimport {\r\n  isEqual,\r\n  groupBy,\r\n  filter,\r\n  sortBy,\r\n  flow,\r\n  mapValues,\r\n  uniqueId,\r\n  property,\r\n  last,\r\n  compact,\r\n} from 'lodash';\r\nimport axiosInstance from 'services/AxiosInstance';\r\nimport useGlobalStore from 'store/GlobalStore';\r\nimport { TitleDivider } from 'components/shared';\r\nimport { InfoCard } from 'components/student';\r\nimport UserPathwayContainer from 'components/student/user-pathway/UserPathwayContainer';\r\nimport './student-dashboard.scss';\r\n\r\nconfigure({\r\n  axios: axiosInstance,\r\n});\r\n\r\nexport default function (props) {\r\n  const { session = {} } = props;\r\n  const studentId = session.student_id;\r\n  const [student, setStudent] = useState({});\r\n  const [{ data: studentPayload }] = useAxios(\r\n    `/students/${studentId}?scope=with_details`\r\n  );\r\n  const {\r\n    offer: offerStore,\r\n    pathway: pathwayStore,\r\n    enrollment: enrollmentStore,\r\n    datafield,\r\n  } = useGlobalStore();\r\n\r\n  const groupedDataFields = groupBy(datafield.entities, property('type'));\r\n\r\n  async function getPathway(pathwayId) {\r\n    const response = await axiosInstance.get(\r\n      `/pathways/${pathwayId}?scope=with_details`\r\n    );\r\n    pathwayStore.addOne(response.data);\r\n  }\r\n\r\n  async function getOffer(offerId) {\r\n    const response = await axiosInstance.get(\r\n      `/offers/${offerId}?scope=with_details`\r\n    );\r\n    offerStore.addOne(response.data);\r\n  }\r\n\r\n  const getEnrollments = async (studentId) => {\r\n    if (!studentId) {\r\n      return null;\r\n    }\r\n\r\n    if (!Object.keys(enrollmentStore.entities).length) {\r\n      const studentEnrollments = await axiosInstance.get(\r\n        `/enrollments?student_id=${studentId}`\r\n      );\r\n\r\n      const unenrollments = await axiosInstance.get(\r\n        `/enrollments?student_id=${null}`\r\n      );\r\n\r\n      if (studentEnrollments.data.length) {\r\n        enrollmentStore.addMany(studentEnrollments.data);\r\n      }\r\n\r\n      if (unenrollments.data.length) {\r\n        enrollmentStore.addMany(unenrollments.data);\r\n      }\r\n    }\r\n  };\r\n\r\n  let completedEnrollments = [];\r\n  let enrollmentsByOfferId = [];\r\n  let myEnrollments = [];\r\n  const enrollmentEntities = Object.values(enrollmentStore.entities);\r\n\r\n  if (studentId) {\r\n    for (let i = 0; i < enrollmentEntities.length; i++) {\r\n      if (!enrollmentEntities[i]) {\r\n        break;\r\n      }\r\n\r\n      if (\r\n        enrollmentEntities[i].status === 'Completed' &&\r\n        enrollmentEntities[i].student_id === studentId\r\n      ) {\r\n        completedEnrollments.push(enrollmentEntities[i]);\r\n      }\r\n\r\n      if (enrollmentEntities[i].student_id === null) {\r\n        enrollmentsByOfferId.push(enrollmentEntities[i]);\r\n      }\r\n\r\n      if (enrollmentEntities[i].student_id === studentId) {\r\n        myEnrollments.push(enrollmentEntities[i]);\r\n        enrollmentsByOfferId.push(enrollmentEntities[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  completedEnrollments = groupBy(completedEnrollments, 'offer_id');\r\n  enrollmentsByOfferId = groupBy(enrollmentsByOfferId, 'offer_id');\r\n  myEnrollments = flow([\r\n    (enrs) => groupBy(enrs, 'offer_id'),\r\n    (enrs) =>\r\n      mapValues(enrs, (enr) => sortBy(enr, ['start_date', 'updatedAt'])),\r\n  ])(myEnrollments);\r\n\r\n  useEffect(() => {\r\n    if (studentPayload) {\r\n      const isNewStudentInfo = isEqual(student, studentPayload);\r\n      if (!isNewStudentInfo) {\r\n        setStudent(studentPayload);\r\n      }\r\n    }\r\n    getEnrollments(studentId);\r\n  }, [studentPayload]);\r\n\r\n  let offerIds = filter(student.Enrollments || [], ['status', 'Activated']);\r\n  offerIds = groupBy(offerIds, 'offer_id');\r\n  offerIds = Object.keys(offerIds);\r\n\r\n  if (student.StudentPathways) {\r\n    for (let i = 0; i < student.StudentPathways.length; i++) {\r\n      const newOfferIds = [];\r\n      if (student.StudentPathways[i].StudentPathway) {\r\n        const pathwayId = student.StudentPathways[i].StudentPathway.pathway_id;\r\n        const _pathway = pathwayStore.entities[pathwayId];\r\n        let groupOffers = groupBy(_pathway.GroupsOfOffers, 'offer_id');\r\n        groupOffers = Object.keys(groupOffers).sort(\r\n          (a, b) => Number(a) - Number(b)\r\n        );\r\n\r\n        for (let j = 0; j <= offerIds.length; j++) {\r\n          if (!groupOffers.includes(offerIds[j])) {\r\n            newOfferIds.push(offerIds[j]);\r\n          }\r\n        }\r\n\r\n        offerIds = compact(newOfferIds);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main className=\"pb-4\">\r\n      <TitleDivider\r\n        title={'Enrolled Pathways'}\r\n        align=\"center\"\r\n        classNames={{ middleSpan: 'text-base' }}\r\n      />\r\n      {(student &&\r\n        student.StudentPathways &&\r\n        student.StudentPathways.length &&\r\n        student.StudentPathways.map((pathway, idx) => {\r\n          const pathwayEntity = pathwayStore.entities[pathway.id];\r\n          if (!pathwayEntity) {\r\n            getPathway(pathway.id);\r\n          }\r\n          return (\r\n            <UserPathwayContainer\r\n              {...props}\r\n              key={idx}\r\n              pathway={pathwayEntity}\r\n              student={student}\r\n              completedEnrollments={completedEnrollments}\r\n              enrollmentsByOfferId={enrollmentsByOfferId}\r\n              myEnrollments={myEnrollments}\r\n            />\r\n          );\r\n        })) || (\r\n        <Alert\r\n          className=\"mx-auto text-center rounded\"\r\n          type=\"info\"\r\n          message=\"You haven't enrolled in any pathways yet.\"\r\n        />\r\n      )}\r\n      <TitleDivider\r\n        title={'Enrolled Offers'}\r\n        align=\"center\"\r\n        classNames={{ middleSpan: 'text-base' }}\r\n      />\r\n      {(offerIds.length &&\r\n        offerIds.map((offerId, index) => {\r\n          offerId = Number(offerId);\r\n          const offer = offerStore.entities[offerId];\r\n          let p = null;\r\n          let latestEnrollment = null;\r\n          if (!offer) {\r\n            getOffer(offerId);\r\n          }\r\n          if (offer && offer.provider_id) {\r\n            p = offer.Provider;\r\n          }\r\n          if (offerId && myEnrollments[offerId]) {\r\n            latestEnrollment = last(myEnrollments[offerId]);\r\n          }\r\n          return offer && offer.id ? (\r\n            <Link to={`/home/offer/${offer.id}`} key={index}>\r\n              <InfoCard\r\n                className=\"mb-4\"\r\n                data={offer}\r\n                provider={p}\r\n                key={uniqueId('card_')}\r\n                groupedDataFields={groupedDataFields}\r\n                latestEnrollment={latestEnrollment}\r\n                enableStatus={true}\r\n              />\r\n            </Link>\r\n          ) : null;\r\n        })) || (\r\n        <Alert\r\n          className=\"mx-auto text-center rounded\"\r\n          type=\"info\"\r\n          message=\"You haven't enrolled in any offers yet.\"\r\n        />\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}