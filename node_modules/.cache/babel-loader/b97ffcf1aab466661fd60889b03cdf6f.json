{"ast":null,"code":"var _class, _temp;\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\n * This plugin is currently a A Big Hack™! The core reason for that is how this plugin\n * interacts with Uppy's current pipeline design. The pipeline can handle files in steps,\n * including preprocessing, uploading, and postprocessing steps. This plugin initially\n * was designed to do its work in a preprocessing step, and let XHRUpload deal with the\n * actual file upload as an uploading step. However, Uppy runs steps on all files at once,\n * sequentially: first, all files go through a preprocessing step, then, once they are all\n * done, they go through the uploading step.\n *\n * For S3, this causes severely broken behaviour when users upload many files. The\n * preprocessing step will request S3 upload URLs that are valid for a short time only,\n * but it has to do this for _all_ files, which can take a long time if there are hundreds\n * or even thousands of files. By the time the uploader step starts, the first URLs may\n * already have expired. If not, the uploading might take such a long time that later URLs\n * will expire before some files can be uploaded.\n *\n * The long-term solution to this problem is to change the upload pipeline so that files\n * can be sent to the next step individually. That requires a breakig change, so it is\n * planned for Uppy v2.\n *\n * In the mean time, this plugin is stuck with a hackier approach: the necessary parts\n * of the XHRUpload implementation were copied into this plugin, as the MiniXHRUpload\n * class, and this plugin calls into it immediately once it receives an upload URL.\n * This isn't as nicely modular as we'd like and requires us to maintain two copies of\n * the XHRUpload code, but at least it's not horrifically broken :)\n */\n// If global `URL` constructor is available, use it\n\n\nvar URL_ = typeof URL === 'function' ? URL : require('url-parse');\n\nvar _require = require('@uppy/core'),\n    Plugin = _require.Plugin;\n\nvar RateLimitedQueue = require('@uppy/utils/lib/RateLimitedQueue');\n\nvar settle = require('@uppy/utils/lib/settle');\n\nvar hasProperty = require('@uppy/utils/lib/hasProperty');\n\nvar _require2 = require('@uppy/companion-client'),\n    RequestClient = _require2.RequestClient;\n\nvar qsStringify = require('qs-stringify');\n\nvar MiniXHRUpload = require('./MiniXHRUpload');\n\nvar isXml = require('./isXml');\n\nfunction resolveUrl(origin, link) {\n  return origin ? new URL_(link, origin).toString() : new URL_(link).toString();\n}\n/**\n * Get the contents of a named tag in an XML source string.\n *\n * @param {string} source - The XML source string.\n * @param {string} tagName - The name of the tag.\n * @returns {string} The contents of the tag, or the empty string if the tag does not exist.\n */\n\n\nfunction getXmlValue(source, tagName) {\n  var start = source.indexOf(\"<\" + tagName + \">\");\n  var end = source.indexOf(\"</\" + tagName + \">\", start);\n  return start !== -1 && end !== -1 ? source.slice(start + tagName.length + 2, end) : '';\n}\n\nfunction assertServerError(res) {\n  if (res && res.error) {\n    var error = new Error(res.message);\n\n    _extends(error, res.error);\n\n    throw error;\n  }\n\n  return res;\n} // warning deduplication flag: see `getResponseData()` XHRUpload option definition\n\n\nvar warnedSuccessActionStatus = false;\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\n  _inheritsLoose(AwsS3, _Plugin);\n\n  function AwsS3(uppy, opts) {\n    var _this;\n\n    _this = _Plugin.call(this, uppy, opts) || this;\n    _this.type = 'uploader';\n    _this.id = _this.opts.id || 'AwsS3';\n    _this.title = 'AWS S3';\n    var defaultOptions = {\n      timeout: 30 * 1000,\n      limit: 0,\n      metaFields: [],\n      // have to opt in\n      getUploadParameters: _this.getUploadParameters.bind(_assertThisInitialized(_this))\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.client = new RequestClient(uppy, opts);\n    _this.handleUpload = _this.handleUpload.bind(_assertThisInitialized(_this));\n    _this.requests = new RateLimitedQueue(_this.opts.limit);\n    return _this;\n  }\n\n  var _proto = AwsS3.prototype;\n\n  _proto.getUploadParameters = function getUploadParameters(file) {\n    if (!this.opts.companionUrl) {\n      throw new Error('Expected a `companionUrl` option containing a Companion address.');\n    }\n\n    var filename = file.meta.name;\n    var type = file.meta.type;\n    var metadata = {};\n    this.opts.metaFields.forEach(function (key) {\n      if (file.meta[key] != null) {\n        metadata[key] = file.meta[key].toString();\n      }\n    });\n    var query = qsStringify({\n      filename: filename,\n      type: type,\n      metadata: metadata\n    });\n    return this.client.get(\"s3/params?\" + query).then(assertServerError);\n  };\n\n  _proto.validateParameters = function validateParameters(file, params) {\n    var valid = typeof params === 'object' && params && typeof params.url === 'string' && (typeof params.fields === 'object' || params.fields == null) && (params.method == null || /^(put|post)$/i.test(params.method));\n\n    if (!valid) {\n      var err = new TypeError(\"AwsS3: got incorrect result from 'getUploadParameters()' for file '\" + file.name + \"', expected an object '{ url, method, fields, headers }'.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.\");\n      console.error(err);\n      throw err;\n    }\n  };\n\n  _proto.handleUpload = function handleUpload(fileIDs) {\n    var _this2 = this;\n    /**\n     * keep track of `getUploadParameters()` responses\n     * so we can cancel the calls individually using just a file ID\n     *\n     * @type {object.<string, Promise>}\n     */\n\n\n    var paramsPromises = Object.create(null);\n\n    function onremove(file) {\n      var id = file.id;\n\n      if (hasProperty(paramsPromises, id)) {\n        paramsPromises[id].abort();\n      }\n    }\n\n    this.uppy.on('file-removed', onremove);\n    fileIDs.forEach(function (id) {\n      var file = _this2.uppy.getFile(id);\n\n      _this2.uppy.emit('upload-started', file);\n    });\n    var getUploadParameters = this.requests.wrapPromiseFunction(function (file) {\n      return _this2.opts.getUploadParameters(file);\n    });\n    var numberOfFiles = fileIDs.length;\n    return settle(fileIDs.map(function (id, index) {\n      paramsPromises[id] = getUploadParameters(_this2.uppy.getFile(id));\n      return paramsPromises[id].then(function (params) {\n        delete paramsPromises[id];\n\n        var file = _this2.uppy.getFile(id);\n\n        _this2.validateParameters(file, params);\n\n        var _params$method = params.method,\n            method = _params$method === void 0 ? 'post' : _params$method,\n            url = params.url,\n            fields = params.fields,\n            headers = params.headers;\n        var xhrOpts = {\n          method: method,\n          formData: method.toLowerCase() === 'post',\n          endpoint: url,\n          metaFields: fields ? Object.keys(fields) : []\n        };\n\n        if (headers) {\n          xhrOpts.headers = headers;\n        }\n\n        _this2.uppy.setFileState(file.id, {\n          meta: _extends({}, file.meta, fields),\n          xhrUpload: xhrOpts\n        });\n\n        return _this2._uploader.uploadFile(file.id, index, numberOfFiles);\n      }).catch(function (error) {\n        delete paramsPromises[id];\n\n        var file = _this2.uppy.getFile(id);\n\n        _this2.uppy.emit('upload-error', file, error);\n      });\n    })).then(function (settled) {\n      // cleanup.\n      _this2.uppy.off('file-removed', onremove);\n\n      return settled;\n    });\n  };\n\n  _proto.install = function install() {\n    var uppy = this.uppy;\n    this.uppy.addUploader(this.handleUpload); // Get the response data from a successful XMLHttpRequest instance.\n    // `content` is the S3 response as a string.\n    // `xhr` is the XMLHttpRequest instance.\n\n    function defaultGetResponseData(content, xhr) {\n      var opts = this; // If no response, we've hopefully done a PUT request to the file\n      // in the bucket on its full URL.\n\n      if (!isXml(content, xhr)) {\n        if (opts.method.toUpperCase() === 'POST') {\n          if (!warnedSuccessActionStatus) {\n            uppy.log('[AwsS3] No response data found, make sure to set the success_action_status AWS SDK option to 201. See https://uppy.io/docs/aws-s3/#POST-Uploads', 'warning');\n            warnedSuccessActionStatus = true;\n          } // The responseURL won't contain the object key. Give up.\n\n\n          return {\n            location: null\n          };\n        } // responseURL is not available in older browsers.\n\n\n        if (!xhr.responseURL) {\n          return {\n            location: null\n          };\n        } // Trim the query string because it's going to be a bunch of presign\n        // parameters for a PUT request—doing a GET request with those will\n        // always result in an error\n\n\n        return {\n          location: xhr.responseURL.replace(/\\?.*$/, '')\n        };\n      }\n\n      return {\n        // Some S3 alternatives do not reply with an absolute URL.\n        // Eg DigitalOcean Spaces uses /$bucketName/xyz\n        location: resolveUrl(xhr.responseURL, getXmlValue(content, 'Location')),\n        bucket: getXmlValue(content, 'Bucket'),\n        key: getXmlValue(content, 'Key'),\n        etag: getXmlValue(content, 'ETag')\n      };\n    } // Get the error data from a failed XMLHttpRequest instance.\n    // `content` is the S3 response as a string.\n    // `xhr` is the XMLHttpRequest instance.\n\n\n    function defaultGetResponseError(content, xhr) {\n      // If no response, we don't have a specific error message, use the default.\n      if (!isXml(content, xhr)) {\n        return;\n      }\n\n      var error = getXmlValue(content, 'Message');\n      return new Error(error);\n    }\n\n    var xhrOptions = {\n      fieldName: 'file',\n      responseUrlFieldName: 'location',\n      timeout: this.opts.timeout,\n      // Share the rate limiting queue with XHRUpload.\n      __queue: this.requests,\n      responseType: 'text',\n      getResponseData: this.opts.getResponseData || defaultGetResponseData,\n      getResponseError: defaultGetResponseError\n    }; // Revert to `this.uppy.use(XHRUpload)` once the big comment block at the top of\n    // this file is solved\n\n    this._uploader = new MiniXHRUpload(this.uppy, xhrOptions);\n    this._uploader.i18n = this.uppy.i18n;\n  };\n\n  _proto.uninstall = function uninstall() {\n    this.uppy.removePreProcessor(this.handleUpload);\n  };\n\n  return AwsS3;\n}(Plugin), _class.VERSION = \"1.6.9\", _temp);","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/node_modules/@uppy/aws-s3/lib/index.js"],"names":["_class","_temp","_assertThisInitialized","self","ReferenceError","_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","_extends","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","URL_","URL","require","_require","Plugin","RateLimitedQueue","settle","hasProperty","_require2","RequestClient","qsStringify","MiniXHRUpload","isXml","resolveUrl","origin","link","toString","getXmlValue","tagName","start","indexOf","end","slice","assertServerError","res","error","Error","message","warnedSuccessActionStatus","module","exports","_Plugin","AwsS3","uppy","opts","_this","type","id","title","defaultOptions","timeout","limit","metaFields","getUploadParameters","bind","client","handleUpload","requests","_proto","file","companionUrl","filename","meta","name","metadata","forEach","query","get","then","validateParameters","params","valid","url","fields","method","test","err","TypeError","console","fileIDs","_this2","paramsPromises","onremove","abort","on","getFile","emit","wrapPromiseFunction","numberOfFiles","map","index","_params$method","headers","xhrOpts","formData","toLowerCase","endpoint","keys","setFileState","xhrUpload","_uploader","uploadFile","catch","settled","off","install","addUploader","defaultGetResponseData","content","xhr","toUpperCase","log","location","responseURL","replace","bucket","etag","defaultGetResponseError","xhrOptions","fieldName","responseUrlFieldName","__queue","responseType","getResponseData","getResponseError","i18n","uninstall","removePreProcessor","VERSION"],"mappings":"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","sourcesContent":["var _class, _temp;\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * This plugin is currently a A Big Hack™! The core reason for that is how this plugin\n * interacts with Uppy's current pipeline design. The pipeline can handle files in steps,\n * including preprocessing, uploading, and postprocessing steps. This plugin initially\n * was designed to do its work in a preprocessing step, and let XHRUpload deal with the\n * actual file upload as an uploading step. However, Uppy runs steps on all files at once,\n * sequentially: first, all files go through a preprocessing step, then, once they are all\n * done, they go through the uploading step.\n *\n * For S3, this causes severely broken behaviour when users upload many files. The\n * preprocessing step will request S3 upload URLs that are valid for a short time only,\n * but it has to do this for _all_ files, which can take a long time if there are hundreds\n * or even thousands of files. By the time the uploader step starts, the first URLs may\n * already have expired. If not, the uploading might take such a long time that later URLs\n * will expire before some files can be uploaded.\n *\n * The long-term solution to this problem is to change the upload pipeline so that files\n * can be sent to the next step individually. That requires a breakig change, so it is\n * planned for Uppy v2.\n *\n * In the mean time, this plugin is stuck with a hackier approach: the necessary parts\n * of the XHRUpload implementation were copied into this plugin, as the MiniXHRUpload\n * class, and this plugin calls into it immediately once it receives an upload URL.\n * This isn't as nicely modular as we'd like and requires us to maintain two copies of\n * the XHRUpload code, but at least it's not horrifically broken :)\n */\n// If global `URL` constructor is available, use it\nvar URL_ = typeof URL === 'function' ? URL : require('url-parse');\n\nvar _require = require('@uppy/core'),\n    Plugin = _require.Plugin;\n\nvar RateLimitedQueue = require('@uppy/utils/lib/RateLimitedQueue');\n\nvar settle = require('@uppy/utils/lib/settle');\n\nvar hasProperty = require('@uppy/utils/lib/hasProperty');\n\nvar _require2 = require('@uppy/companion-client'),\n    RequestClient = _require2.RequestClient;\n\nvar qsStringify = require('qs-stringify');\n\nvar MiniXHRUpload = require('./MiniXHRUpload');\n\nvar isXml = require('./isXml');\n\nfunction resolveUrl(origin, link) {\n  return origin ? new URL_(link, origin).toString() : new URL_(link).toString();\n}\n/**\n * Get the contents of a named tag in an XML source string.\n *\n * @param {string} source - The XML source string.\n * @param {string} tagName - The name of the tag.\n * @returns {string} The contents of the tag, or the empty string if the tag does not exist.\n */\n\n\nfunction getXmlValue(source, tagName) {\n  var start = source.indexOf(\"<\" + tagName + \">\");\n  var end = source.indexOf(\"</\" + tagName + \">\", start);\n  return start !== -1 && end !== -1 ? source.slice(start + tagName.length + 2, end) : '';\n}\n\nfunction assertServerError(res) {\n  if (res && res.error) {\n    var error = new Error(res.message);\n\n    _extends(error, res.error);\n\n    throw error;\n  }\n\n  return res;\n} // warning deduplication flag: see `getResponseData()` XHRUpload option definition\n\n\nvar warnedSuccessActionStatus = false;\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\n  _inheritsLoose(AwsS3, _Plugin);\n\n  function AwsS3(uppy, opts) {\n    var _this;\n\n    _this = _Plugin.call(this, uppy, opts) || this;\n    _this.type = 'uploader';\n    _this.id = _this.opts.id || 'AwsS3';\n    _this.title = 'AWS S3';\n    var defaultOptions = {\n      timeout: 30 * 1000,\n      limit: 0,\n      metaFields: [],\n      // have to opt in\n      getUploadParameters: _this.getUploadParameters.bind(_assertThisInitialized(_this))\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.client = new RequestClient(uppy, opts);\n    _this.handleUpload = _this.handleUpload.bind(_assertThisInitialized(_this));\n    _this.requests = new RateLimitedQueue(_this.opts.limit);\n    return _this;\n  }\n\n  var _proto = AwsS3.prototype;\n\n  _proto.getUploadParameters = function getUploadParameters(file) {\n    if (!this.opts.companionUrl) {\n      throw new Error('Expected a `companionUrl` option containing a Companion address.');\n    }\n\n    var filename = file.meta.name;\n    var type = file.meta.type;\n    var metadata = {};\n    this.opts.metaFields.forEach(function (key) {\n      if (file.meta[key] != null) {\n        metadata[key] = file.meta[key].toString();\n      }\n    });\n    var query = qsStringify({\n      filename: filename,\n      type: type,\n      metadata: metadata\n    });\n    return this.client.get(\"s3/params?\" + query).then(assertServerError);\n  };\n\n  _proto.validateParameters = function validateParameters(file, params) {\n    var valid = typeof params === 'object' && params && typeof params.url === 'string' && (typeof params.fields === 'object' || params.fields == null) && (params.method == null || /^(put|post)$/i.test(params.method));\n\n    if (!valid) {\n      var err = new TypeError(\"AwsS3: got incorrect result from 'getUploadParameters()' for file '\" + file.name + \"', expected an object '{ url, method, fields, headers }'.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.\");\n      console.error(err);\n      throw err;\n    }\n  };\n\n  _proto.handleUpload = function handleUpload(fileIDs) {\n    var _this2 = this;\n\n    /**\n     * keep track of `getUploadParameters()` responses\n     * so we can cancel the calls individually using just a file ID\n     *\n     * @type {object.<string, Promise>}\n     */\n    var paramsPromises = Object.create(null);\n\n    function onremove(file) {\n      var id = file.id;\n\n      if (hasProperty(paramsPromises, id)) {\n        paramsPromises[id].abort();\n      }\n    }\n\n    this.uppy.on('file-removed', onremove);\n    fileIDs.forEach(function (id) {\n      var file = _this2.uppy.getFile(id);\n\n      _this2.uppy.emit('upload-started', file);\n    });\n    var getUploadParameters = this.requests.wrapPromiseFunction(function (file) {\n      return _this2.opts.getUploadParameters(file);\n    });\n    var numberOfFiles = fileIDs.length;\n    return settle(fileIDs.map(function (id, index) {\n      paramsPromises[id] = getUploadParameters(_this2.uppy.getFile(id));\n      return paramsPromises[id].then(function (params) {\n        delete paramsPromises[id];\n\n        var file = _this2.uppy.getFile(id);\n\n        _this2.validateParameters(file, params);\n\n        var _params$method = params.method,\n            method = _params$method === void 0 ? 'post' : _params$method,\n            url = params.url,\n            fields = params.fields,\n            headers = params.headers;\n        var xhrOpts = {\n          method: method,\n          formData: method.toLowerCase() === 'post',\n          endpoint: url,\n          metaFields: fields ? Object.keys(fields) : []\n        };\n\n        if (headers) {\n          xhrOpts.headers = headers;\n        }\n\n        _this2.uppy.setFileState(file.id, {\n          meta: _extends({}, file.meta, fields),\n          xhrUpload: xhrOpts\n        });\n\n        return _this2._uploader.uploadFile(file.id, index, numberOfFiles);\n      }).catch(function (error) {\n        delete paramsPromises[id];\n\n        var file = _this2.uppy.getFile(id);\n\n        _this2.uppy.emit('upload-error', file, error);\n      });\n    })).then(function (settled) {\n      // cleanup.\n      _this2.uppy.off('file-removed', onremove);\n\n      return settled;\n    });\n  };\n\n  _proto.install = function install() {\n    var uppy = this.uppy;\n    this.uppy.addUploader(this.handleUpload); // Get the response data from a successful XMLHttpRequest instance.\n    // `content` is the S3 response as a string.\n    // `xhr` is the XMLHttpRequest instance.\n\n    function defaultGetResponseData(content, xhr) {\n      var opts = this; // If no response, we've hopefully done a PUT request to the file\n      // in the bucket on its full URL.\n\n      if (!isXml(content, xhr)) {\n        if (opts.method.toUpperCase() === 'POST') {\n          if (!warnedSuccessActionStatus) {\n            uppy.log('[AwsS3] No response data found, make sure to set the success_action_status AWS SDK option to 201. See https://uppy.io/docs/aws-s3/#POST-Uploads', 'warning');\n            warnedSuccessActionStatus = true;\n          } // The responseURL won't contain the object key. Give up.\n\n\n          return {\n            location: null\n          };\n        } // responseURL is not available in older browsers.\n\n\n        if (!xhr.responseURL) {\n          return {\n            location: null\n          };\n        } // Trim the query string because it's going to be a bunch of presign\n        // parameters for a PUT request—doing a GET request with those will\n        // always result in an error\n\n\n        return {\n          location: xhr.responseURL.replace(/\\?.*$/, '')\n        };\n      }\n\n      return {\n        // Some S3 alternatives do not reply with an absolute URL.\n        // Eg DigitalOcean Spaces uses /$bucketName/xyz\n        location: resolveUrl(xhr.responseURL, getXmlValue(content, 'Location')),\n        bucket: getXmlValue(content, 'Bucket'),\n        key: getXmlValue(content, 'Key'),\n        etag: getXmlValue(content, 'ETag')\n      };\n    } // Get the error data from a failed XMLHttpRequest instance.\n    // `content` is the S3 response as a string.\n    // `xhr` is the XMLHttpRequest instance.\n\n\n    function defaultGetResponseError(content, xhr) {\n      // If no response, we don't have a specific error message, use the default.\n      if (!isXml(content, xhr)) {\n        return;\n      }\n\n      var error = getXmlValue(content, 'Message');\n      return new Error(error);\n    }\n\n    var xhrOptions = {\n      fieldName: 'file',\n      responseUrlFieldName: 'location',\n      timeout: this.opts.timeout,\n      // Share the rate limiting queue with XHRUpload.\n      __queue: this.requests,\n      responseType: 'text',\n      getResponseData: this.opts.getResponseData || defaultGetResponseData,\n      getResponseError: defaultGetResponseError\n    }; // Revert to `this.uppy.use(XHRUpload)` once the big comment block at the top of\n    // this file is solved\n\n    this._uploader = new MiniXHRUpload(this.uppy, xhrOptions);\n    this._uploader.i18n = this.uppy.i18n;\n  };\n\n  _proto.uninstall = function uninstall() {\n    this.uppy.removePreProcessor(this.handleUpload);\n  };\n\n  return AwsS3;\n}(Plugin), _class.VERSION = \"1.6.9\", _temp);"]},"metadata":{},"sourceType":"script"}