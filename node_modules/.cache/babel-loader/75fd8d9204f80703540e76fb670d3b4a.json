{"ast":null,"code":"/**\n* Create an event emitter with namespaces\n* @name createNamespaceEmitter\n* @example\n* var emitter = require('./index')()\n*\n* emitter.on('*', function () {\n*   console.log('all events emitted', this.event)\n* })\n*\n* emitter.on('example', function () {\n*   console.log('example event emitted')\n* })\n*/\nmodule.exports = function createNamespaceEmitter() {\n  var emitter = {};\n\n  var _fns = emitter._fns = {};\n  /**\n  * Emit an event. Optionally namespace the event. Handlers are fired in the order in which they were added with exact matches taking precedence. Separate the namespace and event with a `:`\n  * @name emit\n  * @param {String} event – the name of the event, with optional namespace\n  * @param {...*} data – up to 6 arguments that are passed to the event listener\n  * @example\n  * emitter.emit('example')\n  * emitter.emit('demo:test')\n  * emitter.emit('data', { example: true}, 'a string', 1)\n  */\n\n\n  emitter.emit = function emit(event, arg1, arg2, arg3, arg4, arg5, arg6) {\n    var toEmit = getListeners(event);\n\n    if (toEmit.length) {\n      emitAll(event, toEmit, [arg1, arg2, arg3, arg4, arg5, arg6]);\n    }\n  };\n  /**\n  * Create en event listener.\n  * @name on\n  * @param {String} event\n  * @param {Function} fn\n  * @example\n  * emitter.on('example', function () {})\n  * emitter.on('demo', function () {})\n  */\n\n\n  emitter.on = function on(event, fn) {\n    if (!_fns[event]) {\n      _fns[event] = [];\n    }\n\n    _fns[event].push(fn);\n  };\n  /**\n  * Create en event listener that fires once.\n  * @name once\n  * @param {String} event\n  * @param {Function} fn\n  * @example\n  * emitter.once('example', function () {})\n  * emitter.once('demo', function () {})\n  */\n\n\n  emitter.once = function once(event, fn) {\n    function one() {\n      fn.apply(this, arguments);\n      emitter.off(event, one);\n    }\n\n    this.on(event, one);\n  };\n  /**\n  * Stop listening to an event. Stop all listeners on an event by only passing the event name. Stop a single listener by passing that event handler as a callback.\n  * You must be explicit about what will be unsubscribed: `emitter.off('demo')` will unsubscribe an `emitter.on('demo')` listener,\n  * `emitter.off('demo:example')` will unsubscribe an `emitter.on('demo:example')` listener\n  * @name off\n  * @param {String} event\n  * @param {Function} [fn] – the specific handler\n  * @example\n  * emitter.off('example')\n  * emitter.off('demo', function () {})\n  */\n\n\n  emitter.off = function off(event, fn) {\n    var keep = [];\n\n    if (event && fn) {\n      var fns = this._fns[event];\n      var i = 0;\n      var l = fns ? fns.length : 0;\n\n      for (i; i < l; i++) {\n        if (fns[i] !== fn) {\n          keep.push(fns[i]);\n        }\n      }\n    }\n\n    keep.length ? this._fns[event] = keep : delete this._fns[event];\n  };\n\n  function getListeners(e) {\n    var out = _fns[e] ? _fns[e] : [];\n    var idx = e.indexOf(':');\n    var args = idx === -1 ? [e] : [e.substring(0, idx), e.substring(idx + 1)];\n    var keys = Object.keys(_fns);\n    var i = 0;\n    var l = keys.length;\n\n    for (i; i < l; i++) {\n      var key = keys[i];\n\n      if (key === '*') {\n        out = out.concat(_fns[key]);\n      }\n\n      if (args.length === 2 && args[0] === key) {\n        out = out.concat(_fns[key]);\n        break;\n      }\n    }\n\n    return out;\n  }\n\n  function emitAll(e, fns, args) {\n    var i = 0;\n    var l = fns.length;\n\n    for (i; i < l; i++) {\n      if (!fns[i]) break;\n      fns[i].event = e;\n      fns[i].apply(fns[i], args);\n    }\n  }\n\n  return emitter;\n};","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/node_modules/namespace-emitter/index.js"],"names":["module","exports","createNamespaceEmitter","emitter","_fns","emit","event","arg1","arg2","arg3","arg4","arg5","arg6","toEmit","getListeners","length","emitAll","on","fn","push","once","one","apply","arguments","off","keep","fns","i","l","e","out","idx","indexOf","args","substring","keys","Object","key","concat"],"mappings":"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","sourcesContent":["/**\n* Create an event emitter with namespaces\n* @name createNamespaceEmitter\n* @example\n* var emitter = require('./index')()\n*\n* emitter.on('*', function () {\n*   console.log('all events emitted', this.event)\n* })\n*\n* emitter.on('example', function () {\n*   console.log('example event emitted')\n* })\n*/\nmodule.exports = function createNamespaceEmitter () {\n  var emitter = {}\n  var _fns = emitter._fns = {}\n\n  /**\n  * Emit an event. Optionally namespace the event. Handlers are fired in the order in which they were added with exact matches taking precedence. Separate the namespace and event with a `:`\n  * @name emit\n  * @param {String} event – the name of the event, with optional namespace\n  * @param {...*} data – up to 6 arguments that are passed to the event listener\n  * @example\n  * emitter.emit('example')\n  * emitter.emit('demo:test')\n  * emitter.emit('data', { example: true}, 'a string', 1)\n  */\n  emitter.emit = function emit (event, arg1, arg2, arg3, arg4, arg5, arg6) {\n    var toEmit = getListeners(event)\n\n    if (toEmit.length) {\n      emitAll(event, toEmit, [arg1, arg2, arg3, arg4, arg5, arg6])\n    }\n  }\n\n  /**\n  * Create en event listener.\n  * @name on\n  * @param {String} event\n  * @param {Function} fn\n  * @example\n  * emitter.on('example', function () {})\n  * emitter.on('demo', function () {})\n  */\n  emitter.on = function on (event, fn) {\n    if (!_fns[event]) {\n      _fns[event] = []\n    }\n\n    _fns[event].push(fn)\n  }\n\n  /**\n  * Create en event listener that fires once.\n  * @name once\n  * @param {String} event\n  * @param {Function} fn\n  * @example\n  * emitter.once('example', function () {})\n  * emitter.once('demo', function () {})\n  */\n  emitter.once = function once (event, fn) {\n    function one () {\n      fn.apply(this, arguments)\n      emitter.off(event, one)\n    }\n    this.on(event, one)\n  }\n\n  /**\n  * Stop listening to an event. Stop all listeners on an event by only passing the event name. Stop a single listener by passing that event handler as a callback.\n  * You must be explicit about what will be unsubscribed: `emitter.off('demo')` will unsubscribe an `emitter.on('demo')` listener,\n  * `emitter.off('demo:example')` will unsubscribe an `emitter.on('demo:example')` listener\n  * @name off\n  * @param {String} event\n  * @param {Function} [fn] – the specific handler\n  * @example\n  * emitter.off('example')\n  * emitter.off('demo', function () {})\n  */\n  emitter.off = function off (event, fn) {\n    var keep = []\n\n    if (event && fn) {\n      var fns = this._fns[event]\n      var i = 0\n      var l = fns ? fns.length : 0\n\n      for (i; i < l; i++) {\n        if (fns[i] !== fn) {\n          keep.push(fns[i])\n        }\n      }\n    }\n\n    keep.length ? this._fns[event] = keep : delete this._fns[event]\n  }\n\n  function getListeners (e) {\n    var out = _fns[e] ? _fns[e] : []\n    var idx = e.indexOf(':')\n    var args = (idx === -1) ? [e] : [e.substring(0, idx), e.substring(idx + 1)]\n\n    var keys = Object.keys(_fns)\n    var i = 0\n    var l = keys.length\n\n    for (i; i < l; i++) {\n      var key = keys[i]\n      if (key === '*') {\n        out = out.concat(_fns[key])\n      }\n\n      if (args.length === 2 && args[0] === key) {\n        out = out.concat(_fns[key])\n        break\n      }\n    }\n\n    return out\n  }\n\n  function emitAll (e, fns, args) {\n    var i = 0\n    var l = fns.length\n\n    for (i; i < l; i++) {\n      if (!fns[i]) break\n      fns[i].event = e\n      fns[i].apply(fns[i], args)\n    }\n  }\n\n  return emitter\n}\n"]},"metadata":{},"sourceType":"script"}