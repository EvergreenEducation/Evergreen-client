{"ast":null,"code":"import _objectSpread from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderCreationContainer.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useState } from 'react';\nimport ProviderForm from 'components/provider/ProviderForm';\nimport { Button, Form, notification } from 'antd';\nimport useGlobalStore from 'store/GlobalStore';\nimport useAxios, { configure } from 'axios-hooks';\nimport axiosInstance from 'services/AxiosInstance';\nimport AuthService from 'services/AuthService';\nimport UploaderService from 'services/Uploader';\nimport { useImageAndBannerImage } from 'hooks';\nconfigure({\n  axios: axiosInstance\n});\n\nconst ProviderCreationContainer = ({\n  closeModal,\n  role,\n  getProviderApi\n}) => {\n  const userId = AuthService.currentSession.id;\n\n  const _useImageAndBannerIma = useImageAndBannerImage(),\n        _useImageAndBannerIma2 = _slicedToArray(_useImageAndBannerIma, 2),\n        _useImageAndBannerIma3 = _useImageAndBannerIma2[0],\n        file = _useImageAndBannerIma3.file,\n        onChangeFileUpload = _useImageAndBannerIma3.onChangeFileUpload,\n        _useImageAndBannerIma4 = _useImageAndBannerIma2[1],\n        bannerFile = _useImageAndBannerIma4.bannerFile,\n        onChangeBannerUpload = _useImageAndBannerIma4.onChangeBannerUpload;\n\n  const _Form$useForm = Form.useForm(),\n        _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n        form = _Form$useForm2[0];\n\n  const _useGlobalStore = useGlobalStore(),\n        datafieldStore = _useGlobalStore.datafield,\n        providerStore = _useGlobalStore.provider;\n\n  const _useAxios = useAxios({\n    url: '/providers',\n    method: 'POST'\n  }, {\n    manual: true\n  }),\n        _useAxios2 = _slicedToArray(_useAxios, 2),\n        providerCreateError = _useAxios2[0].error,\n        createProvider = _useAxios2[1];\n\n  const submit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        const values = yield form.validateFields(['banner_image', 'main_image', 'accreditation', 'location_type', 'name', 'location', 'type', 'learn_and_earn', 'is_public', 'industry', 'description', 'industry', 'financial_aid', 'credit', 'news', 'contact', 'pay', 'cost', 'topics', 'keywords', 'is_local_promo', 'is_main_promo', 'external_url']);\n\n        const _yield$createProvider = yield createProvider({\n          data: _objectSpread(_objectSpread({}, values), {}, {\n            topics: values.topics,\n            'main_image': getImageData,\n            'banner_image': getBannerImage,\n            'description': descriptionValue\n          })\n        }),\n              data = _yield$createProvider.data,\n              status = _yield$createProvider.status;\n\n        if (data) {\n          providerStore.addOne(data);\n        }\n\n        if (data && userId) {\n          const fileable_type = 'provider';\n          let clonedResponse = Object.assign(data);\n          const filePayload = [];\n\n          if (file) {\n            const results = yield UploaderService.uploadFile(file, {\n              uploaded_by_user_id: userId,\n              fileable_type,\n              fileable_id: data.id\n            });\n\n            if (results && results.file.data) {\n              filePayload.push(_objectSpread({}, results.file.data));\n            }\n\n            if (results.success) {\n              notification.success({\n                message: 'Success',\n                description: 'Main image is uploaded'\n              });\n            }\n          }\n\n          if (bannerFile) {\n            const results = yield UploaderService.uploadFile(bannerFile, {\n              uploaded_by_user_id: userId,\n              fileable_type,\n              fileable_id: data.id,\n              meta: 'banner-image'\n            });\n\n            if (results && results.file.data) {\n              filePayload.push(_objectSpread({}, results.file.data));\n            }\n\n            if (results.success) {\n              notification.success({\n                message: 'Success',\n                description: 'Banner image is uploaded'\n              });\n            }\n          }\n\n          clonedResponse.Files = [...filePayload];\n          providerStore.updateOne(clonedResponse);\n        }\n\n        if (status === 201) {\n          notification.success({\n            message: status,\n            description: 'Successfully created provider'\n          });\n          form.resetFields();\n          closeModal();\n          getProviderApi();\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    });\n\n    return function submit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(() => {\n    if (providerCreateError) {\n      const _providerCreateError$ = providerCreateError.request,\n            status = _providerCreateError$.status,\n            statusText = _providerCreateError$.statusText;\n      notification.error({\n        message: status,\n        description: statusText\n      });\n    }\n  }, [providerCreateError]);\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        getImageData = _useState2[0],\n        setGetImageData = _useState2[1];\n\n  const handleImageData = getImageData => {\n    setGetImageData(getImageData);\n  };\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        getBannerImage = _useState4[0],\n        setGetBannerImage = _useState4[1];\n\n  const handleBannerImage = getBannerImage => {\n    setGetBannerImage(getBannerImage);\n  };\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        descriptionValue = _useState6[0],\n        setDescriptionValue = _useState6[1];\n\n  const handleDescriptionValue = value => {\n    setDescriptionValue(value);\n  };\n\n  console.log(\"finalllllllllll\", getBannerImage, getImageData);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    name: \"providerForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-6 overflow-y-auto\",\n    style: {\n      maxHeight: '32rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ProviderForm, {\n    role: role,\n    userId: userId,\n    datafields: Object.values(datafieldStore.entities),\n    providers: Object.values(providerStore.entities),\n    file: file,\n    onChangeUpload: onChangeFileUpload,\n    bannerFile: bannerFile,\n    onChangeBannerUpload: onChangeBannerUpload,\n    handleImageData: handleImageData,\n    handleBannerImage: handleBannerImage,\n    descriptionValue: descriptionValue,\n    handleDescriptionValue: handleDescriptionValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"bg-white px-6 pt-5 pb-1 flex justify-center\",\n    style: {\n      borderTop: '1px solid #f0f0f0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"mr-3 px-10 rounded\",\n    type: \"primary\",\n    size: \"small\",\n    htmlType: \"submit\",\n    onClick: submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, \"Create\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"px-10 rounded\",\n    size: \"small\",\n    type: \"dashed\",\n    onClick: () => closeModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))));\n};\n\n__signature__(ProviderCreationContainer, \"useImageAndBannerImage{[\\r\\n    { file, onChangeFileUpload },\\r\\n    { bannerFile, onChangeBannerUpload },\\r\\n  ]}\\nuseForm{[form]}\\nuseGlobalStore{{\\r\\n    datafield: datafieldStore,\\r\\n    provider: providerStore,\\r\\n  }}\\nuseAxios{[{ error: providerCreateError }, createProvider]}\\nuseEffect{}\\nuseState{[getImageData, setGetImageData]}\\nuseState{[getBannerImage, setGetBannerImage]}\\nuseState{[descriptionValue,setDescriptionValue]('')}\", () => [useImageAndBannerImage, useGlobalStore, useAxios]);\n\nconst _default = ProviderCreationContainer;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ProviderCreationContainer, \"ProviderCreationContainer\", \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderCreationContainer.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderCreationContainer.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderCreationContainer.js"],"names":["React","useEffect","useState","ProviderForm","Button","Form","notification","useGlobalStore","useAxios","configure","axiosInstance","AuthService","UploaderService","useImageAndBannerImage","axios","ProviderCreationContainer","closeModal","role","getProviderApi","userId","currentSession","id","file","onChangeFileUpload","bannerFile","onChangeBannerUpload","useForm","form","datafieldStore","datafield","providerStore","provider","url","method","manual","providerCreateError","error","createProvider","submit","values","validateFields","data","topics","getImageData","getBannerImage","descriptionValue","status","addOne","fileable_type","clonedResponse","Object","assign","filePayload","results","uploadFile","uploaded_by_user_id","fileable_id","push","success","message","description","meta","Files","updateOne","resetFields","console","request","statusText","setGetImageData","handleImageData","setGetBannerImage","handleBannerImage","setDescriptionValue","handleDescriptionValue","value","log","maxHeight","entities","borderTop"],"mappings":"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","sourcesContent":["import React, { useEffect,useState } from 'react';\r\nimport ProviderForm from 'components/provider/ProviderForm';\r\nimport { Button, Form, notification } from 'antd';\r\nimport useGlobalStore from 'store/GlobalStore';\r\nimport useAxios, { configure } from 'axios-hooks';\r\nimport axiosInstance from 'services/AxiosInstance';\r\nimport AuthService from 'services/AuthService';\r\nimport UploaderService from 'services/Uploader';\r\nimport { useImageAndBannerImage } from 'hooks';\r\n\r\nconfigure({\r\n  axios: axiosInstance,\r\n});\r\n\r\nconst ProviderCreationContainer = ({ closeModal, role,getProviderApi }) => {\r\n  const { id: userId } = AuthService.currentSession;\r\n  const [\r\n    { file, onChangeFileUpload },\r\n    { bannerFile, onChangeBannerUpload },\r\n  ] = useImageAndBannerImage();\r\n\r\n  const [form] = Form.useForm();\r\n  const {\r\n    datafield: datafieldStore,\r\n    provider: providerStore,\r\n  } = useGlobalStore();\r\n  const [{ error: providerCreateError }, createProvider] = useAxios(\r\n    {\r\n      url: '/providers',\r\n      method: 'POST',\r\n    },\r\n    { manual: true }\r\n  );\r\n\r\n  const submit = async () => {\r\n    try {\r\n      const values = await form.validateFields([\r\n        'banner_image',\r\n        'main_image',\r\n        'accreditation',\r\n        'location_type',\r\n        'name',\r\n        'location',\r\n        'type',\r\n        'learn_and_earn',\r\n        'is_public',\r\n        'industry',\r\n        'description',\r\n        'industry',\r\n        'financial_aid',\r\n        'credit',\r\n        'news',\r\n        'contact',\r\n        'pay',\r\n        'cost',\r\n        'topics',\r\n        'keywords',\r\n        'is_local_promo',\r\n        'is_main_promo',\r\n        'external_url',\r\n      ]);\r\n      const { data, status } = await createProvider({\r\n        data: {\r\n          ...values,\r\n          topics: values.topics,\r\n          'main_image': getImageData,\r\n          'banner_image': getBannerImage,\r\n          'description': descriptionValue\r\n\r\n        },\r\n      });\r\n\r\n      if (data) {\r\n        providerStore.addOne(data);\r\n      }\r\n\r\n      if (data && userId) {\r\n        const fileable_type = 'provider';\r\n        let clonedResponse = Object.assign(data);\r\n        const filePayload = [];\r\n        if (file) {\r\n          const results = await UploaderService.uploadFile(file, {\r\n            uploaded_by_user_id: userId,\r\n            fileable_type,\r\n            fileable_id: data.id,\r\n          });\r\n\r\n          if (results && results.file.data) {\r\n            filePayload.push({ ...results.file.data });\r\n          }\r\n\r\n          if (results.success) {\r\n            notification.success({\r\n              message: 'Success',\r\n              description: 'Main image is uploaded',\r\n            });\r\n          }\r\n        }\r\n        if (bannerFile) {\r\n          const results = await UploaderService.uploadFile(bannerFile, {\r\n            uploaded_by_user_id: userId,\r\n            fileable_type,\r\n            fileable_id: data.id,\r\n            meta: 'banner-image',\r\n          });\r\n\r\n          if (results && results.file.data) {\r\n            filePayload.push({ ...results.file.data });\r\n          }\r\n\r\n          if (results.success) {\r\n            notification.success({\r\n              message: 'Success',\r\n              description: 'Banner image is uploaded',\r\n            });\r\n          }\r\n        }\r\n        clonedResponse.Files = [...filePayload];\r\n        providerStore.updateOne(clonedResponse);\r\n      }\r\n\r\n      if (status === 201) {\r\n        notification.success({\r\n          message: status,\r\n          description: 'Successfully created provider',\r\n        });\r\n        form.resetFields();\r\n        closeModal();\r\n        getProviderApi();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (providerCreateError) {\r\n      const { status, statusText } = providerCreateError.request;\r\n      notification.error({\r\n        message: status,\r\n        description: statusText,\r\n      });\r\n    }\r\n  }, [providerCreateError]);\r\n  const [getImageData, setGetImageData] = useState()\r\n  const handleImageData = (getImageData) => {\r\n    setGetImageData(getImageData)\r\n  }\r\n  const [getBannerImage, setGetBannerImage] = useState()\r\n  const handleBannerImage = (getBannerImage) => {\r\n    setGetBannerImage(getBannerImage)\r\n  }\r\n  const [descriptionValue,setDescriptionValue]= useState('');\r\n\r\nconst handleDescriptionValue = (value) => {\r\nsetDescriptionValue(value)\r\n}\r\n console.log(\"finalllllllllll\",getBannerImage,getImageData)\r\n  return (\r\n    <div>\r\n      <Form form={form} name=\"providerForm\">\r\n        <div className=\"p-6 overflow-y-auto\" style={{ maxHeight: '32rem' }}>\r\n          <ProviderForm\r\n            role={role}\r\n            userId={userId}\r\n            datafields={Object.values(datafieldStore.entities)}\r\n            providers={Object.values(providerStore.entities)}\r\n            file={file}\r\n            onChangeUpload={onChangeFileUpload}\r\n            bannerFile={bannerFile}\r\n            onChangeBannerUpload={onChangeBannerUpload}\r\n            handleImageData={handleImageData}\r\n            handleBannerImage={handleBannerImage}\r\n            descriptionValue={descriptionValue}\r\n            handleDescriptionValue={handleDescriptionValue}\r\n          />\r\n        </div>\r\n        <section\r\n          className=\"bg-white px-6 pt-5 pb-1 flex justify-center\"\r\n          style={{\r\n            borderTop: '1px solid #f0f0f0',\r\n          }}\r\n        >\r\n          <Button\r\n            className=\"mr-3 px-10 rounded\"\r\n            type=\"primary\"\r\n            size=\"small\"\r\n            htmlType=\"submit\"\r\n            onClick={submit}\r\n          >\r\n            Create\r\n          </Button>\r\n          <Button\r\n            className=\"px-10 rounded\"\r\n            size=\"small\"\r\n            type=\"dashed\"\r\n            onClick={() => closeModal()}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </section>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProviderCreationContainer;\r\n"]},"metadata":{},"sourceType":"module"}