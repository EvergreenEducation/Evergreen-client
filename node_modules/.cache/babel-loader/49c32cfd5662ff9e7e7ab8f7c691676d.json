{"ast":null,"code":"import _objectSpread from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderSimpleUpdateModal.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Modal, Form, Button, notification } from 'antd';\nimport ProviderSimpleForm from 'components/provider/ProviderSimpleForm';\nimport useAxios, { configure } from 'axios-hooks';\nimport axiosInstance from 'services/AxiosInstance';\nimport ProviderStore from 'store/Provider';\nimport AuthService from 'services/AuthService';\nimport UploaderService from 'services/Uploader';\nimport 'assets/scss/antd-overrides.scss';\n\nconst axios = require('axios').default;\n\nconfigure({\n  axios: axiosInstance\n});\nexport default function ProviderSimpleUpdateModal(props) {\n  const formRef = useRef(null);\n  const providerStore = ProviderStore.useContainer();\n  const userId = AuthService.currentSession.id;\n\n  const _Form$useForm = Form.useForm(),\n        _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n        form = _Form$useForm2[0];\n\n  const _props$provider = props.provider,\n        provider = _props$provider === void 0 ? {} : _props$provider,\n        onCancel = props.onCancel,\n        visible = props.visible;\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        file = _useState2[0],\n        setFile = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        descriptionValue = _useState4[0],\n        setDescriptionValue = _useState4[1];\n\n  let token = JSON.parse(localStorage.getItem(\"currentSession\"));\n  let role = token.role;\n\n  const onChangeUpload = e => {\n    const file = e.file;\n\n    if (file) {\n      setFile(file);\n    }\n  };\n\n  function populateFields(p) {\n    form.setFieldsValue({\n      name: p.name,\n      location: p.location,\n      description: p.description\n    });\n  }\n\n  useEffect(() => {\n    if (formRef.current) {\n      populateFields(provider);\n    } // if (provider.Files) {\n    //   const orderedFiles = orderBy(\n    //     provider.Files,\n    //     ['fileable_type', 'createdAt'],\n    //     ['desc', 'desc']\n    //   );\n    //     if (orderedFiles[i].fileable_type === 'provider') {\n    //       setFile(orderedFiles[i]);\n    //       break;\n    //     }\n    //   }\n\n  }, [props, provider, provider.Files, formRef]);\n\n  const _useAxios = useAxios({\n    url: `/providers/${provider.id}`,\n    method: 'PUT'\n  }, {\n    manual: true\n  }),\n        _useAxios2 = _slicedToArray(_useAxios, 2),\n        providerCreateError = _useAxios2[0].error,\n        createSimpleProvider = _useAxios2[1];\n\n  const submitUpdate = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      const values = yield form.validateFields(['name', 'location', 'industry', 'main_image', 'banner_image', 'description']); // const values = form.getFieldsValue([\n      //   'name',\n      //   'location',\n      //   'industry',\n      //   'main_image',\n      //   'banner_image',\n      //   'description'\n      // ]);\n\n      try {\n        const _yield$createSimplePr = yield createSimpleProvider({\n          data: _objectSpread(_objectSpread({}, values), {}, {\n            'main_image': getMainImage,\n            'banner_image': getBannerImage,\n            'description': descriptionValue\n          })\n        }),\n              data = _yield$createSimplePr.data,\n              status = _yield$createSimplePr.status; // const response = await axiosInstance.put(\n        //   `/providers/${provider.id}`,\n        //   data:{\n        //     ...values,\n        //     'main_image': getImageData,\n        //     'banner_image': getBannerImage,\n        //     'description': descriptionValue\n        //   }\n        // );\n\n\n        if (status && status === 200) {\n          providerStore.updateOne(data);\n\n          if (data && file && userId) {\n            const name = file.name,\n                  type = file.type;\n            const results = yield UploaderService.upload({\n              name,\n              mime_type: type,\n              uploaded_by_user_id: userId,\n              fileable_type: 'provider',\n              fileable_id: data.id,\n              binaryFile: file.originFileObj\n            });\n            const providerEntity = providerStore.entities[data.id];\n            providerEntity.Files.push(_objectSpread({}, results.file.data));\n            providerStore.updateOne(providerEntity);\n          }\n\n          notification.success({\n            message: status,\n            description: 'Successfully updated provider'\n          });\n          getProviderData();\n          onCancel();\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    });\n\n    return function submitUpdate() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // hold description value in simple provider update modal\n\n\n  const handleChange = value => {\n    setDescriptionValue(value);\n  };\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        getMainImage = _useState6[0],\n        setGetMainImage = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        getBannerImage = _useState8[0],\n        setGetBannerImage = _useState8[1];\n\n  const handleUpadteMain = getMainImage => {\n    setGetMainImage(getMainImage); // setDeleteValue(getDeleteValue)\n  };\n\n  const handleUpadteBanner = getBannerImage => {\n    setGetBannerImage(getBannerImage); // setDeleteValue(getDeleteValue)\n  }; // getting fresh data from provider api\n\n\n  const getProviderData = () => {\n    getProviderApiData().then(res => {\n      if (res.data) {\n        providerStore.updateOne(res.data);\n      }\n    }).catch(err => {\n      console.log('getProviderApiData error', err);\n    });\n  }; // calling provider data api\n\n\n  const getProviderApiData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      let Data = yield axios.get(`${process.env.REACT_APP_API_URL}/api/v1/providers/${provider.id}?scope=with_details`);\n      return Data;\n    });\n\n    return function getProviderApiData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  console.log(\"qqq\", getMainImage, getBannerImage);\n  return /*#__PURE__*/React.createElement(Modal, {\n    forceRender: true,\n    className: \"custom-modal\",\n    title: 'Update Provider',\n    visible: visible,\n    width: 998,\n    bodyStyle: {\n      backgroundColor: '#f0f2f5',\n      padding: 0\n    },\n    footer: true,\n    onCancel: onCancel,\n    afterClose: () => {\n      setFile(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    ref: formRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-6 overflow-y-auto\",\n    style: {\n      maxHeight: '32rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ProviderSimpleForm, {\n    userId: userId,\n    onChangeUpload: onChangeUpload,\n    file: file,\n    descriptionValue: descriptionValue,\n    handleChange: handleChange,\n    handleData: provider,\n    handleUpadteMain: handleUpadteMain,\n    handleUpadteBanner: handleUpadteBanner,\n    role: role,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"bg-white px-6 pt-5 pb-1 flex justify-center\",\n    style: {\n      borderTop: '1px solid #f0f0f0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"mr-3 px-10 rounded\",\n    size: \"small\",\n    type: \"primary\",\n    htmlType: \"submit\",\n    onClick: () => submitUpdate(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }\n  }, \"Update\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"px-10 rounded\",\n    size: \"small\",\n    type: \"dashed\",\n    onClick: () => onCancel(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))));\n}\n\n__signature__(ProviderSimpleUpdateModal, \"useRef{formRef}\\nuseContainer{providerStore}\\nuseForm{[form]}\\nuseState{[file, setFile](null)}\\nuseState{[descriptionValue,setDescriptionValue]('')}\\nuseEffect{}\\nuseAxios{[{ error: providerCreateError }, createSimpleProvider]}\\nuseState{[getMainImage, setGetMainImage]}\\nuseState{[getBannerImage, setGetBannerImage]}\", () => [useAxios]);\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(axios, \"axios\", \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderSimpleUpdateModal.js\");\n  reactHotLoader.register(ProviderSimpleUpdateModal, \"ProviderSimpleUpdateModal\", \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderSimpleUpdateModal.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderSimpleUpdateModal.js"],"names":["React","useEffect","useState","useRef","Modal","Form","Button","notification","ProviderSimpleForm","useAxios","configure","axiosInstance","ProviderStore","AuthService","UploaderService","axios","require","default","ProviderSimpleUpdateModal","props","formRef","providerStore","useContainer","userId","currentSession","id","useForm","form","provider","onCancel","visible","file","setFile","descriptionValue","setDescriptionValue","token","JSON","parse","localStorage","getItem","role","onChangeUpload","e","populateFields","p","setFieldsValue","name","location","description","current","Files","url","method","manual","providerCreateError","error","createSimpleProvider","submitUpdate","values","validateFields","data","getMainImage","getBannerImage","status","updateOne","type","results","upload","mime_type","uploaded_by_user_id","fileable_type","fileable_id","binaryFile","originFileObj","providerEntity","entities","push","success","message","getProviderData","console","handleChange","value","setGetMainImage","setGetBannerImage","handleUpadteMain","handleUpadteBanner","getProviderApiData","then","res","catch","err","log","Data","get","process","env","REACT_APP_API_URL","backgroundColor","padding","maxHeight","borderTop"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,YAA9B,QAAkD,MAAlD;AACA,OAAOC,kBAAP,MAA+B,wCAA/B;AACA,OAAOC,QAAP,IAAmBC,SAAnB,QAAoC,aAApC;AAEA,OAAOC,aAAP,MAA0B,wBAA1B;AAEA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,iCAAP;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA/B;;AAEAP,SAAS,CAAC;AACRK,EAAAA,KAAK,EAAEJ;AADC,CAAD,CAAT;AAKA,eAAe,SAASO,yBAAT,CAAmCC,KAAnC,EAA0C;AACvD,QAAMC,OAAO,GAAGjB,MAAM,CAAC,IAAD,CAAtB;AACA,QAAMkB,aAAa,GAAGT,aAAa,CAACU,YAAd,EAAtB;AAFuD,QAG3CC,MAH2C,GAGhCV,WAAW,CAACW,cAHoB,CAG/CC,EAH+C;;AAAA,wBAIxCpB,IAAI,CAACqB,OAAL,EAJwC;AAAA;AAAA,QAIhDC,IAJgD;;AAAA,0BAKVR,KALU,CAK/CS,QAL+C;AAAA,QAK/CA,QAL+C,gCAKpC,EALoC;AAAA,QAKhCC,QALgC,GAKVV,KALU,CAKhCU,QALgC;AAAA,QAKtBC,OALsB,GAKVX,KALU,CAKtBW,OALsB;;AAAA,oBAO/B5B,QAAQ,CAAC,IAAD,CAPuB;AAAA;AAAA,QAOhD6B,IAPgD;AAAA,QAO1CC,OAP0C;;AAAA,qBASV9B,QAAQ,CAAC,EAAD,CATE;AAAA;AAAA,QAShD+B,gBATgD;AAAA,QAS/BC,mBAT+B;;AAUvD,MAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAX,CAAZ;AACF,MAAIC,IAAI,GAACL,KAAK,CAACK,IAAf;;AAGE,QAAMC,cAAc,GAAIC,CAAD,IAAO;AAAA,UACpBX,IADoB,GACXW,CADW,CACpBX,IADoB;;AAE5B,QAAIA,IAAJ,EAAU;AACRC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD;AACF,GALD;;AAOA,WAASY,cAAT,CAAwBC,CAAxB,EAA2B;AACzBjB,IAAAA,IAAI,CAACkB,cAAL,CAAoB;AAClBC,MAAAA,IAAI,EAAEF,CAAC,CAACE,IADU;AAElBC,MAAAA,QAAQ,EAAEH,CAAC,CAACG,QAFM;AAGlBC,MAAAA,WAAW,EAAEJ,CAAC,CAACI;AAHG,KAApB;AAKD;;AAED/C,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,OAAO,CAAC6B,OAAZ,EAAqB;AACnBN,MAAAA,cAAc,CAACf,QAAD,CAAd;AACD,KAHa,CAKd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,GAhBM,EAiBP,CAACT,KAAD,EAAQS,QAAR,EAAkBA,QAAQ,CAACsB,KAA3B,EAAkC9B,OAAlC,CAjBO,CAAT;;AA7BuD,oBAgDQX,QAAQ,CACrE;AACE0C,IAAAA,GAAG,EAAI,cAAavB,QAAQ,CAACH,EAAG,EADlC;AAEE2B,IAAAA,MAAM,EAAE;AAFV,GADqE,EAKrE;AAAEC,IAAAA,MAAM,EAAE;AAAV,GALqE,CAhDhB;AAAA;AAAA,QAgDvCC,mBAhDuC,iBAgD9CC,KAhD8C;AAAA,QAgDhBC,oBAhDgB;;AAyDvD,QAAMC,YAAY;AAAA,iCAAG,aAAY;AAC/B,YAAMC,MAAM,SAAO/B,IAAI,CAACgC,cAAL,CAAoB,CACrC,MADqC,EAErC,UAFqC,EAGrC,UAHqC,EAIrC,YAJqC,EAKrC,cALqC,EAMrC,aANqC,CAApB,CAAnB,CAD+B,CAS/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAI;AAAA,4CAC6BH,oBAAoB,CAAC;AAClDI,UAAAA,IAAI,kCACCF,MADD;AAEF,0BAAcG,YAFZ;AAGF,4BAAgBC,cAHd;AAIF,2BAAe7B;AAJb;AAD8C,SAAD,CADjD;AAAA,cACM2B,IADN,yBACMA,IADN;AAAA,cACYG,MADZ,yBACYA,MADZ,EASF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,YAAIA,MAAM,IAAIA,MAAM,KAAK,GAAzB,EAA8B;AAC5B1C,UAAAA,aAAa,CAAC2C,SAAd,CAAwBJ,IAAxB;;AACA,cAAIA,IAAI,IAAI7B,IAAR,IAAgBR,MAApB,EAA4B;AAAA,kBAClBuB,IADkB,GACHf,IADG,CAClBe,IADkB;AAAA,kBACZmB,IADY,GACHlC,IADG,CACZkC,IADY;AAE1B,kBAAMC,OAAO,SAASpD,eAAe,CAACqD,MAAhB,CAAuB;AAC3CrB,cAAAA,IAD2C;AAE3CsB,cAAAA,SAAS,EAAEH,IAFgC;AAG3CI,cAAAA,mBAAmB,EAAE9C,MAHsB;AAI3C+C,cAAAA,aAAa,EAAE,UAJ4B;AAK3CC,cAAAA,WAAW,EAAEX,IAAI,CAACnC,EALyB;AAM3C+C,cAAAA,UAAU,EAAEzC,IAAI,CAAC0C;AAN0B,aAAvB,CAAtB;AAQA,kBAAMC,cAAc,GAAGrD,aAAa,CAACsD,QAAd,CAAuBf,IAAI,CAACnC,EAA5B,CAAvB;AACAiD,YAAAA,cAAc,CAACxB,KAAf,CAAqB0B,IAArB,mBACKV,OAAO,CAACnC,IAAR,CAAa6B,IADlB;AAGAvC,YAAAA,aAAa,CAAC2C,SAAd,CAAwBU,cAAxB;AACD;;AACDnE,UAAAA,YAAY,CAACsE,OAAb,CAAqB;AACnBC,YAAAA,OAAO,EAAEf,MADU;AAEnBf,YAAAA,WAAW,EAAE;AAFM,WAArB;AAIA+B,UAAAA,eAAe;AACflD,UAAAA,QAAQ;AACT;AACF,OA3CD,CA2CE,OAAOa,CAAP,EAAU;AACVsC,QAAAA,OAAO,CAACzB,KAAR,CAAcb,CAAd;AACD;AACF,KAhEiB;;AAAA,oBAAZe,YAAY;AAAA;AAAA;AAAA,KAAlB,CAzDuD,CA0HzD;;;AACE,QAAMwB,YAAY,GAAEC,KAAD,IAAS;AAC1BhD,IAAAA,mBAAmB,CAACgD,KAAD,CAAnB;AACD,GAFD;;AA3HuD,qBA+HfhF,QAAQ,EA/HO;AAAA;AAAA,QA+HhD2D,YA/HgD;AAAA,QA+HlCsB,eA/HkC;;AAAA,qBAgIXjF,QAAQ,EAhIG;AAAA;AAAA,QAgIhD4D,cAhIgD;AAAA,QAgIhCsB,iBAhIgC;;AAkIvD,QAAMC,gBAAgB,GAAIxB,YAAD,IAAkB;AACzCsB,IAAAA,eAAe,CAACtB,YAAD,CAAf,CADyC,CAEzC;AACD,GAHD;;AAIA,QAAMyB,kBAAkB,GAAIxB,cAAD,IAAoB;AAC7CsB,IAAAA,iBAAiB,CAACtB,cAAD,CAAjB,CAD6C,CAE7C;AACD,GAHD,CAtIuD,CA0IzD;;;AACE,QAAMiB,eAAe,GAAC,MAAI;AACxBQ,IAAAA,kBAAkB,GAAGC,IAArB,CAA0BC,GAAG,IAAE;AAC7B,UAAIA,GAAG,CAAC7B,IAAR,EAAc;AACZvC,QAAAA,aAAa,CAAC2C,SAAd,CAAwByB,GAAG,CAAC7B,IAA5B;AACH;AACA,KAJD,EAIG8B,KAJH,CAISC,GAAG,IAAE;AACZX,MAAAA,OAAO,CAACY,GAAR,CAAY,0BAAZ,EAAuCD,GAAvC;AACD,KAND;AAQD,GATD,CA3IuD,CAqJzD;;;AACG,QAAMJ,kBAAkB;AAAA,kCAAG,aAAY;AACtC,UAAIM,IAAI,SAAS9E,KAAK,CAAC+E,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,qBAAoBrE,QAAQ,CAACH,EAAG,qBAA3E,CAAjB;AACA,aAAOoE,IAAP;AACD,KAHwB;;AAAA,oBAAlBN,kBAAkB;AAAA;AAAA;AAAA,KAAxB;;AAKDP,EAAAA,OAAO,CAACY,GAAR,CAAY,KAAZ,EAAmB/B,YAAnB,EAAiCC,cAAjC;AAEA,sBACE,oBAAC,KAAD;AACE,IAAA,WAAW,EAAE,IADf;AAEE,IAAA,SAAS,EAAC,cAFZ;AAGE,IAAA,KAAK,EAAE,iBAHT;AAIE,IAAA,OAAO,EAAEhC,OAJX;AAKE,IAAA,KAAK,EAAE,GALT;AAME,IAAA,SAAS,EAAE;AAAEoE,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,OAAO,EAAE;AAAvC,KANb;AAOE,IAAA,MAAM,EAAE,IAPV;AAQE,IAAA,QAAQ,EAAEtE,QARZ;AASE,IAAA,UAAU,EAAE,MAAM;AAChBG,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAaE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEL,IAAZ;AAAkB,IAAA,GAAG,EAAEP,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAqC,IAAA,KAAK,EAAE;AAAEgF,MAAAA,SAAS,EAAE;AAAb,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,kBAAD;AACE,IAAA,MAAM,EAAE7E,MADV;AAEE,IAAA,cAAc,EAAEkB,cAFlB;AAGE,IAAA,IAAI,EAAEV,IAHR;AAIE,IAAA,gBAAgB,EAAEE,gBAJpB;AAKE,IAAA,YAAY,EAAEgD,YALhB;AAME,IAAA,UAAU,EAAErD,QANd;AAOE,IAAA,gBAAgB,EAAEyD,gBAPpB;AAQE,IAAA,kBAAkB,EAAEC,kBARtB;AASE,IAAA,IAAI,EAAE9C,IATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAcE;AACE,IAAA,SAAS,EAAC,6CADZ;AAEE,IAAA,KAAK,EAAE;AACL6D,MAAAA,SAAS,EAAE;AADN,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,MAAD;AACE,IAAA,SAAS,EAAC,oBADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,IAAI,EAAC,SAHP;AAIE,IAAA,QAAQ,EAAC,QAJX;AAKE,IAAA,OAAO,EAAE,MAAM5C,YAAY,EAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAeE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAC,eADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,OAAO,EAAE,MAAM5B,QAAQ,EAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,CAdF,CAbF,CADF;AAuDD;;cApNuBX,yB,0UAgDyCT,Q;;;;;;;;;;;0BAvD3DM,K;0BAOkBG,yB","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { Modal, Form, Button, notification } from 'antd';\nimport ProviderSimpleForm from 'components/provider/ProviderSimpleForm';\nimport useAxios, { configure } from 'axios-hooks';\n\nimport axiosInstance from 'services/AxiosInstance';\nimport { orderBy } from 'lodash';\nimport ProviderStore from 'store/Provider';\nimport AuthService from 'services/AuthService';\nimport UploaderService from 'services/Uploader';\nimport 'assets/scss/antd-overrides.scss';\nconst axios = require('axios').default;\n\nconfigure({\n  axios: axiosInstance,\n});\n\n\nexport default function ProviderSimpleUpdateModal(props) {\n  const formRef = useRef(null);\n  const providerStore = ProviderStore.useContainer();\n  const { id: userId } = AuthService.currentSession;\n  const [form] = Form.useForm();\n  const { provider = {}, onCancel, visible } = props;\n\n  const [file, setFile] = useState(null);\n\n  const [descriptionValue,setDescriptionValue]=useState('')\n  let token = JSON.parse(localStorage.getItem(\"currentSession\"))\nlet role=token.role;\n\n\n  const onChangeUpload = (e) => {\n    const { file } = e;\n    if (file) {\n      setFile(file);\n    }\n  };\n\n  function populateFields(p) {\n    form.setFieldsValue({\n      name: p.name,\n      location: p.location,\n      description: p.description,\n    });\n  }\n\n  useEffect(() => {\n    if (formRef.current) {\n      populateFields(provider);\n    }\n\n    // if (provider.Files) {\n    //   const orderedFiles = orderBy(\n    //     provider.Files,\n    //     ['fileable_type', 'createdAt'],\n    //     ['desc', 'desc']\n    //   );\n    //     if (orderedFiles[i].fileable_type === 'provider') {\n    //       setFile(orderedFiles[i]);\n    //       break;\n    //     }\n    //   }\n    }\n  , [props, provider, provider.Files, formRef]);\n\n  const [{ error: providerCreateError }, createSimpleProvider] = useAxios(\n    {\n      url:  `/providers/${provider.id}`,\n      method: 'PUT',\n    },\n    { manual: true }\n  );\n\n\n  const submitUpdate = async () => {\n    const values=await form.validateFields([\n      'name',\n      'location',\n      'industry',\n      'main_image',\n      'banner_image',\n      'description'\n    ])\n    // const values = form.getFieldsValue([\n    //   'name',\n    //   'location',\n    //   'industry',\n    //   'main_image',\n    //   'banner_image',\n    //   'description'\n    // ]);\n\n    try {\n      const { data, status } = await createSimpleProvider({\n        data: {\n          ...values,\n          'main_image': getMainImage,\n          'banner_image': getBannerImage,\n          'description': descriptionValue\n        },\n      });\n      // const response = await axiosInstance.put(\n      //   `/providers/${provider.id}`,\n      //   data:{\n      //     ...values,\n      //     'main_image': getImageData,\n      //     'banner_image': getBannerImage,\n      //     'description': descriptionValue\n      //   }\n      // );\n      if (status && status === 200) {\n        providerStore.updateOne(data);\n        if (data && file && userId) {\n          const { name, type } = file;\n          const results = await UploaderService.upload({\n            name,\n            mime_type: type,\n            uploaded_by_user_id: userId,\n            fileable_type: 'provider',\n            fileable_id: data.id,\n            binaryFile: file.originFileObj,\n          });\n          const providerEntity = providerStore.entities[data.id];\n          providerEntity.Files.push({\n            ...results.file.data,\n          });\n          providerStore.updateOne(providerEntity);\n        }\n        notification.success({\n          message: status,\n          description: 'Successfully updated provider',\n        });\n        getProviderData();\n        onCancel();\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n// hold description value in simple provider update modal\n  const handleChange=(value)=>{\n    setDescriptionValue(value);\n  }\n\n  const [getMainImage, setGetMainImage] = useState()\n  const [getBannerImage, setGetBannerImage] = useState()\n\n  const handleUpadteMain = (getMainImage) => {\n    setGetMainImage(getMainImage)\n    // setDeleteValue(getDeleteValue)\n  }\n  const handleUpadteBanner = (getBannerImage) => {\n    setGetBannerImage(getBannerImage)\n    // setDeleteValue(getDeleteValue)\n  }\n// getting fresh data from provider api\n  const getProviderData=()=>{\n    getProviderApiData().then(res=>{\n      if (res.data) {\n        providerStore.updateOne(res.data);\n    }\n    }).catch(err=>{\n      console.log('getProviderApiData error',err)\n    })\n\n  }\n// calling provider data api\n   const getProviderApiData = async () => {\n    let Data = await axios.get(`${process.env.REACT_APP_API_URL}/api/v1/providers/${provider.id}?scope=with_details`)\n    return Data\n  }\n\n  console.log(\"qqq\", getMainImage, getBannerImage)\n\n  return (\n    <Modal\n      forceRender={true}\n      className=\"custom-modal\"\n      title={'Update Provider'}\n      visible={visible}\n      width={998}\n      bodyStyle={{ backgroundColor: '#f0f2f5', padding: 0 }}\n      footer={true}\n      onCancel={onCancel}\n      afterClose={() => {\n        setFile(null);\n      }}\n    >\n      <Form form={form} ref={formRef}>\n        <div className=\"p-6 overflow-y-auto\" style={{ maxHeight: '32rem' }}>\n          <ProviderSimpleForm\n            userId={userId}\n            onChangeUpload={onChangeUpload}\n            file={file}\n            descriptionValue={descriptionValue}\n            handleChange={handleChange}\n            handleData={provider}\n            handleUpadteMain={handleUpadteMain}\n            handleUpadteBanner={handleUpadteBanner}\n            role={role}\n          />\n        </div>\n        <section\n          className=\"bg-white px-6 pt-5 pb-1 flex justify-center\"\n          style={{\n            borderTop: '1px solid #f0f0f0',\n          }}\n        >\n          <Button\n            className=\"mr-3 px-10 rounded\"\n            size=\"small\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            onClick={() => submitUpdate()}\n          >\n            Update\n          </Button>\n          <Button\n            className=\"px-10 rounded\"\n            size=\"small\"\n            type=\"dashed\"\n            onClick={() => onCancel()}\n          >\n            Cancel\n          </Button>\n        </section>\n      </Form>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}