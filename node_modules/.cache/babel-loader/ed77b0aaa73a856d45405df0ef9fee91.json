{"ast":null,"code":"import React from 'react';\n\nfunction createContainer(useHook) {\n  var Context = React.createContext(null);\n\n  function Provider(props) {\n    var value = useHook(props.initialState);\n    return React.createElement(Context.Provider, {\n      value: value\n    }, props.children);\n  }\n\n  function useContainer() {\n    var value = React.useContext(Context);\n\n    if (value === null) {\n      throw new Error(\"Component must be wrapped with <Container.Provider>\");\n    }\n\n    return value;\n  }\n\n  return {\n    Provider: Provider,\n    useContainer: useContainer\n  };\n}\n\nfunction useContainer(container) {\n  return container.useContainer();\n}\n\nexport { createContainer, useContainer };","map":{"version":3,"sources":["../src/unstated-next.tsx"],"names":["createContainer","useHook","Context","React","value","props","useContainer","container"],"mappings":";;SAYgBA,e,CACfC,O,EAAAA;MAEIC,OAAO,GAAGC,KAAK,CAALA,aAAAA,CAAd,IAAcA,C;;WAEd,Q,CAAA,K,EAAA;QACKC,KAAK,GAAGH,OAAO,CAACI,KAAK,CAAzB,YAAmB,C;WACZ,KAAA,CAAA,aAAA,CAACH,OAAO,CAAR,QAAA,EAAA;AAAkBE,MAAAA,KAAK,EAAEA;AAAzB,KAAA,EAAiCC,KAAK,CAA7C,QAAO,C;;;WAGR,Y,GAAA;QACKD,KAAK,GAAGD,KAAK,CAALA,UAAAA,CAAZ,OAAYA,C;;QACRC,KAAK,KAAT,I,EAAoB;YACb,IAAA,KAAA,CAAN,qDAAM,C;;;WAEP,K;;;SAGM;cAAA,QAAA;kBAAYE;AAAZ,G;;;AAGR,SAAgBA,YAAhB,CACCC,SADD,EACCA;SAEOA,SAAS,CAAhB,YAAOA,E","sourcesContent":["import React from \"react\"\n\nexport interface ContainerProviderProps<State = void> {\n\tinitialState?: State\n\tchildren: React.ReactNode\n}\n\nexport interface Container<Value, State = void> {\n\tProvider: React.ComponentType<ContainerProviderProps<State>>\n\tuseContainer: () => Value\n}\n\nexport function createContainer<Value, State = void>(\n\tuseHook: (initialState?: State) => Value,\n): Container<Value, State> {\n\tlet Context = React.createContext<Value | null>(null)\n\n\tfunction Provider(props: ContainerProviderProps<State>) {\n\t\tlet value = useHook(props.initialState)\n\t\treturn <Context.Provider value={value}>{props.children}</Context.Provider>\n\t}\n\n\tfunction useContainer(): Value {\n\t\tlet value = React.useContext(Context)\n\t\tif (value === null) {\n\t\t\tthrow new Error(\"Component must be wrapped with <Container.Provider>\")\n\t\t}\n\t\treturn value\n\t}\n\n\treturn { Provider, useContainer }\n}\n\nexport function useContainer<Value, State = void>(\n\tcontainer: Container<Value, State>,\n): Value {\n\treturn container.useContainer()\n}\n"]},"metadata":{},"sourceType":"module"}