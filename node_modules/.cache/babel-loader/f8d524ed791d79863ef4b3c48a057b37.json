{"ast":null,"code":"import _objectSpread from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _orderBy from \"lodash/orderBy\";\nvar _jsxFileName = \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderSimpleUpdateModal.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Modal, Form, Button, notification } from 'antd';\nimport ProviderSimpleForm from 'components/provider/ProviderSimpleForm';\nimport axiosInstance from 'services/AxiosInstance';\nimport ProviderStore from 'store/Provider';\nimport AuthService from 'services/AuthService';\nimport UploaderService from 'services/Uploader';\nimport 'assets/scss/antd-overrides.scss';\nexport default function ProviderSimpleUpdateModal(props) {\n  const formRef = useRef(null);\n  const providerStore = ProviderStore.useContainer();\n  const userId = AuthService.currentSession.id;\n\n  const _Form$useForm = Form.useForm(),\n        _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n        form = _Form$useForm2[0];\n\n  const _props$provider = props.provider,\n        provider = _props$provider === void 0 ? {} : _props$provider,\n        onCancel = props.onCancel,\n        visible = props.visible;\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        file = _useState2[0],\n        setFile = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        descriptionValue = _useState4[0],\n        setDescriptionValue = _useState4[1];\n\n  const onChangeUpload = e => {\n    const file = e.file;\n\n    if (file) {\n      setFile(file);\n    }\n  };\n\n  function populateFields(p) {\n    form.setFieldsValue({\n      name: p.name,\n      location: p.location,\n      description: p.description\n    });\n  }\n\n  useEffect(() => {\n    if (formRef.current) {\n      populateFields(provider);\n    }\n\n    if (provider.Files) {\n      const orderedFiles = _orderBy(provider.Files, ['fileable_type', 'createdAt'], ['desc', 'desc']);\n\n      for (let i = 0; i < orderedFiles.length; i++) {\n        if (!orderedFiles[i]) {\n          break;\n        }\n\n        if (orderedFiles[i].fileable_type === 'provider') {\n          setFile(orderedFiles[i]);\n          break;\n        }\n      }\n    }\n  }, [props, provider, provider.Files, formRef]);\n\n  const submitUpdate = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      const values = form.getFieldsValue(['name', 'location', 'industry', descriptionValue]);\n\n      try {\n        const response = yield axiosInstance.put(`/providers/${provider.id}`, values);\n\n        if (response && response.status === 200) {\n          providerStore.updateOne(response.data);\n\n          if (response.data && file && userId) {\n            const name = file.name,\n                  type = file.type;\n            const results = yield UploaderService.upload({\n              name,\n              mime_type: type,\n              uploaded_by_user_id: userId,\n              fileable_type: 'provider',\n              fileable_id: response.data.id,\n              binaryFile: file.originFileObj\n            });\n            const providerEntity = providerStore.entities[response.data.id];\n            providerEntity.Files.push(_objectSpread({}, results.file.data));\n            providerStore.updateOne(providerEntity);\n          }\n\n          notification.success({\n            message: response.status,\n            description: 'Successfully updated provider'\n          });\n          onCancel();\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    });\n\n    return function submitUpdate() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // hold description value in simple provider update modal\n\n\n  const handleChange = value => {\n    setDescriptionValue(value);\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    forceRender: true,\n    className: \"custom-modal\",\n    title: 'Update Provider',\n    visible: visible,\n    width: 998,\n    bodyStyle: {\n      backgroundColor: '#f0f2f5',\n      padding: 0\n    },\n    footer: true,\n    onCancel: onCancel,\n    afterClose: () => {\n      setFile(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    ref: formRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-6 overflow-y-auto\",\n    style: {\n      maxHeight: '32rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ProviderSimpleForm, {\n    userId: userId,\n    onChangeUpload: onChangeUpload,\n    file: file,\n    descriptionValue: descriptionValue,\n    handleChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"bg-white px-6 pt-5 pb-1 flex justify-center\",\n    style: {\n      borderTop: '1px solid #f0f0f0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"mr-3 px-10 rounded\",\n    size: \"small\",\n    type: \"primary\",\n    htmlType: \"submit\",\n    onClick: () => submitUpdate(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"Update\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"px-10 rounded\",\n    size: \"small\",\n    type: \"dashed\",\n    onClick: () => onCancel(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))));\n}\n\n__signature__(ProviderSimpleUpdateModal, \"useRef{formRef}\\nuseContainer{providerStore}\\nuseForm{[form]}\\nuseState{[file, setFile](null)}\\nuseState{[descriptionValue,setDescriptionValue]('')}\\nuseEffect{}\");\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ProviderSimpleUpdateModal, \"ProviderSimpleUpdateModal\", \"/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderSimpleUpdateModal.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/src/components/provider/ProviderSimpleUpdateModal.js"],"names":["React","useEffect","useState","useRef","Modal","Form","Button","notification","ProviderSimpleForm","axiosInstance","ProviderStore","AuthService","UploaderService","ProviderSimpleUpdateModal","props","formRef","providerStore","useContainer","userId","currentSession","id","useForm","form","provider","onCancel","visible","file","setFile","descriptionValue","setDescriptionValue","onChangeUpload","e","populateFields","p","setFieldsValue","name","location","description","current","Files","orderedFiles","i","length","fileable_type","submitUpdate","values","getFieldsValue","response","put","status","updateOne","data","type","results","upload","mime_type","uploaded_by_user_id","fileable_id","binaryFile","originFileObj","providerEntity","entities","push","success","message","console","error","handleChange","value","backgroundColor","padding","maxHeight","borderTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { Modal, Form, Button, notification } from 'antd';\nimport ProviderSimpleForm from 'components/provider/ProviderSimpleForm';\nimport axiosInstance from 'services/AxiosInstance';\nimport { orderBy } from 'lodash';\nimport ProviderStore from 'store/Provider';\nimport AuthService from 'services/AuthService';\nimport UploaderService from 'services/Uploader';\nimport 'assets/scss/antd-overrides.scss';\n\nexport default function ProviderSimpleUpdateModal(props) {\n  const formRef = useRef(null);\n  const providerStore = ProviderStore.useContainer();\n  const { id: userId } = AuthService.currentSession;\n  const [form] = Form.useForm();\n  const { provider = {}, onCancel, visible } = props;\n\n  const [file, setFile] = useState(null);\n\n  const [descriptionValue,setDescriptionValue]=useState('')\n\n  const onChangeUpload = (e) => {\n    const { file } = e;\n    if (file) {\n      setFile(file);\n    }\n  };\n\n  function populateFields(p) {\n    form.setFieldsValue({\n      name: p.name,\n      location: p.location,\n      description: p.description,\n    });\n  }\n\n  useEffect(() => {\n    if (formRef.current) {\n      populateFields(provider);\n    }\n\n    if (provider.Files) {\n      const orderedFiles = orderBy(\n        provider.Files,\n        ['fileable_type', 'createdAt'],\n        ['desc', 'desc']\n      );\n      for (let i = 0; i < orderedFiles.length; i++) {\n        if (!orderedFiles[i]) {\n          break;\n        }\n\n        if (orderedFiles[i].fileable_type === 'provider') {\n          setFile(orderedFiles[i]);\n          break;\n        }\n      }\n    }\n  }, [props, provider, provider.Files, formRef]);\n\n  const submitUpdate = async () => {\n    const values = form.getFieldsValue([\n      'name',\n      'location',\n      'industry',\n      descriptionValue,\n    ]);\n\n    try {\n      const response = await axiosInstance.put(\n        `/providers/${provider.id}`,\n        values\n      );\n\n      if (response && response.status === 200) {\n        providerStore.updateOne(response.data);\n        if (response.data && file && userId) {\n          const { name, type } = file;\n          const results = await UploaderService.upload({\n            name,\n            mime_type: type,\n            uploaded_by_user_id: userId,\n            fileable_type: 'provider',\n            fileable_id: response.data.id,\n            binaryFile: file.originFileObj,\n          });\n\n          const providerEntity = providerStore.entities[response.data.id];\n          providerEntity.Files.push({\n            ...results.file.data,\n          });\n\n          providerStore.updateOne(providerEntity);\n        }\n\n        notification.success({\n          message: response.status,\n          description: 'Successfully updated provider',\n        });\n        onCancel();\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n// hold description value in simple provider update modal\n  const handleChange=(value)=>{\n    setDescriptionValue(value);\n  }\n\n  return (\n    <Modal\n      forceRender={true}\n      className=\"custom-modal\"\n      title={'Update Provider'}\n      visible={visible}\n      width={998}\n      bodyStyle={{ backgroundColor: '#f0f2f5', padding: 0 }}\n      footer={true}\n      onCancel={onCancel}\n      afterClose={() => {\n        setFile(null);\n      }}\n    >\n      <Form form={form} ref={formRef}>\n        <div className=\"p-6 overflow-y-auto\" style={{ maxHeight: '32rem' }}>\n          <ProviderSimpleForm\n            userId={userId}\n            onChangeUpload={onChangeUpload}\n            file={file}\n            descriptionValue={descriptionValue}\n            handleChange={handleChange}\n          />\n        </div>\n        <section\n          className=\"bg-white px-6 pt-5 pb-1 flex justify-center\"\n          style={{\n            borderTop: '1px solid #f0f0f0',\n          }}\n        >\n          <Button\n            className=\"mr-3 px-10 rounded\"\n            size=\"small\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            onClick={() => submitUpdate()}\n          >\n            Update\n          </Button>\n          <Button\n            className=\"px-10 rounded\"\n            size=\"small\"\n            type=\"dashed\"\n            onClick={() => onCancel()}\n          >\n            Cancel\n          </Button>\n        </section>\n      </Form>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}