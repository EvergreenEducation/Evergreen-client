{"ast":null,"code":"/* jshint node: true */\n'use strict';\n/**\n  # wildcard\n\n  Very simple wildcard matching, which is designed to provide the same\n  functionality that is found in the\n  [eve](https://github.com/adobe-webplatform/eve) eventing library.\n\n  ## Usage\n\n  It works with strings:\n\n  <<< examples/strings.js\n\n  Arrays:\n\n  <<< examples/arrays.js\n\n  Objects (matching against keys):\n\n  <<< examples/objects.js\n\n  While the library works in Node, if you are are looking for file-based\n  wildcard matching then you should have a look at:\n\n  <https://github.com/isaacs/node-glob>\n**/\n\nfunction WildcardMatcher(text, separator) {\n  this.text = text = text || '';\n  this.hasWild = ~text.indexOf('*');\n  this.separator = separator;\n  this.parts = text.split(separator);\n}\n\nWildcardMatcher.prototype.match = function (input) {\n  var matches = true;\n  var parts = this.parts;\n  var ii;\n  var partsCount = parts.length;\n  var testParts;\n\n  if (typeof input == 'string' || input instanceof String) {\n    if (!this.hasWild && this.text != input) {\n      matches = false;\n    } else {\n      testParts = (input || '').split(this.separator);\n\n      for (ii = 0; matches && ii < partsCount; ii++) {\n        if (parts[ii] === '*') {\n          continue;\n        } else if (ii < testParts.length) {\n          matches = parts[ii] === testParts[ii];\n        } else {\n          matches = false;\n        }\n      } // If matches, then return the component parts\n\n\n      matches = matches && testParts;\n    }\n  } else if (typeof input.splice == 'function') {\n    matches = [];\n\n    for (ii = input.length; ii--;) {\n      if (this.match(input[ii])) {\n        matches[matches.length] = input[ii];\n      }\n    }\n  } else if (typeof input == 'object') {\n    matches = {};\n\n    for (var key in input) {\n      if (this.match(key)) {\n        matches[key] = input[key];\n      }\n    }\n  }\n\n  return matches;\n};\n\nmodule.exports = function (text, test, separator) {\n  var matcher = new WildcardMatcher(text, separator || /[\\/\\.]/);\n\n  if (typeof test != 'undefined') {\n    return matcher.match(test);\n  }\n\n  return matcher;\n};","map":{"version":3,"sources":["/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/wildcard/index.js"],"names":["WildcardMatcher","text","separator","hasWild","indexOf","parts","split","prototype","match","input","matches","ii","partsCount","length","testParts","String","splice","key","module","exports","test","matcher"],"mappings":"AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAASA,eAAT,CAAyBC,IAAzB,EAA+BC,SAA/B,EAA0C;AACxC,OAAKD,IAAL,GAAYA,IAAI,GAAGA,IAAI,IAAI,EAA3B;AACA,OAAKE,OAAL,GAAe,CAACF,IAAI,CAACG,OAAL,CAAa,GAAb,CAAhB;AACA,OAAKF,SAAL,GAAiBA,SAAjB;AACA,OAAKG,KAAL,GAAaJ,IAAI,CAACK,KAAL,CAAWJ,SAAX,CAAb;AACD;;AAEDF,eAAe,CAACO,SAAhB,CAA0BC,KAA1B,GAAkC,UAASC,KAAT,EAAgB;AAChD,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIL,KAAK,GAAG,KAAKA,KAAjB;AACA,MAAIM,EAAJ;AACA,MAAIC,UAAU,GAAGP,KAAK,CAACQ,MAAvB;AACA,MAAIC,SAAJ;;AAEA,MAAI,OAAOL,KAAP,IAAgB,QAAhB,IAA4BA,KAAK,YAAYM,MAAjD,EAAyD;AACvD,QAAI,CAAC,KAAKZ,OAAN,IAAiB,KAAKF,IAAL,IAAaQ,KAAlC,EAAyC;AACvCC,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD,MAEO;AACLI,MAAAA,SAAS,GAAG,CAACL,KAAK,IAAI,EAAV,EAAcH,KAAd,CAAoB,KAAKJ,SAAzB,CAAZ;;AACA,WAAKS,EAAE,GAAG,CAAV,EAAaD,OAAO,IAAIC,EAAE,GAAGC,UAA7B,EAAyCD,EAAE,EAA3C,EAA+C;AAC7C,YAAIN,KAAK,CAACM,EAAD,CAAL,KAAc,GAAlB,EAAwB;AACtB;AACD,SAFD,MAEO,IAAIA,EAAE,GAAGG,SAAS,CAACD,MAAnB,EAA2B;AAChCH,UAAAA,OAAO,GAAGL,KAAK,CAACM,EAAD,CAAL,KAAcG,SAAS,CAACH,EAAD,CAAjC;AACD,SAFM,MAEA;AACLD,UAAAA,OAAO,GAAG,KAAV;AACD;AACF,OAVI,CAYL;;;AACAA,MAAAA,OAAO,GAAGA,OAAO,IAAII,SAArB;AACD;AACF,GAlBD,MAmBK,IAAI,OAAOL,KAAK,CAACO,MAAb,IAAuB,UAA3B,EAAuC;AAC1CN,IAAAA,OAAO,GAAG,EAAV;;AAEA,SAAKC,EAAE,GAAGF,KAAK,CAACI,MAAhB,EAAwBF,EAAE,EAA1B,GAAgC;AAC9B,UAAI,KAAKH,KAAL,CAAWC,KAAK,CAACE,EAAD,CAAhB,CAAJ,EAA2B;AACzBD,QAAAA,OAAO,CAACA,OAAO,CAACG,MAAT,CAAP,GAA0BJ,KAAK,CAACE,EAAD,CAA/B;AACD;AACF;AACF,GARI,MASA,IAAI,OAAOF,KAAP,IAAgB,QAApB,EAA8B;AACjCC,IAAAA,OAAO,GAAG,EAAV;;AAEA,SAAK,IAAIO,GAAT,IAAgBR,KAAhB,EAAuB;AACrB,UAAI,KAAKD,KAAL,CAAWS,GAAX,CAAJ,EAAqB;AACnBP,QAAAA,OAAO,CAACO,GAAD,CAAP,GAAeR,KAAK,CAACQ,GAAD,CAApB;AACD;AACF;AACF;;AAED,SAAOP,OAAP;AACD,CA9CD;;AAgDAQ,MAAM,CAACC,OAAP,GAAiB,UAASlB,IAAT,EAAemB,IAAf,EAAqBlB,SAArB,EAAgC;AAC/C,MAAImB,OAAO,GAAG,IAAIrB,eAAJ,CAAoBC,IAApB,EAA0BC,SAAS,IAAI,QAAvC,CAAd;;AACA,MAAI,OAAOkB,IAAP,IAAe,WAAnB,EAAgC;AAC9B,WAAOC,OAAO,CAACb,KAAR,CAAcY,IAAd,CAAP;AACD;;AAED,SAAOC,OAAP;AACD,CAPD","sourcesContent":["/* jshint node: true */\n'use strict';\n\n/**\n  # wildcard\n\n  Very simple wildcard matching, which is designed to provide the same\n  functionality that is found in the\n  [eve](https://github.com/adobe-webplatform/eve) eventing library.\n\n  ## Usage\n\n  It works with strings:\n\n  <<< examples/strings.js\n\n  Arrays:\n\n  <<< examples/arrays.js\n\n  Objects (matching against keys):\n\n  <<< examples/objects.js\n\n  While the library works in Node, if you are are looking for file-based\n  wildcard matching then you should have a look at:\n\n  <https://github.com/isaacs/node-glob>\n**/\n\nfunction WildcardMatcher(text, separator) {\n  this.text = text = text || '';\n  this.hasWild = ~text.indexOf('*');\n  this.separator = separator;\n  this.parts = text.split(separator);\n}\n\nWildcardMatcher.prototype.match = function(input) {\n  var matches = true;\n  var parts = this.parts;\n  var ii;\n  var partsCount = parts.length;\n  var testParts;\n\n  if (typeof input == 'string' || input instanceof String) {\n    if (!this.hasWild && this.text != input) {\n      matches = false;\n    } else {\n      testParts = (input || '').split(this.separator);\n      for (ii = 0; matches && ii < partsCount; ii++) {\n        if (parts[ii] === '*')  {\n          continue;\n        } else if (ii < testParts.length) {\n          matches = parts[ii] === testParts[ii];\n        } else {\n          matches = false;\n        }\n      }\n\n      // If matches, then return the component parts\n      matches = matches && testParts;\n    }\n  }\n  else if (typeof input.splice == 'function') {\n    matches = [];\n\n    for (ii = input.length; ii--; ) {\n      if (this.match(input[ii])) {\n        matches[matches.length] = input[ii];\n      }\n    }\n  }\n  else if (typeof input == 'object') {\n    matches = {};\n\n    for (var key in input) {\n      if (this.match(key)) {\n        matches[key] = input[key];\n      }\n    }\n  }\n\n  return matches;\n};\n\nmodule.exports = function(text, test, separator) {\n  var matcher = new WildcardMatcher(text, separator || /[\\/\\.]/);\n  if (typeof test != 'undefined') {\n    return matcher.match(test);\n  }\n\n  return matcher;\n};\n"]},"metadata":{},"sourceType":"script"}