{"ast":null,"code":"var utilities = require('./utilities'); // constants\n\n\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\n\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i; // http://www.w3.org/TR/html/syntax.html#void-elements\n\nvar VOID_ELEMENTS_REGEX = /<(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)(.*?)\\/?>/gi; // detect IE browser\n\nvar isIE9 = utilities.isIE(9);\nvar isIE = isIE9 || utilities.isIE(); // falls back to `parseFromString` if `createHTMLDocument` cannot be used\n\nvar parseFromDocument = function () {\n  throw new Error('This browser does not support `document.implementation.createHTMLDocument`');\n};\n\nvar parseFromString = function () {\n  throw new Error('This browser does not support `DOMParser.prototype.parseFromString`');\n};\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\n\n\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser(); // IE9 does not support 'text/html' MIME type\n  // https://msdn.microsoft.com/en-us/library/ff975278(v=vs.85).aspx\n\n  var mimeType = isIE9 ? 'text/xml' : 'text/html';\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    } // because IE9 only supports MIME type 'text/xml', void elements need to be self-closed\n\n\n    if (isIE9) {\n      html = html.replace(VOID_ELEMENTS_REGEX, '<$1$2$3/>');\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n\n  parseFromDocument = parseFromString;\n}\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\n\n\nif (document.implementation) {\n  // title parameter is required in IE\n  // https://msdn.microsoft.com/en-us/library/ff975457(v=vs.85).aspx\n  var doc = document.implementation.createHTMLDocument(isIE ? 'html-dom-parser' : undefined);\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n\n    try {\n      doc.documentElement.innerHTML = html;\n      return doc; // fallback when certain elements in `documentElement` are read-only (IE9)\n    } catch (err) {\n      if (parseFromString) {\n        return parseFromString(html);\n      }\n    }\n  };\n}\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\n\n\nvar template = document.createElement('template');\nvar parseFromTemplate;\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string} html - The HTML string.\n * @return {NodeList|Array}\n */\n\n\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html); // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(HEAD)[0];\n\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(BODY)[0];\n\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      return doc.getElementsByTagName(HTML);\n\n    case HEAD:\n    case BODY:\n      elements = parseFromDocument(html).getElementsByTagName(firstTagName); // if there's a sibling element, then return both elements\n\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n\n      return elements;\n    // low-level tag or text\n\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n\n      return parseFromDocument(html, BODY).getElementsByTagName(BODY)[0].childNodes;\n  }\n}\n\nmodule.exports = domparser;","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/node_modules/html-dom-parser/lib/domparser.js"],"names":["utilities","require","HTML","HEAD","BODY","FIRST_TAG_REGEX","HEAD_TAG_REGEX","BODY_TAG_REGEX","VOID_ELEMENTS_REGEX","isIE9","isIE","parseFromDocument","Error","parseFromString","window","DOMParser","domParser","mimeType","html","tagName","replace","document","implementation","doc","createHTMLDocument","undefined","documentElement","getElementsByTagName","innerHTML","err","template","createElement","parseFromTemplate","content","childNodes","domparser","firstTagName","match","toLowerCase","element","elements","test","parentNode","removeChild","module","exports"],"mappings":"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","sourcesContent":["var utilities = require('./utilities');\n\n// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i;\n// http://www.w3.org/TR/html/syntax.html#void-elements\nvar VOID_ELEMENTS_REGEX = /<(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)(.*?)\\/?>/gi;\n\n// detect IE browser\nvar isIE9 = utilities.isIE(9);\nvar isIE = isIE9 || utilities.isIE();\n\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\nvar parseFromDocument = function () {\n  throw new Error(\n    'This browser does not support `document.implementation.createHTMLDocument`'\n  );\n};\n\nvar parseFromString = function () {\n  throw new Error(\n    'This browser does not support `DOMParser.prototype.parseFromString`'\n  );\n};\n\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n\n  // IE9 does not support 'text/html' MIME type\n  // https://msdn.microsoft.com/en-us/library/ff975278(v=vs.85).aspx\n  var mimeType = isIE9 ? 'text/xml' : 'text/html';\n\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n\n    // because IE9 only supports MIME type 'text/xml', void elements need to be self-closed\n    if (isIE9) {\n      html = html.replace(VOID_ELEMENTS_REGEX, '<$1$2$3/>');\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n\n  parseFromDocument = parseFromString;\n}\n\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (document.implementation) {\n  // title parameter is required in IE\n  // https://msdn.microsoft.com/en-us/library/ff975457(v=vs.85).aspx\n  var doc = document.implementation.createHTMLDocument(\n    isIE ? 'html-dom-parser' : undefined\n  );\n\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n\n    try {\n      doc.documentElement.innerHTML = html;\n      return doc;\n      // fallback when certain elements in `documentElement` are read-only (IE9)\n    } catch (err) {\n      if (parseFromString) {\n        return parseFromString(html);\n      }\n    }\n  };\n}\n\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = document.createElement('template');\nvar parseFromTemplate;\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string} html - The HTML string.\n * @return {NodeList|Array}\n */\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html);\n\n      // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(HEAD)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(BODY)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      return doc.getElementsByTagName(HTML);\n\n    case HEAD:\n    case BODY:\n      elements = parseFromDocument(html).getElementsByTagName(firstTagName);\n\n      // if there's a sibling element, then return both elements\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n      return elements;\n\n    // low-level tag or text\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n\n      return parseFromDocument(html, BODY).getElementsByTagName(BODY)[0]\n        .childNodes;\n  }\n}\n\nmodule.exports = domparser;\n"]},"metadata":{},"sourceType":"script"}