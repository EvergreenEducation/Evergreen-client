{"ast":null,"code":"import _objectSpread from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _flowRight from \"lodash/flowRight\";\nimport _mapValues from \"lodash/mapValues\";\nimport _sortBy from \"lodash/sortBy\";\nimport _reject from \"lodash/reject\";\nimport _head from \"lodash/head\";\nimport _map from \"lodash/map\";\nimport _orderBy from \"lodash/orderBy\";\nimport _isNil from \"lodash/isNil\";\nimport _groupBy from \"lodash/groupBy\";\nvar _jsxFileName = \"/home/devnineteen/Music/evergreen-frontend/src/components/pathway/PathwayUpdateModal.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Modal, Form, Button, notification } from 'antd';\nimport useAxios, { configure } from 'axios-hooks';\nimport axiosInstance from 'services/AxiosInstance';\nimport DataFieldStore from 'store/DataField';\nimport PathwayForm from 'components/pathway/PathwayForm';\nimport AuthService from 'services/AuthService';\nimport UploaderService from 'services/Uploader';\nimport OfferStore from 'store/Offer';\nimport { useImageAndBannerImage } from 'hooks';\nimport 'assets/scss/antd-overrides.scss';\nconfigure({\n  axios: axiosInstance\n});\nexport default function PathwayUpdateModal({\n  pathway,\n  onCancel,\n  visible,\n  pathwayStore,\n  providers,\n  role,\n  getPathwayListData\n}) {\n  const formRef = useRef(null);\n  const _AuthService$currentS = AuthService.currentSession,\n        userId = _AuthService$currentS.id,\n        provider_id = _AuthService$currentS.provider_id;\n\n  const _useImageAndBannerIma = useImageAndBannerImage(),\n        _useImageAndBannerIma2 = _slicedToArray(_useImageAndBannerIma, 3),\n        _useImageAndBannerIma3 = _useImageAndBannerIma2[0],\n        file = _useImageAndBannerIma3.file,\n        newFile = _useImageAndBannerIma3.newFile,\n        onFileChange = _useImageAndBannerIma3.onFileChange,\n        setFile = _useImageAndBannerIma3.setFile,\n        onChangeFileUpload = _useImageAndBannerIma3.onChangeFileUpload,\n        _useImageAndBannerIma4 = _useImageAndBannerIma2[1],\n        bannerFile = _useImageAndBannerIma4.bannerFile,\n        onBannerFileChange = _useImageAndBannerIma4.onBannerFileChange,\n        newBannerFile = _useImageAndBannerIma4.newBannerFile,\n        setBannerFile = _useImageAndBannerIma4.setBannerFile,\n        onChangeBannerUpload = _useImageAndBannerIma4.onChangeBannerUpload,\n        reset = _useImageAndBannerIma2[2];\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        groupsOfOffers = _useState2[0],\n        setGroupsOfOffers = _useState2[1];\n\n  const _Form$useForm = Form.useForm(),\n        _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n        form = _Form$useForm2[0];\n\n  const datafieldStore = DataFieldStore.useContainer();\n  const offerStore = OfferStore.useContainer();\n\n  const _useAxios = useAxios({\n    method: 'PUT'\n  }, {\n    manual: true\n  }),\n        _useAxios2 = _slicedToArray(_useAxios, 2),\n        putError = _useAxios2[0].error,\n        updatePathway = _useAxios2[1];\n\n  const submitUpdate = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        const values = yield form.validateFields(['banner_image', 'main_image', 'rubric_attachment', 'location_type', 'description', 'learn_and_earn', 'frequency', 'frequency_unit', 'name', 'topics', 'outlook', 'earnings', 'type', 'keywords', 'provider_id', 'is_local_promo', 'is_main_promo', 'external_url']); // console.log(\"valuesssssss\",values)\n\n        let groupOrderByYearNum = [];\n\n        let groups_of_offers = _map(groupsOfOffers, g => {\n          // const linkData = form.getFieldValue(g)\n          // console.log(\"insideeeeeeeeee\",linkData)\n          const year = form.getFieldValue(g.group_name);\n          groupOrderByYearNum.push(g.group_name);\n          const results = {\n            group_name: g.group_name,\n            offer_ids: g.removed ? [] : _map(g.offers, 'offer_id'),\n            year\n          };\n          const semester = form.getFieldValue(`${g.group_name}_semester`) || null;\n\n          if (semester) {\n            return _objectSpread(_objectSpread({}, results), {}, {\n              semester,\n              year\n            });\n          }\n\n          return results;\n        });\n\n        const groupOrder = yield form.validateFields(groupOrderByYearNum);\n        let yearSubmission = [];\n\n        for (const key in groupOrder) {\n          yearSubmission.push({\n            group_name: key,\n            year: groupOrder[key]\n          });\n        }\n\n        yearSubmission = _sortBy(yearSubmission, ['year']).map(({\n          group_name\n        }) => group_name);\n\n        const _yield$updatePathway = yield updatePathway({\n          url: `/pathways/${pathway.id}`,\n          data: _objectSpread(_objectSpread({}, values), {}, {\n            group_sort_order: yearSubmission,\n            groups_of_offers,\n            'rubric_attachment': getUpdateValue,\n            'banner_image': getBannerImage,\n            'main_image': getMainImage,\n            'description': descriptionValue\n          })\n        }),\n              data = _yield$updatePathway.data,\n              status = _yield$updatePathway.status;\n\n        const fileable_type = 'pathway';\n        let filePayload = [];\n\n        if (data && userId) {\n          const pathwayEntity = pathwayStore.entities[data.id];\n\n          if (pathwayEntity.Files) {\n            if (pathwayEntity.Files.length) {\n              filePayload = [...pathwayEntity.Files];\n            }\n          }\n\n          if (onFileChange && newFile) {\n            const results = yield UploaderService.uploadFile(newFile, {\n              uploaded_by_user_id: userId,\n              fileable_type,\n              fileable_id: data.id\n            });\n\n            if (results && results.file.data) {\n              filePayload.push(_objectSpread({}, results.file.data));\n            }\n\n            if (results.success) {\n              notification.success({\n                message: 'Success',\n                description: 'Main image is uploaded'\n              });\n            }\n          }\n\n          if (onBannerFileChange && newBannerFile) {\n            const results = yield UploaderService.uploadFile(newBannerFile, {\n              uploaded_by_user_id: userId,\n              fileable_type,\n              fileable_id: data.id,\n              meta: 'banner-image'\n            });\n\n            if (results && results.file.data) {\n              filePayload.push(_objectSpread({}, results.file.data));\n            }\n\n            if (results.success) {\n              notification.success({\n                message: 'Success',\n                description: 'Banner image is uploaded'\n              });\n            }\n          }\n        }\n\n        if (data) {\n          pathwayStore.updateOne(data);\n        }\n\n        if (status === 200) {\n          if (filePayload.length) {\n            let clonedData = Object.assign(data);\n            clonedData.Files = filePayload;\n            pathwayStore.updateOne(clonedData);\n          }\n\n          notification.success({\n            message: status,\n            description: 'Successfully updated pathway'\n          });\n          onCancel();\n          getPathwayListData();\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    });\n\n    return function submitUpdate() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const groupedDataFields = _groupBy(pathway.DataFields, 'type') || [];\n  let myTopics = [];\n\n  if (!_isNil(groupedDataFields.topic)) {\n    myTopics = groupedDataFields.topic.reduce((acc, curr, index) => {\n      if (_isNil(acc)) {\n        return [];\n      }\n\n      acc.push(curr.id);\n      return acc;\n    }, []);\n  }\n\n  function populateFields(p) {\n    form.setFieldsValue(_objectSpread(_objectSpread({}, p), {}, {\n      frequency_unit: Number(p.frequency_unit),\n      topics: myTopics\n    }));\n\n    if (p && p.description) {\n      setDescriptionValue(p.description);\n    }\n  }\n\n  useEffect(() => {\n    if (formRef.current) {\n      populateFields(pathway);\n    }\n\n    if (formRef.current && role === 'provider') {\n      if (providerEntities.length) {\n        providerEntities = _reject(providerEntities, p => {\n          return !(p.id === provider_id);\n        });\n        form.setFieldsValue({\n          provider_id: _head(providerEntities).id || null\n        });\n      }\n    }\n\n    if (putError) {\n      const _putError$request = putError.request,\n            status = _putError$request.status,\n            statusText = _putError$request.statusText;\n      notification.error({\n        message: status,\n        description: statusText\n      });\n    }\n\n    if (pathway.Files) {\n      let groupedFiles = _flowRight([v => _mapValues(v, f => _orderBy(f, ['fileable_type', 'createdAt', 'id'], ['desc', 'desc', 'asc'])), v => _groupBy(v, 'meta'), v => v.filter(f => f.fileable_type === 'pathway')])(pathway.Files);\n\n      if (!onFileChange && groupedFiles[null]) {\n        setFile(_head(groupedFiles[null]));\n      }\n\n      if (!onBannerFileChange && groupedFiles['banner-image']) {\n        setBannerFile(_head(groupedFiles['banner-image']));\n      }\n    }\n  }, [pathway, putError, formRef, file, bannerFile]);\n  let providerEntities = providers;\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        getPdfUrl = _useState4[0],\n        setGetPdfUrl = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        getUpdateValue = _useState6[0],\n        setGetUpdatedValue = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        getMainImage = _useState8[0],\n        setGetMainImage = _useState8[1];\n\n  const _useState9 = useState(),\n        _useState10 = _slicedToArray(_useState9, 2),\n        getBannerImage = _useState10[0],\n        setGetBannerImage = _useState10[1];\n\n  const handlePropData = (getPdfUrl, getUpdateValue) => {\n    setGetPdfUrl(getPdfUrl);\n    setGetUpdatedValue(getUpdateValue); // setDeleteValue(getDeleteValue)\n  };\n\n  const handleUpadteMain = getMainImage => {\n    setGetMainImage(getMainImage); // setDeleteValue(getDeleteValue)\n  };\n\n  const handleUpadteBanner = getBannerImage => {\n    setGetBannerImage(getBannerImage); // setDeleteValue(getDeleteValue)\n  };\n\n  const _useState11 = useState(''),\n        _useState12 = _slicedToArray(_useState11, 2),\n        descriptionValue = _useState12[0],\n        setDescriptionValue = _useState12[1];\n\n  const handleDescriptionValue = value => {\n    setDescriptionValue(value);\n  }; // console.log(\"ouuuuuuuu\",getUpdateValue)\n\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    forceRender: true,\n    className: \"custom-modal\",\n    title: 'Update Pathway',\n    visible: visible,\n    width: 998,\n    bodyStyle: {\n      backgroundColor: '#f0f2f5',\n      padding: 0\n    },\n    footer: true,\n    onCancel: onCancel,\n    afterClose: () => {\n      reset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    ref: formRef,\n    initialValues: {\n      provider_id: role === 'provider' && providers && providers.length ? _head(providers).id : null\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-6 overflow-y-auto\",\n    style: {\n      maxHeight: '32rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PathwayForm, {\n    pathway: pathway,\n    datafields: datafieldStore.entities,\n    offers: Object.values(offerStore.entities),\n    groupsOfOffers: groupsOfOffers,\n    setGroupsOfOffers: setGroupsOfOffers,\n    userId: userId,\n    onChangeUpload: onChangeFileUpload,\n    file: file,\n    bannerFile: bannerFile,\n    onChangeBannerUpload: onChangeBannerUpload,\n    providers: providerEntities,\n    role: role,\n    form: form,\n    offerStore: offerStore,\n    handlePropData: handlePropData,\n    handleUpadteMain: handleUpadteMain,\n    handleUpadteBanner: handleUpadteBanner,\n    descriptionValue: descriptionValue,\n    handleDescriptionValue: handleDescriptionValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"bg-white px-6 pt-5 pb-1 flex justify-center\",\n    style: {\n      borderTop: '1px solid #f0f0f0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"mr-3 px-10 rounded\",\n    size: \"small\",\n    type: \"primary\",\n    htmlType: \"submit\",\n    onClick: submitUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 11\n    }\n  }, \"Update\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"px-10 rounded\",\n    size: \"small\",\n    type: \"dashed\",\n    onClick: () => onCancel(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))));\n}\n\n__signature__(PathwayUpdateModal, \"useRef{formRef}\\nuseImageAndBannerImage{[\\r\\n    { file, newFile, onFileChange, setFile, onChangeFileUpload },\\r\\n    {\\r\\n      bannerFile,\\r\\n      onBannerFileChange,\\r\\n      newBannerFile,\\r\\n      setBannerFile,\\r\\n      onChangeBannerUpload,\\r\\n    },\\r\\n    reset,\\r\\n  ]}\\nuseState{[groupsOfOffers, setGroupsOfOffers]([])}\\nuseForm{[form]}\\nuseContainer{datafieldStore}\\nuseContainer{offerStore}\\nuseAxios{[{ error: putError }, updatePathway]}\\nuseEffect{}\\nuseState{[getPdfUrl, setGetPdfUrl]}\\nuseState{[getUpdateValue,setGetUpdatedValue]}\\nuseState{[getMainImage,setGetMainImage]}\\nuseState{[getBannerImage,setGetBannerImage]}\\nuseState{[descriptionValue, setDescriptionValue]('')}\", () => [useImageAndBannerImage, useAxios]);\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(PathwayUpdateModal, \"PathwayUpdateModal\", \"/home/devnineteen/Music/evergreen-frontend/src/components/pathway/PathwayUpdateModal.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/src/components/pathway/PathwayUpdateModal.js"],"names":["React","useEffect","useState","useRef","Modal","Form","Button","notification","useAxios","configure","axiosInstance","DataFieldStore","PathwayForm","AuthService","UploaderService","OfferStore","useImageAndBannerImage","axios","PathwayUpdateModal","pathway","onCancel","visible","pathwayStore","providers","role","getPathwayListData","formRef","currentSession","userId","id","provider_id","file","newFile","onFileChange","setFile","onChangeFileUpload","bannerFile","onBannerFileChange","newBannerFile","setBannerFile","onChangeBannerUpload","reset","groupsOfOffers","setGroupsOfOffers","useForm","form","datafieldStore","useContainer","offerStore","method","manual","putError","error","updatePathway","submitUpdate","values","validateFields","groupOrderByYearNum","groups_of_offers","g","year","getFieldValue","group_name","push","results","offer_ids","removed","offers","semester","groupOrder","yearSubmission","key","map","url","data","group_sort_order","getUpdateValue","getBannerImage","getMainImage","descriptionValue","status","fileable_type","filePayload","pathwayEntity","entities","Files","length","uploadFile","uploaded_by_user_id","fileable_id","success","message","description","meta","updateOne","clonedData","Object","assign","err","console","groupedDataFields","DataFields","myTopics","topic","reduce","acc","curr","index","populateFields","p","setFieldsValue","frequency_unit","Number","topics","setDescriptionValue","current","providerEntities","request","statusText","groupedFiles","v","f","filter","getPdfUrl","setGetPdfUrl","setGetUpdatedValue","setGetMainImage","setGetBannerImage","handlePropData","handleUpadteMain","handleUpadteBanner","handleDescriptionValue","value","backgroundColor","padding","maxHeight","borderTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { Modal, Form, Button, notification } from 'antd';\r\nimport useAxios, { configure } from 'axios-hooks';\r\nimport axiosInstance from 'services/AxiosInstance';\r\nimport DataFieldStore from 'store/DataField';\r\nimport PathwayForm from 'components/pathway/PathwayForm';\r\nimport {\r\n  groupBy,\r\n  isNil,\r\n  orderBy,\r\n  map,\r\n  head,\r\n  reject,\r\n  sortBy,\r\n  mapValues,\r\n  flowRight,\r\n} from 'lodash';\r\nimport AuthService from 'services/AuthService';\r\nimport UploaderService from 'services/Uploader';\r\nimport OfferStore from 'store/Offer';\r\nimport { useImageAndBannerImage } from 'hooks';\r\nimport 'assets/scss/antd-overrides.scss';\r\n\r\nconfigure({\r\n  axios: axiosInstance,\r\n});\r\n\r\nexport default function PathwayUpdateModal({\r\n  pathway,\r\n  onCancel,\r\n  visible,\r\n  pathwayStore,\r\n  providers,\r\n  role,\r\n  getPathwayListData\r\n}) {\r\n  const formRef = useRef(null);\r\n  const { id: userId, provider_id } = AuthService.currentSession;\r\n  const [\r\n    { file, newFile, onFileChange, setFile, onChangeFileUpload },\r\n    {\r\n      bannerFile,\r\n      onBannerFileChange,\r\n      newBannerFile,\r\n      setBannerFile,\r\n      onChangeBannerUpload,\r\n    },\r\n    reset,\r\n  ] = useImageAndBannerImage();\r\n\r\n  const [groupsOfOffers, setGroupsOfOffers] = useState([]);\r\n\r\n  const [form] = Form.useForm();\r\n  const datafieldStore = DataFieldStore.useContainer();\r\n  const offerStore = OfferStore.useContainer();\r\n  const [{ error: putError }, updatePathway] = useAxios(\r\n    {\r\n      method: 'PUT',\r\n    },\r\n    { manual: true }\r\n  );\r\n\r\n  const submitUpdate = async () => {\r\n    try {\r\n      const values = await form.validateFields([\r\n        'banner_image',\r\n        'main_image',\r\n        'rubric_attachment',\r\n        'location_type',\r\n        'description',\r\n        'learn_and_earn',\r\n        'frequency',\r\n        'frequency_unit',\r\n        'name',\r\n        'topics',\r\n        'outlook',\r\n        'earnings',\r\n        'type',\r\n        'keywords',\r\n        'provider_id',\r\n        'is_local_promo',\r\n        'is_main_promo',\r\n        'external_url',\r\n      ]);\r\n\r\n      // console.log(\"valuesssssss\",values)\r\n\r\n      let groupOrderByYearNum = [];\r\n      let groups_of_offers = map(groupsOfOffers, (g) => {\r\n        // const linkData = form.getFieldValue(g)\r\n        // console.log(\"insideeeeeeeeee\",linkData)\r\n        const year = form.getFieldValue(g.group_name);\r\n        groupOrderByYearNum.push(g.group_name);\r\n        const results = {\r\n          group_name: g.group_name,\r\n          offer_ids: g.removed ? [] : map(g.offers, 'offer_id'),\r\n          year,\r\n        };\r\n        const semester = form.getFieldValue(`${g.group_name}_semester`) || null;\r\n\r\n        if (semester) {\r\n          return {\r\n            ...results,\r\n            semester,\r\n            year,\r\n          };\r\n        }\r\n\r\n        return results;\r\n      });\r\n\r\n      const groupOrder = await form.validateFields(groupOrderByYearNum);\r\n      let yearSubmission = [];\r\n      for (const key in groupOrder) {\r\n        yearSubmission.push({\r\n          group_name: key,\r\n          year: groupOrder[key],\r\n        });\r\n      }\r\n\r\n      yearSubmission = sortBy(yearSubmission, ['year']).map(\r\n        ({ group_name }) => group_name\r\n      );\r\n\r\n      const { data, status } = await updatePathway({\r\n        url: `/pathways/${pathway.id}`,\r\n        data: {\r\n          ...values,\r\n          group_sort_order: yearSubmission,\r\n          groups_of_offers,\r\n          'rubric_attachment': getUpdateValue,\r\n          'banner_image' : getBannerImage,\r\n          'main_image' : getMainImage,\r\n          'description': descriptionValue\r\n        },\r\n      });\r\n\r\n      const fileable_type = 'pathway';\r\n      let filePayload = [];\r\n\r\n      if (data && userId) {\r\n        const pathwayEntity = pathwayStore.entities[data.id];\r\n        if(pathwayEntity.Files){\r\n          if(pathwayEntity.Files.length){\r\n            filePayload = [...pathwayEntity.Files];\r\n          }\r\n        }\r\n        if (onFileChange && newFile) {\r\n          const results = await UploaderService.uploadFile(newFile, {\r\n            uploaded_by_user_id: userId,\r\n            fileable_type,\r\n            fileable_id: data.id,\r\n          });\r\n\r\n          if (results && results.file.data) {\r\n            filePayload.push({\r\n              ...results.file.data,\r\n            });\r\n          }\r\n\r\n          if (results.success) {\r\n            notification.success({\r\n              message: 'Success',\r\n              description: 'Main image is uploaded',\r\n            });\r\n          }\r\n        }\r\n\r\n        if (onBannerFileChange && newBannerFile) {\r\n          const results = await UploaderService.uploadFile(newBannerFile, {\r\n            uploaded_by_user_id: userId,\r\n            fileable_type,\r\n            fileable_id: data.id,\r\n            meta: 'banner-image',\r\n          });\r\n\r\n          if (results && results.file.data) {\r\n            filePayload.push({\r\n              ...results.file.data,\r\n            });\r\n          }\r\n\r\n          if (results.success) {\r\n            notification.success({\r\n              message: 'Success',\r\n              description: 'Banner image is uploaded',\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (data) {\r\n        pathwayStore.updateOne(data);\r\n      }\r\n\r\n      if (status === 200) {\r\n        if (filePayload.length) {\r\n          let clonedData = Object.assign(data);\r\n          clonedData.Files = filePayload;\r\n          pathwayStore.updateOne(clonedData);\r\n        }\r\n        notification.success({\r\n          message: status,\r\n          description: 'Successfully updated pathway',\r\n        });\r\n        onCancel();\r\n        getPathwayListData();\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const groupedDataFields = groupBy(pathway.DataFields, 'type') || [];\r\n\r\n  let myTopics = [];\r\n\r\n  if (!isNil(groupedDataFields.topic)) {\r\n    myTopics = groupedDataFields.topic.reduce((acc, curr, index) => {\r\n      if (isNil(acc)) {\r\n        return [];\r\n      }\r\n      acc.push(curr.id);\r\n      return acc;\r\n    }, []);\r\n  }\r\n\r\n  function populateFields(p) {\r\n    form.setFieldsValue({\r\n      ...p,\r\n      frequency_unit: Number(p.frequency_unit),\r\n      topics: myTopics,\r\n    });\r\n    if (p && p.description) {\r\n      setDescriptionValue(p.description)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (formRef.current) {\r\n      populateFields(pathway);\r\n    }\r\n\r\n    if (formRef.current && role === 'provider') {\r\n      if (providerEntities.length) {\r\n        providerEntities = reject(providerEntities, (p) => {\r\n          return !(p.id === provider_id);\r\n        });\r\n\r\n        form.setFieldsValue({\r\n          provider_id: head(providerEntities).id || null,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (putError) {\r\n      const { status, statusText } = putError.request;\r\n      notification.error({\r\n        message: status,\r\n        description: statusText,\r\n      });\r\n    }\r\n\r\n    if (pathway.Files) {\r\n      let groupedFiles = flowRight([\r\n        (v) =>\r\n          mapValues(v, (f) =>\r\n            orderBy(\r\n              f,\r\n              ['fileable_type', 'createdAt', 'id'],\r\n              ['desc', 'desc', 'asc']\r\n            )\r\n          ),\r\n        (v) => groupBy(v, 'meta'),\r\n        (v) => v.filter((f) => f.fileable_type === 'pathway'),\r\n      ])(pathway.Files);\r\n\r\n      if (!onFileChange && groupedFiles[null]) {\r\n        setFile(head(groupedFiles[null]));\r\n      }\r\n      if (!onBannerFileChange && groupedFiles['banner-image']) {\r\n        setBannerFile(head(groupedFiles['banner-image']));\r\n      }\r\n    }\r\n  }, [pathway, putError, formRef, file, bannerFile]);\r\n\r\n  let providerEntities = providers;\r\n  const [getPdfUrl, setGetPdfUrl] = useState()\r\n  const [getUpdateValue,setGetUpdatedValue]= useState()\r\n  const [getMainImage,setGetMainImage]=useState()\r\n  const [getBannerImage,setGetBannerImage]=useState()\r\n\r\n  const handlePropData = (getPdfUrl,getUpdateValue) => {\r\n    setGetPdfUrl(getPdfUrl)\r\n    setGetUpdatedValue(getUpdateValue)\r\n    // setDeleteValue(getDeleteValue)\r\n  }\r\n  const handleUpadteMain = (getMainImage) => {\r\n    setGetMainImage(getMainImage)\r\n    // setDeleteValue(getDeleteValue)\r\n  }\r\n  const handleUpadteBanner = (getBannerImage) => {\r\n    setGetBannerImage(getBannerImage)\r\n    // setDeleteValue(getDeleteValue)\r\n  }\r\n\r\n  const [descriptionValue, setDescriptionValue] = useState('');\r\n\r\n  const handleDescriptionValue = (value) => {\r\n    setDescriptionValue(value)\r\n  }\r\n  // console.log(\"ouuuuuuuu\",getUpdateValue)\r\n  return (\r\n    <Modal\r\n      forceRender={true}\r\n      className=\"custom-modal\"\r\n      title={'Update Pathway'}\r\n      visible={visible}\r\n      width={998}\r\n      bodyStyle={{ backgroundColor: '#f0f2f5', padding: 0 }}\r\n      footer={true}\r\n      onCancel={onCancel}\r\n      afterClose={() => {\r\n        reset();\r\n      }}\r\n    >\r\n      <Form\r\n        form={form}\r\n        ref={formRef}\r\n        initialValues={{\r\n          provider_id:\r\n            role === 'provider' && providers && providers.length\r\n              ? head(providers).id\r\n              : null,\r\n        }}\r\n      >\r\n        <div className=\"p-6 overflow-y-auto\" style={{ maxHeight: '32rem' }}>\r\n          <PathwayForm\r\n            pathway={pathway}\r\n            datafields={datafieldStore.entities}\r\n            offers={Object.values(offerStore.entities)}\r\n            groupsOfOffers={groupsOfOffers}\r\n            setGroupsOfOffers={setGroupsOfOffers}\r\n            userId={userId}\r\n            onChangeUpload={onChangeFileUpload}\r\n            file={file}\r\n            bannerFile={bannerFile}\r\n            onChangeBannerUpload={onChangeBannerUpload}\r\n            providers={providerEntities}\r\n            role={role}\r\n            form={form}\r\n            offerStore={offerStore}\r\n            handlePropData={handlePropData}\r\n            handleUpadteMain={handleUpadteMain}\r\n            handleUpadteBanner={handleUpadteBanner}\r\n            descriptionValue={descriptionValue}\r\n            handleDescriptionValue={handleDescriptionValue}\r\n          />\r\n        </div>\r\n        <section\r\n          className=\"bg-white px-6 pt-5 pb-1 flex justify-center\"\r\n          style={{\r\n            borderTop: '1px solid #f0f0f0',\r\n          }}\r\n        >\r\n          <Button\r\n            className=\"mr-3 px-10 rounded\"\r\n            size=\"small\"\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            onClick={submitUpdate}\r\n          >\r\n            Update\r\n          </Button>\r\n          <Button\r\n            className=\"px-10 rounded\"\r\n            size=\"small\"\r\n            type=\"dashed\"\r\n            onClick={() => onCancel()}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </section>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}