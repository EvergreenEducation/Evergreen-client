{"ast":null,"code":"import _asyncToGenerator from \"/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport axiosInstance from 'services/AxiosInstance';\nimport cuid from 'cuid';\nimport * as AwsS3 from '@uppy/aws-s3';\nimport * as Uppy from '@uppy/core';\n\nclass UploadService {\n  upload({\n    name,\n    mime_type,\n    uploaded_by_user_id,\n    fileable_type,\n    fileable_id,\n    binaryFile,\n    meta = null\n  }) {\n    return _asyncToGenerator(function* () {\n      const uppy = Uppy();\n      const newFileName = `${cuid()}_${name}`;\n      uppy.use(AwsS3, {\n        getUploadParameters() {\n          return axiosInstance.post('/files/generate_presigned_url', {\n            name: newFileName\n          }).then(({\n            data\n          }) => {\n            return {\n              method: 'PUT',\n              url: data.url,\n              fields: [],\n              headers: []\n            };\n          });\n        }\n\n      });\n      uppy.addFile({\n        name: newFileName,\n        type: mime_type,\n        data: binaryFile,\n        source: 'Local'\n      });\n      const result = yield uppy.upload();\n\n      if (result.successful && result.successful.length) {\n        const file = yield axiosInstance.post('/files', {\n          name: name,\n          location: newFileName,\n          mime_type,\n          fileable_id,\n          fileable_type,\n          uploaded_by_user_id,\n          meta\n        });\n        return {\n          success: true,\n          file\n        };\n      } else {\n        return {\n          success: false\n        };\n      }\n    })();\n  }\n\n  uploadFile(file, {\n    uploaded_by_user_id,\n    fileable_type,\n    fileable_id,\n    meta = null\n  }) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const name = file.name,\n            type = file.type,\n            originFileObj = file.originFileObj;\n      let data = {\n        name,\n        mime_type: type,\n        uploaded_by_user_id,\n        fileable_type,\n        fileable_id,\n        binaryFile: originFileObj,\n        meta\n      };\n      return yield _this.upload(data);\n    })();\n  }\n\n  // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {\n    // @ts-ignore\n    this[key] = eval(code);\n  }\n\n}\n\nconst _default = new UploadService();\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(UploadService, \"UploadService\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/services/Uploader.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/services/Uploader.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Desktop/Projects/Evergreen-client/src/services/Uploader.js"],"names":["axiosInstance","cuid","AwsS3","Uppy","UploadService","upload","name","mime_type","uploaded_by_user_id","fileable_type","fileable_id","binaryFile","meta","uppy","newFileName","use","getUploadParameters","post","then","data","method","url","fields","headers","addFile","type","source","result","successful","length","file","location","success","uploadFile","originFileObj"],"mappings":";;;;;;;;;;;AAAA,OAAOA,aAAP,MAA0B,wBAA1B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,YAAtB;;AAEA,MAAMC,aAAN,CAAoB;AACZC,EAAAA,MAAN,CAAa;AACXC,IAAAA,IADW;AAEXC,IAAAA,SAFW;AAGXC,IAAAA,mBAHW;AAIXC,IAAAA,aAJW;AAKXC,IAAAA,WALW;AAMXC,IAAAA,UANW;AAOXC,IAAAA,IAAI,GAAG;AAPI,GAAb,EAQG;AAAA;AACD,YAAMC,IAAI,GAAGV,IAAI,EAAjB;AACA,YAAMW,WAAW,GAAI,GAAEb,IAAI,EAAG,IAAGK,IAAK,EAAtC;AAEAO,MAAAA,IAAI,CAACE,GAAL,CAASb,KAAT,EAAgB;AACdc,QAAAA,mBAAmB,GAAG;AACpB,iBAAOhB,aAAa,CACjBiB,IADI,CACC,+BADD,EACkC;AACrCX,YAAAA,IAAI,EAAEQ;AAD+B,WADlC,EAIJI,IAJI,CAIC,CAAC;AAAEC,YAAAA;AAAF,WAAD,KAAc;AAClB,mBAAO;AACLC,cAAAA,MAAM,EAAE,KADH;AAELC,cAAAA,GAAG,EAAEF,IAAI,CAACE,GAFL;AAGLC,cAAAA,MAAM,EAAE,EAHH;AAILC,cAAAA,OAAO,EAAE;AAJJ,aAAP;AAMD,WAXI,CAAP;AAYD;;AAda,OAAhB;AAiBAV,MAAAA,IAAI,CAACW,OAAL,CAAa;AACXlB,QAAAA,IAAI,EAAEQ,WADK;AAEXW,QAAAA,IAAI,EAAElB,SAFK;AAGXY,QAAAA,IAAI,EAAER,UAHK;AAIXe,QAAAA,MAAM,EAAE;AAJG,OAAb;AAOA,YAAMC,MAAM,SAASd,IAAI,CAACR,MAAL,EAArB;;AAEA,UAAIsB,MAAM,CAACC,UAAP,IAAqBD,MAAM,CAACC,UAAP,CAAkBC,MAA3C,EAAmD;AACjD,cAAMC,IAAI,SAAS9B,aAAa,CAACiB,IAAd,CAAmB,QAAnB,EAA6B;AAC9CX,UAAAA,IAAI,EAAEA,IADwC;AAE9CyB,UAAAA,QAAQ,EAAEjB,WAFoC;AAG9CP,UAAAA,SAH8C;AAI9CG,UAAAA,WAJ8C;AAK9CD,UAAAA,aAL8C;AAM9CD,UAAAA,mBAN8C;AAO9CI,UAAAA;AAP8C,SAA7B,CAAnB;AAUA,eAAO;AAAEoB,UAAAA,OAAO,EAAE,IAAX;AAAiBF,UAAAA;AAAjB,SAAP;AACD,OAZD,MAYO;AACL,eAAO;AAAEE,UAAAA,OAAO,EAAE;AAAX,SAAP;AACD;AA5CA;AA6CF;;AAEKC,EAAAA,UAAN,CACEH,IADF,EAEE;AAAEtB,IAAAA,mBAAF;AAAuBC,IAAAA,aAAvB;AAAsCC,IAAAA,WAAtC;AAAmDE,IAAAA,IAAI,GAAG;AAA1D,GAFF,EAGE;AAAA;;AAAA;AAAA,YACQN,IADR,GACsCwB,IADtC,CACQxB,IADR;AAAA,YACcmB,IADd,GACsCK,IADtC,CACcL,IADd;AAAA,YACoBS,aADpB,GACsCJ,IADtC,CACoBI,aADpB;AAEA,UAAIf,IAAI,GAAG;AACTb,QAAAA,IADS;AAETC,QAAAA,SAAS,EAAEkB,IAFF;AAGTjB,QAAAA,mBAHS;AAITC,QAAAA,aAJS;AAKTC,QAAAA,WALS;AAMTC,QAAAA,UAAU,EAAEuB,aANH;AAOTtB,QAAAA;AAPS,OAAX;AASA,mBAAa,KAAI,CAACP,MAAL,CAAYc,IAAZ,CAAb;AAXA;AAYD;;AAvEiB;AAAA;AAAA;AAAA;AAAA;;AAAA;;iBA0EL,IAAIf,aAAJ,E;;AAAf;;;;;;;;;;0BA1EMA,a","sourcesContent":["import axiosInstance from 'services/AxiosInstance';\nimport cuid from 'cuid';\n\nimport * as AwsS3 from '@uppy/aws-s3';\nimport * as Uppy from '@uppy/core';\n\nclass UploadService {\n  async upload({\n    name,\n    mime_type,\n    uploaded_by_user_id,\n    fileable_type,\n    fileable_id,\n    binaryFile,\n    meta = null,\n  }) {\n    const uppy = Uppy();\n    const newFileName = `${cuid()}_${name}`;\n\n    uppy.use(AwsS3, {\n      getUploadParameters() {\n        return axiosInstance\n          .post('/files/generate_presigned_url', {\n            name: newFileName,\n          })\n          .then(({ data }) => {\n            return {\n              method: 'PUT',\n              url: data.url,\n              fields: [],\n              headers: [],\n            };\n          });\n      },\n    });\n\n    uppy.addFile({\n      name: newFileName,\n      type: mime_type,\n      data: binaryFile,\n      source: 'Local',\n    });\n\n    const result = await uppy.upload();\n\n    if (result.successful && result.successful.length) {\n      const file = await axiosInstance.post('/files', {\n        name: name,\n        location: newFileName,\n        mime_type,\n        fileable_id,\n        fileable_type,\n        uploaded_by_user_id,\n        meta,\n      });\n\n      return { success: true, file };\n    } else {\n      return { success: false };\n    }\n  }\n\n  async uploadFile(\n    file,\n    { uploaded_by_user_id, fileable_type, fileable_id, meta = null }\n  ) {\n    const { name, type, originFileObj } = file;\n    let data = {\n      name,\n      mime_type: type,\n      uploaded_by_user_id,\n      fileable_type,\n      fileable_id,\n      binaryFile: originFileObj,\n      meta,\n    };\n    return await this.upload(data);\n  }\n}\n\nexport default new UploadService();\n"]},"metadata":{},"sourceType":"module"}