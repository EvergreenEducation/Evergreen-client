{"ast":null,"code":"import _asyncToGenerator from \"/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/shared/PdfUploadFunction.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useState } from 'react';\nimport { Layout, Row, Col, Input, Form, Upload, message, Button } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\nimport 'assets/scss/antd-overrides.scss';\nimport { ToastContainer, toast } from 'react-toastify';\n\nconst axios = require('axios').default;\n\ntoast.configure();\n\nfunction PdfUploadFunction({\n  handlePdfData\n}) {\n  const _useState = useState({\n    files: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputFile = _useState2[0],\n        setInputFile = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        pdfData = _useState4[0],\n        setPdfData = _useState4[1];\n\n  const onChangeUpload = e => {\n    let emailvalue = _objectSpread(_objectSpread({}, inputFile), {}, {\n      files: e.target.files[0]\n    });\n\n    setInputFile(emailvalue);\n  };\n\n  const handleButton = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      yield pdfFileData(inputFile).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (resp) {\n          console.log(\"resp\", resp);\n\n          if (resp.status === 200) {\n            let pdfItem = resp.data.original;\n            handlePdfData(pdfItem);\n            handlePdfData1(pdfItem);\n            notify(\"success\");\n          }\n        });\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }()).catch(error => {\n        console.log(error, \"erorrr\");\n      });\n    });\n\n    return function handleButton() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const pdfFileData = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* (inputFile) {\n      let fileData = inputFile.files;\n      var bodyFormData = new FormData();\n      yield bodyFormData.append('files', fileData);\n      let pdfData = yield axios.post('http://localhost:8888/api/v1/files/upload_pdf_file', bodyFormData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return pdfData;\n    });\n\n    return function pdfFileData(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  const notify = msg => {\n    if (msg == \"error\") {\n      toast.error(\"Please select the pdf format\");\n    } else if (msg == \"success\") {\n      toast.success(\"Pdf file upload successfully\");\n    }\n  };\n\n  console.log(\"pdfData\", pdfData);\n  return /*#__PURE__*/React.createElement(Layout, {\n    className: \"h-auto mb-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 7,\n    className: \"flex justify-end items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Rubric Attachment\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"file-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: \"file\",\n    onChange: e => onChangeUpload(e, \"files\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    class: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Choose\"), /*#__PURE__*/React.createElement(\"span\", {\n    class: \"label\",\n    \"data-js-label\": true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 43\n    }\n  }, inputFile !== null ? inputFile.files.name : \"Choose File\"))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"pdf_btn\",\n    onClick: () => handleButton(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Upload PDF\")));\n}\n\n__signature__(PdfUploadFunction, \"useState{[inputFile, setInputFile]({\\n    files: []\\n  })}\\nuseState{[pdfData,setPdfData]}\");\n\nconst _default = PdfUploadFunction;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(axios, \"axios\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/shared/PdfUploadFunction.js\");\n  reactHotLoader.register(PdfUploadFunction, \"PdfUploadFunction\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/shared/PdfUploadFunction.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/shared/PdfUploadFunction.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Desktop/Projects/Evergreen-client/src/components/shared/PdfUploadFunction.js"],"names":["React","useEffect","useState","Layout","Row","Col","Input","Form","Upload","message","Button","FontAwesomeIcon","faCloudUploadAlt","ToastContainer","toast","axios","require","default","configure","PdfUploadFunction","handlePdfData","files","inputFile","setInputFile","pdfData","setPdfData","onChangeUpload","e","emailvalue","target","handleButton","pdfFileData","then","resp","console","log","status","pdfItem","data","original","handlePdfData1","notify","catch","error","fileData","bodyFormData","FormData","append","post","headers","msg","success","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Layout, Row, Col, Input, Form, Upload, message, Button } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\nimport 'assets/scss/antd-overrides.scss';\nimport { ToastContainer, toast } from 'react-toastify';\nconst axios = require('axios').default;\ntoast.configure()\n\nfunction PdfUploadFunction({handlePdfData}) {\n  const [inputFile, setInputFile] = useState({\n    files: []\n  })\n  const [pdfData,setPdfData] = useState()\n  const onChangeUpload = (e) => {\n    let emailvalue = { ...inputFile, files: e.target.files[0] }\n    setInputFile(emailvalue)\n  }\n  const handleButton = async () => {\n    await pdfFileData(inputFile).then(async resp => {\n      console.log(\"resp\",resp)\n      if (resp.status === 200) {\n        let pdfItem = resp.data.original\n        handlePdfData(pdfItem)\n        handlePdfData1(pdfItem)\n        notify(\"success\")\n      }\n    }).catch(error => {\n      console.log(error,\"erorrr\")\n    })\n  }\n  const pdfFileData = async (inputFile) => {\n    let fileData = inputFile.files\n    var bodyFormData = new FormData();\n    await bodyFormData.append('files', fileData);\n    let pdfData = await axios.post('http://localhost:8888/api/v1/files/upload_pdf_file', bodyFormData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    })\n    return pdfData\n  }\n  const notify = msg => {\n    if (msg == \"error\") {\n        toast.error(\"Please select the pdf format\")\n    } else if (msg == \"success\") {\n        toast.success(\"Pdf file upload successfully\")\n    }\n}\n  console.log(\"pdfData\",pdfData)\n  return (\n    <Layout className=\"h-auto mb-6\">\n       <Col span={7} className=\"flex justify-end items-center\">\n        <label>Rubric Attachment</label>\n        <div class='file-input'>\n          <input type='file'  name=\"file\"  onChange={(e) => onChangeUpload(e, \"files\")}/>\n          <span class='button'>Choose</span>\n        <span class='label' data-js-label><label>{inputFile !== null ? inputFile.files.name : \"Choose File\"}</label></span>\n        </div>\n        <button className=\"pdf_btn\" onClick={() => handleButton()}>Upload PDF</button> \n      </Col>\n    </Layout>\n  );\n}\n\nexport default PdfUploadFunction;\n"]},"metadata":{},"sourceType":"module"}