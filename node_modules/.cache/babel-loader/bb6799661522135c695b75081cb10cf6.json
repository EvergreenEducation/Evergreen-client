{"ast":null,"code":"var ee = require('namespace-emitter');\n\nmodule.exports = /*#__PURE__*/function () {\n  function UppySocket(opts) {\n    this.opts = opts;\n    this._queued = [];\n    this.isOpen = false;\n    this.emitter = ee();\n    this._handleMessage = this._handleMessage.bind(this);\n    this.close = this.close.bind(this);\n    this.emit = this.emit.bind(this);\n    this.on = this.on.bind(this);\n    this.once = this.once.bind(this);\n    this.send = this.send.bind(this);\n\n    if (!opts || opts.autoOpen !== false) {\n      this.open();\n    }\n  }\n\n  var _proto = UppySocket.prototype;\n\n  _proto.open = function open() {\n    var _this = this;\n\n    this.socket = new WebSocket(this.opts.target);\n\n    this.socket.onopen = function (e) {\n      _this.isOpen = true;\n\n      while (_this._queued.length > 0 && _this.isOpen) {\n        var first = _this._queued[0];\n\n        _this.send(first.action, first.payload);\n\n        _this._queued = _this._queued.slice(1);\n      }\n    };\n\n    this.socket.onclose = function (e) {\n      _this.isOpen = false;\n    };\n\n    this.socket.onmessage = this._handleMessage;\n  };\n\n  _proto.close = function close() {\n    if (this.socket) {\n      this.socket.close();\n    }\n  };\n\n  _proto.send = function send(action, payload) {\n    // attach uuid\n    if (!this.isOpen) {\n      this._queued.push({\n        action: action,\n        payload: payload\n      });\n\n      return;\n    }\n\n    this.socket.send(JSON.stringify({\n      action: action,\n      payload: payload\n    }));\n  };\n\n  _proto.on = function on(action, handler) {\n    this.emitter.on(action, handler);\n  };\n\n  _proto.emit = function emit(action, payload) {\n    this.emitter.emit(action, payload);\n  };\n\n  _proto.once = function once(action, handler) {\n    this.emitter.once(action, handler);\n  };\n\n  _proto._handleMessage = function _handleMessage(e) {\n    try {\n      var message = JSON.parse(e.data);\n      this.emit(message.action, message.payload);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return UppySocket;\n}();","map":{"version":3,"sources":["/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/@uppy/companion-client/lib/Socket.js"],"names":["ee","require","module","exports","UppySocket","opts","_queued","isOpen","emitter","_handleMessage","bind","close","emit","on","once","send","autoOpen","open","_proto","prototype","_this","socket","WebSocket","target","onopen","e","length","first","action","payload","slice","onclose","onmessage","push","JSON","stringify","handler","message","parse","data","err","console","log"],"mappings":"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","sourcesContent":["var ee = require('namespace-emitter');\n\nmodule.exports = /*#__PURE__*/function () {\n  function UppySocket(opts) {\n    this.opts = opts;\n    this._queued = [];\n    this.isOpen = false;\n    this.emitter = ee();\n    this._handleMessage = this._handleMessage.bind(this);\n    this.close = this.close.bind(this);\n    this.emit = this.emit.bind(this);\n    this.on = this.on.bind(this);\n    this.once = this.once.bind(this);\n    this.send = this.send.bind(this);\n\n    if (!opts || opts.autoOpen !== false) {\n      this.open();\n    }\n  }\n\n  var _proto = UppySocket.prototype;\n\n  _proto.open = function open() {\n    var _this = this;\n\n    this.socket = new WebSocket(this.opts.target);\n\n    this.socket.onopen = function (e) {\n      _this.isOpen = true;\n\n      while (_this._queued.length > 0 && _this.isOpen) {\n        var first = _this._queued[0];\n\n        _this.send(first.action, first.payload);\n\n        _this._queued = _this._queued.slice(1);\n      }\n    };\n\n    this.socket.onclose = function (e) {\n      _this.isOpen = false;\n    };\n\n    this.socket.onmessage = this._handleMessage;\n  };\n\n  _proto.close = function close() {\n    if (this.socket) {\n      this.socket.close();\n    }\n  };\n\n  _proto.send = function send(action, payload) {\n    // attach uuid\n    if (!this.isOpen) {\n      this._queued.push({\n        action: action,\n        payload: payload\n      });\n\n      return;\n    }\n\n    this.socket.send(JSON.stringify({\n      action: action,\n      payload: payload\n    }));\n  };\n\n  _proto.on = function on(action, handler) {\n    this.emitter.on(action, handler);\n  };\n\n  _proto.emit = function emit(action, payload) {\n    this.emitter.emit(action, payload);\n  };\n\n  _proto.once = function once(action, handler) {\n    this.emitter.once(action, handler);\n  };\n\n  _proto._handleMessage = function _handleMessage(e) {\n    try {\n      var message = JSON.parse(e.data);\n      this.emit(message.action, message.payload);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return UppySocket;\n}();"]},"metadata":{},"sourceType":"script"}