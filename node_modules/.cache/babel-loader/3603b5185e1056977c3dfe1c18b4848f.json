{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/devnineteen/Music/evergreen-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/devnineteen/Music/evergreen-frontend/src/components/shared/PdfUploadFunction.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useState } from 'react';\nimport { Layout, Row, Col, Input, Form, Upload, message, Button } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\nimport 'assets/scss/antd-overrides.scss';\nimport { ToastContainer, toast } from 'react-toastify';\n\nconst axios = require('axios').default;\n\ntoast.configure();\n\nfunction PdfUploadFunction({\n  handlePdfData,\n  pathway\n}) {\n  const _useState = useState({\n    files: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputFile = _useState2[0],\n        setInputFile = _useState2[1];\n\n  const onChangeUpload = e => {\n    let emailvalue = _objectSpread(_objectSpread({}, inputFile), {}, {\n      files: e.target.files\n    });\n\n    setInputFile(emailvalue);\n\n    if (e.target.files.length) {\n      handleButton(e.target.files);\n    }\n  };\n\n  const handleButton = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (files) {\n      console.log(files);\n      yield pdfFileData(files).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (resp) {\n          if (resp.status === 200) {\n            let pdfItem = resp.data.data;\n            handlePdfData(pdfItem);\n            notify(\"success\");\n          }\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()).catch(error => {\n        console.log(error, \"erorrr\");\n      });\n    });\n\n    return function handleButton(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const pdfFileData = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* (inputFile) {\n      let fileData = inputFile;\n      console.log(\"filesdataaaa\", fileData);\n      const data = new FormData();\n\n      var _iterator = _createForOfIteratorHelper(fileData),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          const File = _step.value;\n          data.append('files', File);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      let pdfData = yield axios.post('http://localhost:8888/api/v1/files/upload_pdf_file', data, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return pdfData;\n    });\n\n    return function pdfFileData(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  const notify = msg => {\n    if (msg == \"error\") {\n      toast.error(\"Please select the pdf format\");\n    } else if (msg == \"success\") {\n      toast.success(\"Pdf file upload successfully\");\n    }\n  };\n\n  console.log(\"pdfData\", inputFile);\n  return /*#__PURE__*/React.createElement(Layout, {\n    className: \"h-auto mb-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 7,\n    className: \"flex justify-end items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"file-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    multiple: true,\n    type: \"file\",\n    name: \"file\",\n    onChange: e => onChangeUpload(e, \"files\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    class: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, \"Choose\"), /*#__PURE__*/React.createElement(\"span\", {\n    class: \"label\",\n    \"data-js-label\": true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 45\n    }\n  }, inputFile !== null ? inputFile.files.name : \"Choose File\")))));\n}\n\n__signature__(PdfUploadFunction, \"useState{[inputFile, setInputFile]({\\n    files: []\\n  })}\");\n\nconst _default = PdfUploadFunction;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(axios, \"axios\", \"/home/devnineteen/Music/evergreen-frontend/src/components/shared/PdfUploadFunction.js\");\n  reactHotLoader.register(PdfUploadFunction, \"PdfUploadFunction\", \"/home/devnineteen/Music/evergreen-frontend/src/components/shared/PdfUploadFunction.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/devnineteen/Music/evergreen-frontend/src/components/shared/PdfUploadFunction.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/src/components/shared/PdfUploadFunction.js"],"names":["React","useEffect","useState","Layout","Row","Col","Input","Form","Upload","message","Button","FontAwesomeIcon","faCloudUploadAlt","ToastContainer","toast","axios","require","default","configure","PdfUploadFunction","handlePdfData","pathway","files","inputFile","setInputFile","onChangeUpload","e","emailvalue","target","length","handleButton","console","log","pdfFileData","then","resp","status","pdfItem","data","notify","catch","error","fileData","FormData","File","append","pdfData","post","headers","msg","success","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Layout, Row, Col, Input, Form, Upload, message, Button } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\nimport 'assets/scss/antd-overrides.scss';\nimport { ToastContainer, toast } from 'react-toastify';\nconst axios = require('axios').default;\ntoast.configure()\n\nfunction PdfUploadFunction({ handlePdfData,pathway }) {\n  const [inputFile, setInputFile] = useState({\n    files: []\n  })\n  const onChangeUpload = (e) => {\n    let emailvalue = { ...inputFile, files: e.target.files }\n    setInputFile(emailvalue)\n    if(e.target.files.length){\n      handleButton(e.target.files)\n    }\n  }\n  const handleButton = async (files) => {\n    console.log(files)\n    await pdfFileData(files).then(async resp => {\n      if (resp.status === 200) {\n        let pdfItem = resp.data.data\n        handlePdfData(pdfItem)\n        notify(\"success\")\n      }\n    }).catch(error => {\n      console.log(error, \"erorrr\")\n    })\n  }\n  const pdfFileData = async (inputFile) => {\n    let fileData = inputFile\n    console.log(\"filesdataaaa\",fileData)\n    const data = new FormData();\n    for (const File of fileData) {\n      data.append('files', File);\n    }\n    let pdfData = await axios.post('http://localhost:8888/api/v1/files/upload_pdf_file', data, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    })\n    return pdfData\n  }\n  const notify = msg => {\n    if (msg == \"error\") {\n      toast.error(\"Please select the pdf format\")\n    } else if (msg == \"success\") {\n      toast.success(\"Pdf file upload successfully\")\n    }\n  }\n  console.log(\"pdfData\", inputFile)\n  return (\n    <Layout className=\"h-auto mb-6\">\n      <Col span={7} className=\"flex justify-end items-center\">\n        <div class='file-input'>\n          <input multiple type='file' name=\"file\" onChange={(e) => onChangeUpload(e, \"files\")} />\n          <span class='button'>Choose</span>\n          <span class='label' data-js-label><label>{inputFile !== null ? inputFile.files.name : \"Choose File\"}</label></span>\n        </div>\n        {/* <button className=\"pdf_btn\" onClick={() => handleButton()}>Upload PDF</button>  */}\n      </Col>\n    </Layout>\n  );\n}\n\nexport default PdfUploadFunction;\n"]},"metadata":{},"sourceType":"module"}