{"ast":null,"code":"var domToReact = require('./lib/dom-to-react');\n\nvar attributesToProps = require('./lib/attributes-to-props');\n\nvar htmlToDOM = require('html-dom-parser'); // decode HTML entities by default for `htmlparser2`\n\n\nvar domParserOptions = {\n  decodeEntities: true,\n  lowerCaseAttributeNames: false\n};\n/**\n * Converts HTML string to React elements.\n *\n * @param  {String}   html                    - HTML string.\n * @param  {Object}   [options]               - Parser options.\n * @param  {Object}   [options.htmlparser2]   - htmlparser2 options.\n * @param  {Object}   [options.library]       - Library for React, Preact, etc.\n * @param  {Function} [options.replace]       - Replace method.\n * @return {JSX.Element|JSX.Element[]|String} - React element(s), empty array, or string.\n */\n\nfunction HTMLReactParser(html, options) {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (html === '') {\n    return [];\n  }\n\n  options = options || {};\n  return domToReact(htmlToDOM(html, options.htmlparser2 || domParserOptions), options);\n}\n\nHTMLReactParser.domToReact = domToReact;\nHTMLReactParser.htmlToDOM = htmlToDOM;\nHTMLReactParser.attributesToProps = attributesToProps; // support CommonJS and ES Modules\n\nmodule.exports = HTMLReactParser;\nmodule.exports.default = HTMLReactParser;","map":{"version":3,"sources":["/home/devnineteen/Music/evergreen-frontend/node_modules/html-react-parser/index.js"],"names":["domToReact","require","attributesToProps","htmlToDOM","domParserOptions","decodeEntities","lowerCaseAttributeNames","HTMLReactParser","html","options","TypeError","htmlparser2","module","exports","default"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,2BAAD,CAA/B;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAvB,C,CAEA;;;AACA,IAAIG,gBAAgB,GAAG;AAAEC,EAAAA,cAAc,EAAE,IAAlB;AAAwBC,EAAAA,uBAAuB,EAAE;AAAjD,CAAvB;AAEA;;;;;;;;;;;AAUA,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AACtC,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAIE,SAAJ,CAAc,iCAAd,CAAN;AACD;;AACD,MAAIF,IAAI,KAAK,EAAb,EAAiB;AACf,WAAO,EAAP;AACD;;AACDC,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,SAAOT,UAAU,CACfG,SAAS,CAACK,IAAD,EAAOC,OAAO,CAACE,WAAR,IAAuBP,gBAA9B,CADM,EAEfK,OAFe,CAAjB;AAID;;AAEDF,eAAe,CAACP,UAAhB,GAA6BA,UAA7B;AACAO,eAAe,CAACJ,SAAhB,GAA4BA,SAA5B;AACAI,eAAe,CAACL,iBAAhB,GAAoCA,iBAApC,C,CAEA;;AACAU,MAAM,CAACC,OAAP,GAAiBN,eAAjB;AACAK,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBP,eAAzB","sourcesContent":["var domToReact = require('./lib/dom-to-react');\nvar attributesToProps = require('./lib/attributes-to-props');\nvar htmlToDOM = require('html-dom-parser');\n\n// decode HTML entities by default for `htmlparser2`\nvar domParserOptions = { decodeEntities: true, lowerCaseAttributeNames: false };\n\n/**\n * Converts HTML string to React elements.\n *\n * @param  {String}   html                    - HTML string.\n * @param  {Object}   [options]               - Parser options.\n * @param  {Object}   [options.htmlparser2]   - htmlparser2 options.\n * @param  {Object}   [options.library]       - Library for React, Preact, etc.\n * @param  {Function} [options.replace]       - Replace method.\n * @return {JSX.Element|JSX.Element[]|String} - React element(s), empty array, or string.\n */\nfunction HTMLReactParser(html, options) {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n  if (html === '') {\n    return [];\n  }\n  options = options || {};\n  return domToReact(\n    htmlToDOM(html, options.htmlparser2 || domParserOptions),\n    options\n  );\n}\n\nHTMLReactParser.domToReact = domToReact;\nHTMLReactParser.htmlToDOM = htmlToDOM;\nHTMLReactParser.attributesToProps = attributesToProps;\n\n// support CommonJS and ES Modules\nmodule.exports = HTMLReactParser;\nmodule.exports.default = HTMLReactParser;\n"]},"metadata":{},"sourceType":"script"}