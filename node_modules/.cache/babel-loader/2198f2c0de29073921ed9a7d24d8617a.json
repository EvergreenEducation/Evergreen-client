{"ast":null,"code":"/**\n * Helper to abort upload requests if there has not been any progress for `timeout` ms.\n * Create an instance using `timer = new ProgressTimeout(10000, onTimeout)`\n * Call `timer.progress()` to signal that there has been progress of any kind.\n * Call `timer.done()` when the upload has completed.\n */\nvar ProgressTimeout = /*#__PURE__*/function () {\n  function ProgressTimeout(timeout, timeoutHandler) {\n    this._timeout = timeout;\n    this._onTimedOut = timeoutHandler;\n    this._isDone = false;\n    this._aliveTimer = null;\n    this._onTimedOut = this._onTimedOut.bind(this);\n  }\n\n  var _proto = ProgressTimeout.prototype;\n\n  _proto.progress = function progress() {\n    // Some browsers fire another progress event when the upload is\n    // cancelled, so we have to ignore progress after the timer was\n    // told to stop.\n    if (this._isDone) return;\n\n    if (this._timeout > 0) {\n      if (this._aliveTimer) clearTimeout(this._aliveTimer);\n      this._aliveTimer = setTimeout(this._onTimedOut, this._timeout);\n    }\n  };\n\n  _proto.done = function done() {\n    if (this._aliveTimer) {\n      clearTimeout(this._aliveTimer);\n      this._aliveTimer = null;\n    }\n\n    this._isDone = true;\n  };\n\n  return ProgressTimeout;\n}();\n\nmodule.exports = ProgressTimeout;","map":{"version":3,"sources":["/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/@uppy/utils/lib/ProgressTimeout.js"],"names":["ProgressTimeout","timeout","timeoutHandler","_timeout","_onTimedOut","_isDone","_aliveTimer","bind","_proto","prototype","progress","clearTimeout","setTimeout","done","module","exports"],"mappings":"AAAA;;;;;;AAMA,IAAIA,eAAe,GAAG,aAAa,YAAY;AAC7C,WAASA,eAAT,CAAyBC,OAAzB,EAAkCC,cAAlC,EAAkD;AAChD,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,WAAL,GAAmBF,cAAnB;AACA,SAAKG,OAAL,GAAe,KAAf;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKF,WAAL,GAAmB,KAAKA,WAAL,CAAiBG,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAED,MAAIC,MAAM,GAAGR,eAAe,CAACS,SAA7B;;AAEAD,EAAAA,MAAM,CAACE,QAAP,GAAkB,SAASA,QAAT,GAAoB;AACpC;AACA;AACA;AACA,QAAI,KAAKL,OAAT,EAAkB;;AAElB,QAAI,KAAKF,QAAL,GAAgB,CAApB,EAAuB;AACrB,UAAI,KAAKG,WAAT,EAAsBK,YAAY,CAAC,KAAKL,WAAN,CAAZ;AACtB,WAAKA,WAAL,GAAmBM,UAAU,CAAC,KAAKR,WAAN,EAAmB,KAAKD,QAAxB,CAA7B;AACD;AACF,GAVD;;AAYAK,EAAAA,MAAM,CAACK,IAAP,GAAc,SAASA,IAAT,GAAgB;AAC5B,QAAI,KAAKP,WAAT,EAAsB;AACpBK,MAAAA,YAAY,CAAC,KAAKL,WAAN,CAAZ;AACA,WAAKA,WAAL,GAAmB,IAAnB;AACD;;AAED,SAAKD,OAAL,GAAe,IAAf;AACD,GAPD;;AASA,SAAOL,eAAP;AACD,CAjCkC,EAAnC;;AAmCAc,MAAM,CAACC,OAAP,GAAiBf,eAAjB","sourcesContent":["/**\n * Helper to abort upload requests if there has not been any progress for `timeout` ms.\n * Create an instance using `timer = new ProgressTimeout(10000, onTimeout)`\n * Call `timer.progress()` to signal that there has been progress of any kind.\n * Call `timer.done()` when the upload has completed.\n */\nvar ProgressTimeout = /*#__PURE__*/function () {\n  function ProgressTimeout(timeout, timeoutHandler) {\n    this._timeout = timeout;\n    this._onTimedOut = timeoutHandler;\n    this._isDone = false;\n    this._aliveTimer = null;\n    this._onTimedOut = this._onTimedOut.bind(this);\n  }\n\n  var _proto = ProgressTimeout.prototype;\n\n  _proto.progress = function progress() {\n    // Some browsers fire another progress event when the upload is\n    // cancelled, so we have to ignore progress after the timer was\n    // told to stop.\n    if (this._isDone) return;\n\n    if (this._timeout > 0) {\n      if (this._aliveTimer) clearTimeout(this._aliveTimer);\n      this._aliveTimer = setTimeout(this._onTimedOut, this._timeout);\n    }\n  };\n\n  _proto.done = function done() {\n    if (this._aliveTimer) {\n      clearTimeout(this._aliveTimer);\n      this._aliveTimer = null;\n    }\n\n    this._isDone = true;\n  };\n\n  return ProgressTimeout;\n}();\n\nmodule.exports = ProgressTimeout;"]},"metadata":{},"sourceType":"script"}