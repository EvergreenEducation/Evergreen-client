{"ast":null,"code":"import _asyncToGenerator from \"/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/devnineteen/Desktop/Projects/Evergreen-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useState, useEffect } from 'react';\n\nconst axios = require('axios').default;\n\nconst _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      values = _useState2[0],\n      setValues = _useState2[1];\n\nconst getPdfData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* () {\n    let pdfData = yield axios.get(`http://localhost:8888/api/v1/offers?scope=with_details`);\n    return pdfData;\n  });\n\n  return function getPdfData() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nuseEffect(() => {\n  getPdfData().then(resp => {\n    if (resp.data.status == 200) {\n      const filterdata = resp.data.data.filter(item => item.is_generic === \"true\");\n      setValues(filterdata);\n    }\n  });\n}, []);\nexport const getNewGenericData = values && values;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(axios, \"axios\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/store/CommonVariable.js\");\n  reactHotLoader.register(values, \"values\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/store/CommonVariable.js\");\n  reactHotLoader.register(setValues, \"setValues\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/store/CommonVariable.js\");\n  reactHotLoader.register(getPdfData, \"getPdfData\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/store/CommonVariable.js\");\n  reactHotLoader.register(getNewGenericData, \"getNewGenericData\", \"/home/devnineteen/Desktop/Projects/Evergreen-client/src/store/CommonVariable.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/devnineteen/Desktop/Projects/Evergreen-client/src/store/CommonVariable.js"],"names":["React","useState","useEffect","axios","require","default","values","setValues","getPdfData","pdfData","get","then","resp","data","status","filterdata","filter","item","is_generic","getNewGenericData"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA/B;;kBAG4BJ,QAAQ,CAAC,EAAD,C;;MAA7BK,M;MAAQC,S;;AACf,MAAMC,UAAU;AAAA,+BAAG,aAAY;AAC3B,QAAIC,OAAO,SAASN,KAAK,CAACO,GAAN,CAAW,wDAAX,CAApB;AACA,WAAOD,OAAP;AACH,GAHe;;AAAA,kBAAVD,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAIAN,SAAS,CAAC,MAAM;AACZM,EAAAA,UAAU,GAAGG,IAAb,CAAkBC,IAAI,IAAI;AACtB,QAAGA,IAAI,CAACC,IAAL,CAAUC,MAAV,IAAoB,GAAvB,EAA2B;AACvB,YAAMC,UAAU,GAAIH,IAAI,CAACC,IAAL,CAAUA,IAAV,CAAeG,MAAf,CAAsBC,IAAI,IAAIA,IAAI,CAACC,UAAL,KAAoB,MAAlD,CAApB;AACAX,MAAAA,SAAS,CAACQ,UAAD,CAAT;AACH;AACJ,GALD;AAMH,CAPQ,EAOP,EAPO,CAAT;AAQA,OAAO,MAAMI,iBAAiB,GAAGb,MAAM,IAAIA,MAApC;;;;;;;;;;0BAhBDH,K;0BAGCG,M;0BAAQC,S;0BACTC,U;0BAYOW,iB","sourcesContent":["import React, { useState, useEffect } from 'react';\nconst axios = require('axios').default;\n\n\nconst [values, setValues] = useState([])\nconst getPdfData = async () => {\n    let pdfData = await axios.get(`http://localhost:8888/api/v1/offers?scope=with_details`)\n    return pdfData\n}\nuseEffect(() => {\n    getPdfData().then(resp => {\n        if(resp.data.status == 200){\n            const filterdata =  resp.data.data.filter(item => item.is_generic === \"true\")\n            setValues(filterdata)\n        }\n    })\n},[])\nexport const getNewGenericData = values && values\n"]},"metadata":{},"sourceType":"module"}