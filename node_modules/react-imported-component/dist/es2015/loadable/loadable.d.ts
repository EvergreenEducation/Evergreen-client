import { DefaultImport, Loadable, MarkMeta, Promised } from '../types';
export interface InnerLoadable<T> extends Loadable<T> {
    ok: boolean;
    promise: Promise<T> | undefined;
    _probeChanges(): Promise<boolean>;
}
export declare function toLoadable<T>(firstImportFunction: Promised<T>, autoImport?: boolean): Loadable<T>;
export declare const isItReady: () => boolean;
/**
 * waits for all necessary imports to be fulfilled
 */
export declare const done: () => Promise<void>;
/**
 * try to perform a render and loads all chunks required for it
 * @deprecated
 */
export declare const dryRender: (renderFunction: () => void) => Promise<void>;
export declare const markMeta: MarkMeta[];
/**
 * to be used __only via CLI tools__
 */
export declare const assignImportedComponents: (set: [Promised<any>, string, string, boolean][]) => [Promised<any>, string, string, boolean][];
export declare function executeLoadable(importFunction: DefaultImport<any> | Loadable<any>): Promise<any>;
/**
 * wraps an `import` function with a tracker
 * @internal
 * @param importFunction
 */
export declare function getLoadable<T>(importFunction: DefaultImport<T> | Loadable<T>): Loadable<T>;
/**
 * Reset `importers` weak cache
 * @internal
 */
export declare const clearImportedCache: () => void;
